from __future__ import annotations

from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.db.models import User, NutritionReminder, CookingSession
from app.services.llm import deepseek_complete


def _weekday_str_to_int(name: str) -> int:
    # Monday=0 ... Sunday=6
    mapping = {
        "monday": 0,
        "tuesday": 1,
        "wednesday": 2,
        "thursday": 3,
        "friday": 4,
        "saturday": 5,
        "sunday": 6,
    }
    return mapping[name]


async def send_cooking_day_reminders(bot: Bot, session: AsyncSession, user_id: int = None) -> None:
    now_utc = datetime.now(timezone.utc)
    if user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        users = (await session.execute(select(User).where(User.id == user_id))).scalars().all()
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users = (await session.execute(select(User))).scalars().all()
    for user in users:
        tz_name = user.timezone or settings.DEFAULT_TIMEZONE
        try:
            user_now = now_utc.astimezone(ZoneInfo(tz_name))
        except Exception:
            user_now = now_utc.astimezone(ZoneInfo(settings.DEFAULT_TIMEZONE))
        rem = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == user.id))
        ).scalar_one_or_none()
        if not rem or not rem.is_active:
            continue
        # Check if today is a cooking day
        days = [d.strip().lower() for d in (rem.cooking_days or "").split(",") if d.strip()]
        weekday = user_now.weekday()
        weekday_names = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
        current_day_name = weekday_names[weekday]
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}:")
        print(f"   üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–Ω–∏: {rem.cooking_days}")
        print(f"   üìÖ –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏: {days}")
        print(f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {current_day_name} (weekday={weekday})")
        print(f"   üìÖ –î–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏: {[_weekday_str_to_int(d) for d in days if d in {'sunday', 'wednesday', 'monday', 'tuesday', 'thursday', 'friday', 'saturday'}]}")
        
        if weekday not in [
            _weekday_str_to_int(d) for d in days if d in {"sunday", "wednesday", "monday", "tuesday", "thursday", "friday", "saturday"}
        ]:
            print(f"   ‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            continue
        if user_now.strftime("%H:%M") != rem.reminder_time:
            continue
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.handlers.nutrition_budget import get_user_food_budget
            budget_info = await get_user_food_budget(session, user.id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ budget_info
            if rem.body_goal:
                budget_info = budget_info or {}
                budget_info["body_goal"] = rem.body_goal
            if rem.target_calories:
                budget_info = budget_info or {}
                budget_info["target_calories"] = rem.target_calories
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
            from app.services.nutrition_plan_generator import generate_cooking_plan, generate_fallback_plan
            try:
                plan_text = await generate_cooking_plan(budget_info)
                if not plan_text or len(plan_text.strip()) < 10:
                    plan_text = generate_fallback_plan(budget_info, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
            except Exception as e:
                plan_text = generate_fallback_plan(budget_info, str(e))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            from app.db.models import CookingSession
            from datetime import date
            session.add(CookingSession(user_id=user.id, cooking_date=date.today(), instructions=plan_text))
            await session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—é–¥–∂–µ—Ç–µ
            budget_text = f" (–±—é–¥–∂–µ—Ç: {budget_info['description']})" if budget_info and budget_info["type"] else ""
            header_text = f"üë®‚Äçüç≥ –ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ 2 –¥–Ω—è{budget_text}:"
            await bot.send_message(user.telegram_id, header_text, parse_mode="HTML")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plan_text_html = _convert_markdown_to_html(plan_text)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            parts = _split_into_multiple_messages(plan_text_html)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                await bot.send_message(user.telegram_id, part, parse_mode="HTML")
                
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            try:
                await bot.send_message(user.telegram_id, "üçΩÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏. –£–¥–∞—á–∏ –Ω–∞ –∫—É—Ö–Ω–µ!")
            except Exception:
                continue


async def send_shopping_day_reminders(bot: Bot, session: AsyncSession, user_id: int = None) -> None:
    now_utc = datetime.now(timezone.utc)
    if user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        users = (await session.execute(select(User).where(User.id == user_id))).scalars().all()
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users = (await session.execute(select(User))).scalars().all()
    for user in users:
        tz_name = user.timezone or settings.DEFAULT_TIMEZONE
        try:
            user_now = now_utc.astimezone(ZoneInfo(tz_name))
        except Exception:
            user_now = now_utc.astimezone(ZoneInfo(settings.DEFAULT_TIMEZONE))
        rem = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == user.id))
        ).scalar_one_or_none()
        if not rem or not rem.is_active:
            continue
        days = [d.strip().lower() for d in (rem.cooking_days or "").split(",") if d.strip()]
        # Shopping reminder comes a day BEFORE a cooking day -> today is shopping if tomorrow is cooking
        tomorrow_weekday = (user_now.weekday() + 1) % 7
        weekday_names = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
        current_day_name = weekday_names[user_now.weekday()]
        tomorrow_day_name = weekday_names[tomorrow_weekday]
        
        print(f"üõí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}:")
        print(f"   üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏: {rem.cooking_days}")
        print(f"   üìÖ –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏: {days}")
        print(f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {current_day_name} (weekday={user_now.weekday()})")
        print(f"   üìÖ –ó–∞–≤—Ç—Ä–∞: {tomorrow_day_name} (weekday={tomorrow_weekday})")
        print(f"   üìÖ –î–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏: {[_weekday_str_to_int(d) for d in days if d in {'sunday', 'wednesday', 'monday', 'tuesday', 'thursday', 'friday', 'saturday'}]}")
        
        if tomorrow_weekday not in [
            _weekday_str_to_int(d) for d in days if d in {"sunday", "wednesday", "monday", "tuesday", "thursday", "friday", "saturday"}
        ]:
            print(f"   ‚ùå –ó–∞–≤—Ç—Ä–∞ –Ω–µ –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            continue
        if user_now.strftime("%H:%M") != rem.shopping_reminder_time:
            continue
        # Generate shopping list and calories using AI
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.handlers.nutrition_budget import get_user_food_budget
            budget_info = await get_user_food_budget(session, user.id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ budget_info
            if rem.body_goal:
                budget_info = budget_info or {}
                budget_info["body_goal"] = rem.body_goal
            if rem.target_calories:
                budget_info = budget_info or {}
                budget_info["target_calories"] = rem.target_calories
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            from app.services.nutrition_plan_generator import generate_cooking_plan, generate_fallback_plan
            try:
                ai_text = await generate_cooking_plan(budget_info)
                if not ai_text or len(ai_text.strip()) < 10:
                    ai_text = generate_fallback_plan(budget_info, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
            except Exception as e:
                ai_text = generate_fallback_plan(budget_info, str(e))
        except Exception as e:
            ai_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –æ—Ç –ò–ò: {e}"
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = "üõí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"
            await bot.send_message(user.telegram_id, header)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ai_text_html = _convert_markdown_to_html(ai_text)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            parts = _split_into_multiple_messages(ai_text_html)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                await bot.send_message(user.telegram_id, part, parse_mode="HTML")
        except Exception:
            continue


def _convert_markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Markdown —Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML —Ç–µ–≥–∏ –¥–ª—è Telegram"""
    if not text:
        return text
    
    import re
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **—Ç–µ–∫—Å—Ç** –≤ <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º *—Ç–µ–∫—Å—Ç* –≤ <i>—Ç–µ–∫—Å—Ç</i> (–∫—É—Ä—Å–∏–≤)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `—Ç–µ–∫—Å—Ç` –≤ <code>—Ç–µ–∫—Å—Ç</code> (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    text = re.sub(r'^##\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    text = re.sub(r'^#\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º - –ø—É–Ω–∫—Ç –≤ ‚Ä¢ –ø—É–Ω–∫—Ç (–¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    text = re.sub(r'^\s*-\s+', r'‚Ä¢ ', text, flags=re.MULTILINE)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º * –ø—É–Ω–∫—Ç –≤ ‚Ä¢ –ø—É–Ω–∫—Ç (–¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    text = re.sub(r'^\s*\*\s+', r'‚Ä¢ ', text, flags=re.MULTILINE)
    
    return text


def _split_into_multiple_messages(text: str, max_len: int = 3000) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç DeepSeek.
    """
    if not text:
        return []
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª–∏–Ω–Ω–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    force_split_threshold = 1500
    
    if len(text) <= force_split_threshold:
        return [text]
    
    # –î–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏—â–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
    lines = text.split('\n')
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    section_indicators = [
        'üìã', 'üõí', 'üìù', 'üë®‚Äçüç≥', 'üî•', 'üíµ', 'üí∞', 'üçΩÔ∏è', 'ü•ó', 'ü•©',
        '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:', '–ü–æ–∫—É–ø–∫–∏:', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', '–†–µ—Ü–µ–ø—Ç—ã:', 
        '–ö–∞–ª–æ—Ä–∏–∏:', '–°—Ç–æ–∏–º–æ—Å—Ç—å:', '–ë—é–¥–∂–µ—Ç:', '–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
        '–î–µ–Ω—å 1:', '–î–µ–Ω—å 2:', '–ó–∞–≤—Ç—Ä–∞–∫:', '–û–±–µ–¥:', '–£–∂–∏–Ω:', '–ü–µ—Ä–µ–∫—É—Å:'
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–µ–∫—Ü–∏—è–º
    parts = []
    current_part = []
    current_length = 0
    
    for i, line in enumerate(lines):
        line_length = len(line) + 1  # +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Å–µ–∫—Ü–∏–∏
        is_section_break = any(indicator in line for indicator in section_indicators)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π –∏–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–µ–∫—Ü–∏–∏
        if (current_length + line_length > max_len and current_part) or (is_section_break and current_part and current_length > max_len * 0.3):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            part_text = '\n'.join(current_part).strip()
            if part_text:
                parts.append(part_text)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            current_part = [line]
            current_length = line_length
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            current_part.append(line)
            current_length += line_length
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        part_text = '\n'.join(current_part).strip()
        if part_text:
            parts.append(part_text)
    
    # –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∏–ª–∏ –¥–∞–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    if len(parts) == 1 or len(parts) > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —á–∞—Å—Ç–µ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        # –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ —Ç–æ–ª—å–∫–æ 1 —á–∞—Å—Ç—å, –Ω–æ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, 
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
        if len(parts) == 1 and len(text) > 1500:
            return _split_into_parts_standard(text, max_len)
        return _split_into_parts_standard(text, max_len)
    
    return parts


def _split_into_parts_standard(text: str, max_len: int = 3000) -> list[str]:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ"""
    if len(text) <= max_len:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_len, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (>1500), 
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if len(text) > 1500:
            mid_point = len(text) // 2
            # –ò—â–µ–º —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –æ–∫–æ–ª–æ —Å–µ—Ä–µ–¥–∏–Ω—ã
            for i in range(mid_point - 100, mid_point + 100):
                if i < 0 or i >= len(text):
                    continue
                if text[i] == '\n':
                    mid_point = i + 1
                    break
                elif text[i] == ' ':
                    mid_point = i + 1
                    break
            
            part1 = text[:mid_point].strip()
            part2 = text[mid_point:].strip()
            
            if part1 and part2:
                return [part1, part2]
        
        return [text]
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏
    optimal_part_size = min(max_len, 2500) if len(text) > 4000 else max_len
    
    parts = []
    remaining_text = text
    
    while len(remaining_text) > optimal_part_size:
        # –ò—â–µ–º —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º
        split_point = optimal_part_size
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
        for i in range(optimal_part_size - 100, optimal_part_size):  # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–∏–º–≤–æ–ª–∞—Ö
            if i < 0:
                break
            if remaining_text[i] == '\n':
                split_point = i + 1
                break
            elif remaining_text[i] == ' ':
                split_point = i + 1
                break
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        part = remaining_text[:split_point].strip()
        parts.append(part)
        
        remaining_text = remaining_text[split_point:].strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if remaining_text:
        parts.append(remaining_text)
    
    return parts


def _split_into_two_messages(text: str, max_len: int = 3000) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
    if not text:
        return []
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º
    if len(text) <= max_len:
        return [text]
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π (>4000), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏
    if len(text) > 4000:
        print(f"DEBUG: –¢–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ 3 —á–∞—Å—Ç–∏")
        part_size = len(text) // 3
        
        # –ò—â–µ–º —Ö–æ—Ä–æ—à–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
        split1 = part_size
        split2 = part_size * 2
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã
        for i in range(part_size - 100, part_size + 100):
            if i < 0 or i >= len(text):
                continue
            if text[i] == '\n' or text[i] == ' ':
                split1 = i + 1
                break
        
        for i in range(part_size * 2 - 100, part_size * 2 + 100):
            if i < 0 or i >= len(text):
                continue
            if text[i] == '\n' or text[i] == ' ':
                split2 = i + 1
                break
        
        part1 = text[:split1].strip()
        part2 = text[split1:split2].strip()
        part3 = text[split2:].strip()
        
        if part1 and part2 and part3:
            return [part1, part2, part3]
        elif part1 and part2:
            return [part1, part2]
        else:
            return [text]
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å—Ç–∏
    paragraphs = text.split("\n\n")
    total_len = len(text)
    target = total_len // 2
    part1 = []
    len1 = 0
    
    for p in paragraphs:
        block = p + "\n\n"
        if len1 + len(block) <= max_len and (len1 + len(block) <= target or len1 == 0):
            part1.append(block)
            len1 += len(block)
        else:
            break
    
    p1 = "".join(part1).rstrip()
    rest = text[len(p1):].lstrip()
    
    if not p1:
        p1 = text[:max_len]
        rest = text[max_len:]
    
    if len(rest) <= max_len:
        return [p1, rest] if rest else [p1]
    
    # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë —Ç–æ–∂–µ
    if len(rest) > max_len:
        print(f"DEBUG: –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(rest)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –µ—ë")
        mid_point = len(rest) // 2
        for i in range(mid_point - 100, mid_point + 100):
            if i < 0 or i >= len(rest):
                continue
            if rest[i] == '\n' or rest[i] == ' ':
                mid_point = i + 1
                break
        
        part2 = rest[:mid_point].strip()
        part3 = rest[mid_point:].strip()
        
        if part2 and part3:
            return [p1, part2, part3]
        else:
            return [p1, rest[:max_len - 1] + "‚Ä¶"]
    
    return [p1, rest]
