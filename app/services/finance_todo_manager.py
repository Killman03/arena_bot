from __future__ import annotations

from datetime import date, datetime
from typing import List
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.models import Creditor, Debtor, Todo, User


async def create_todo_for_financial_obligations(session: AsyncSession, user_id: int) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª —Å–µ–≥–æ–¥–Ω—è.
    """
    try:
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        creditors_due_today = await session.execute(
            select(Creditor)
            .where(
                and_(
                    Creditor.user_id == user_id,
                    Creditor.is_active == True,
                    Creditor.due_date == today
                )
            )
        )
        creditors_list = creditors_due_today.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        debtors_due_today = await session.execute(
            select(Debtor)
            .where(
                and_(
                    Debtor.user_id == user_id,
                    Debtor.is_active == True,
                    Debtor.due_date == today
                )
            )
        )
        debtors_list = debtors_due_today.scalars().all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å–µ–≥–æ–¥–Ω—è
        existing_todos = await session.execute(
            select(Todo)
            .where(
                and_(
                    Todo.user_id == user_id,
                    Todo.due_date == today,
                    Todo.description.like("–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:%")
                )
            )
        )
        existing_todos_list = existing_todos.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        existing_task_ids = set()
        for todo in existing_todos_list:
            if todo.description and "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:" in todo.description:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                try:
                    task_id = int(todo.description.split("ID:")[1].split()[0])
                    existing_task_ids.add(task_id)
                except (IndexError, ValueError):
                    continue
        
        tasks_created = 0
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
        for creditor in creditors_list:
            if creditor.id not in existing_task_ids:
                todo = Todo(
                    user_id=user_id,
                    title=f"–ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥ –æ—Ç {creditor.name}",
                    description=f"–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: –ö—Ä–µ–¥–∏—Ç–æ—Ä ID:{creditor.id} - {creditor.name} –¥–æ–ª–∂–µ–Ω {float(creditor.amount):,.2f} ‚ÇΩ. –û–ø–∏—Å–∞–Ω–∏–µ: {creditor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                    due_date=today,
                    priority="high",  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
                    is_daily=False,
                    is_completed=False
                )
                session.add(todo)
                tasks_created += 1
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–ª–∂–Ω–∏–∫–æ–≤
        for debtor in debtors_list:
            if debtor.id not in existing_task_ids:
                todo = Todo(
                    user_id=user_id,
                    title=f"–û—Ç–¥–∞—Ç—å –¥–æ–ª–≥ {debtor.name}",
                    description=f"–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: –î–æ–ª–∂–Ω–∏–∫ ID:{debtor.id} - –≤—ã –¥–æ–ª–∂–Ω—ã {debtor.name} {float(debtor.amount):,.2f} ‚ÇΩ. –û–ø–∏—Å–∞–Ω–∏–µ: {debtor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                    due_date=today,
                    priority="high",  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
                    is_daily=False,
                    is_completed=False
                )
                session.add(todo)
                tasks_created += 1
        
        if tasks_created > 0:
            await session.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {tasks_created} –∑–∞–¥–∞—á –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {e}")


async def create_todos_for_all_users(session: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = (await session.execute(select(User))).scalars().all()
        
        for user in users:
            await create_todo_for_financial_obligations(session, user.id)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


async def cleanup_old_financial_todos(session: AsyncSession, user_id: int) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π).
    """
    try:
        today = date.today()
        week_ago = today - datetime.timedelta(days=7)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        old_todos = await session.execute(
            select(Todo)
            .where(
                and_(
                    Todo.user_id == user_id,
                    Todo.due_date < week_ago,
                    Todo.description.like("–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:%"),
                    Todo.is_completed == True  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                )
            )
        )
        old_todos_list = old_todos.scalars().all()
        
        for todo in old_todos_list:
            await session.delete(todo)
        
        if old_todos_list:
            await session.commit()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(old_todos_list)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á: {e}")


async def get_financial_todos_for_user(session: AsyncSession, user_id: int) -> List[Todo]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        result = await session.execute(
            select(Todo)
            .where(
                and_(
                    Todo.user_id == user_id,
                    Todo.description.like("–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:%")
                )
            )
            .order_by(Todo.due_date.desc())
        )
        return result.scalars().all()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤: {e}")
        return []
