from __future__ import annotations

from datetime import datetime, time, timedelta, date
from typing import Iterable
import random

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.db.models import User, Motivation, Todo
from app.db.models.goal import Goal, GoalStatus, GoalScope
from app.services.llm import deepseek_complete


LAWS_OF_ARENA: list[str] = [
    "–ú–Ω–µ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å",
    "–ú—É–∂—á–∏–Ω–∞ –¥–µ–ª–∞–µ—Ç —Ç–æ —á—Ç–æ –¥–æ–ª–∂–µ–Ω, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, –∫–∞–∫ –æ–Ω —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç",
    "–Ø—Å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –¥–µ–π—Å—Ç–≤–∏–µ",
    "–ú—É–∂—á–∏–Ω–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞",
    "–ö–∞–∂–¥–∞—è —Å–ª–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —ç—Ç–æ —Ç–µ—Å—Ç –Ω–∞ —Å–∏–ª—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—É—é —è —Ä–∞–∑–Ω–æ—à—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ",
    "–Ø –Ω–µ –∂–¥—É –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –Ø –¥–µ–ª–∞—é –≤—Å–µ, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
    "–Ø –æ–±—Ä–µ—á–µ–Ω –±—ã—Ç—å —Ä–∞–±–æ–º –ø—Ä–∏–≤—ã—á–µ–∫, –ø–æ—ç—Ç–æ–º—É —è –≤—ã–±–∏—Ä–∞—é –±—ã—Ç—å –≤ —Ä–∞–±—Å—Ç–≤–µ –ø—Ä–∏–≤—ã—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è —Å—Ç—Ä–æ—è—Ç",
    "–ó–∞ –≤—Å–µ –≤ –∂–∏–∑–Ω–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω —Ç–æ–ª—å–∫–æ —è. –ï—Å–ª–∏ —è —Ö–æ—á—É —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å —è –ø–æ–ª–∞–≥–∞—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è",
    "–í—Ä–µ–º—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞",
    "–ö–æ–≥–¥–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–∞–±–æ—Ç–∞",
    "–ü—Ä–æ—Ü–µ—Å—Å –≤–∞–∂–Ω–µ–µ —Ü–µ–ª–∏. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –¥–µ—Ä–∂–∞—Ç —Ñ–æ–∫—É—Å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ",
]


def daily_reminder_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –¥–µ–Ω—å", callback_data="quick_add_todo"),
                InlineKeyboardButton(text="‚ú® –û–¥–∏–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å", callback_data="perfect_day_plan")
            ],
            [
                InlineKeyboardButton(text="üìö –ó–∞–ø–∏—Å–∞—Ç—å —Ü–∏—Ç–∞—Ç—É", callback_data="quick_add_quote"),
                InlineKeyboardButton(text="üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="quick_add_expense")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="quick_add_reminder")
            ]
        ]
    )


def perfect_day_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω", callback_data="create_perfect_day"),
                InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω—ã –¥–Ω—è", callback_data="day_templates")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            ]
        ]
    )


async def send_daily_principle(bot: Bot, session: AsyncSession, user_id: int = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø –∞—Ä–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É—Ç—Ä–µ–Ω–Ω–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º"""
    print(f"üì§ send_daily_principle –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id: {user_id}")
    
    if user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        users = [await _get_user_by_id(session, user_id)]
        print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id}")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        users = await _get_all_users(session)
        print(f"üåç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {len(users)}")
    
    if not users:
        print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return

    principle = random.choice(LAWS_OF_ARENA)
    print(f"üí™ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–Ω—Ü–∏–ø: {principle}")
    
    for user in users:
        if not user:
            continue
            
        prefs = user.notification_preferences or {}
        if prefs.get("daily_principle", True):
            try:
                print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                await bot.send_message(
                    user.telegram_id, 
                    f"üåÖ <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –≥–ª–∞–¥–∏–∞—Ç–æ—Ä!</b>\n\n"
                    f"üí™ <b>–ü—Ä–∏–Ω—Ü–∏–ø –¥–Ω—è:</b>\n{principle}\n\n"
                    f"–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º?",
                    reply_markup=daily_reminder_keyboard(),
                    parse_mode="HTML"
                )
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                continue
        else:
            print(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ—Ç–∫–ª—é—á–∏–ª –ø—Ä–∏–Ω—Ü–∏–ø—ã")


async def send_daily_motivation(bot: Bot, session: AsyncSession, user_id: int = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    if user_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        users = [await _get_user_by_id(session, user_id)]
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        users = await _get_all_users(session)
    
    for user in users:
        if not user:
            continue
            
        mot = (
            await session.execute(select(Motivation).where(Motivation.user_id == user.id))
        ).scalar_one_or_none()
        if not mot:
            continue
        
        texts = [t for t in [mot.main_year_goal, mot.vision, mot.mission, mot.values] if t]
        if not texts:
            continue
        
        text = random.choice(texts)
        try:
            await bot.send_message(
                user.telegram_id, 
                f"üî• <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:</b>\n\n{text}\n\n"
                f"–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —ç—Ç–æ–π —Ü–µ–ª–∏?",
                reply_markup=daily_reminder_keyboard(),
                parse_mode="HTML"
            )
        except Exception:
            continue


async def generate_perfect_day_plan(user_id: int, session: AsyncSession) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è —Å –ø–æ–º–æ—â—å—é –ò–ò –≤ —Å—Ç–∏–ª–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –ª–∞–Ω–∏—Å—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = (await session.execute(select(User).where(User.id == user_id))).scalar_one()
        if not user:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        motivation = (await session.execute(select(Motivation).where(Motivation.user_id == user_id))).scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        goals = (await session.execute(
            select(Goal).where(
                Goal.user_id == user_id,
                Goal.status == GoalStatus.active
            ).order_by(Goal.scope.desc())
        )).scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        today = date.today()
        today_todos = (await session.execute(
            select(Todo).where(
                Todo.user_id == user_id,
                Todo.due_date == today,
                Todo.is_completed == False
            ).order_by(Todo.reminder_time.asc().nullslast(), Todo.priority.desc())
        )).scalars().all()
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scheduled_tasks = []
        unscheduled_tasks = []
        
        for todo in today_todos:
            if todo.reminder_time and todo.is_reminder_active:
                # –ó–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ - –ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                scheduled_tasks.append({
                    'todo': todo,
                    'scheduled_time': todo.reminder_time,
                    'type': 'scheduled'
                })
            else:
                # –ó–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                unscheduled_tasks.append({
                    'todo': todo,
                    'type': 'unscheduled'
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        scheduled_tasks.sort(key=lambda x: x['scheduled_time'])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {'high': 3, 'medium': 2, 'low': 1}
        unscheduled_tasks.sort(key=lambda x: priority_order.get(x['todo'].priority, 0), reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é
        if motivation:
            if motivation.main_year_goal:
                context_parts.append(f"üéØ –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≥–æ–¥–∞: {motivation.main_year_goal}")
            if motivation.vision:
                context_parts.append(f"üëÅÔ∏è –í–∏–¥–µ–Ω–∏–µ: {motivation.vision}")
            if motivation.mission:
                context_parts.append(f"‚öîÔ∏è –ú–∏—Å—Å–∏—è: {motivation.mission}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
        if goals:
            context_parts.append("üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:")
            for goal in goals[:7]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ü–µ–ª–µ–π
                scope_text = {
                    GoalScope.five_years: "5 –ª–µ—Ç",
                    GoalScope.year: "–≥–æ–¥",
                    GoalScope.month: "–º–µ—Å—è—Ü",
                    GoalScope.week: "–Ω–µ–¥–µ–ª—è",
                    GoalScope.day: "–¥–µ–Ω—å"
                }.get(goal.scope, goal.scope)
                context_parts.append(f"  ‚Ä¢ {goal.title} ({scope_text})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if today_todos:
            context_parts.append("üìù –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if scheduled_tasks:
                context_parts.append("  ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                for task_info in scheduled_tasks[:5]:
                    todo = task_info['todo']
                    priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(todo.priority, "‚ö™")
                    description_info = ""
                    if todo.description:
                        description_info = f" - {todo.description}"
                    context_parts.append(f"    ‚Ä¢ {priority_emoji} {todo.title} ‚è∞{task_info['scheduled_time']}{description_info}")
            
            # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if unscheduled_tasks:
                context_parts.append("  üìã –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                for task_info in unscheduled_tasks[:5]:
                    todo = task_info['todo']
                    priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(todo.priority, "‚ö™")
                    description_info = ""
                    if todo.description:
                        description_info = f" - {todo.description}"
                    context_parts.append(f"    ‚Ä¢ {priority_emoji} {todo.title}{description_info}")
        
        context = "\n".join(context_parts) if context_parts else "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –≤ —Å—Ç–∏–ª–µ –ª–∞–Ω–∏—Å—Ç—ã
        prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ª–∞–Ω–∏—Å—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤), –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å–≤–æ–µ–≥–æ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞. 

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞:
{context}

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è –≤ —Å—Ç–∏–ª–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π –≤–æ–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é, –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –ª–µ–∫—Å–∏–∫—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å.

–í–ê–ñ–ù–û: –ü—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–¥–∞—á (—É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ ‚è∞–ß–ß:–ú–ú). 
–ó–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ–∑–∞–¥–æ–ª–≥–æ –¥–æ –Ω–µ–≥–æ.

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
1. üåÖ –£—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É (5:00-7:00) - 2 —á–∞—Å–∞ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª—å—é –≥–æ–¥–∞ –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π
2. ‚öîÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (8:00-18:00) - —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
3. üõ°Ô∏è –í–µ—á–µ—Ä–Ω—é—é —Ä—É—Ç–∏–Ω—É (18:00-20:00) - –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
4. üí™ –í—Ä–µ–º—è –¥–ª—è —Å–∏–ª—ã –¥—É—Ö–∞ - —á—Ç–µ–Ω–∏–µ, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, —Ä–∞–∑–≤–∏—Ç–∏–µ

–ü–†–ê–í–ò–õ–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:
- –ó–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (‚è∞–ß–ß:–ú–ú) –ø–ª–∞–Ω–∏—Ä—É–π —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
- –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á (üî¥ –≤—ã—Å–æ–∫–∏–π, üü° —Å—Ä–µ–¥–Ω–∏–π, üü¢ –Ω–∏–∑–∫–∏–π)
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∑–∞–¥–∞—á–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
- –û—Å—Ç–∞–≤–ª—è–π –≤—Ä–µ–º—è –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞
- –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—â–∞–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è–π –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ù–ï —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
- –ù–ï –ø–∏—à–∏ "–Ω–∞ –∑–∞–≤—Ç—Ä–∞" –∏–ª–∏ "–Ω–∞ 22 –º–∞—è"
- –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ç–∏–ø–∞ "–±–æ–µ–≤–æ–π –ø–ª–∞–Ω", "–ø–ª–∞–Ω –¥–Ω—è", "—É—Å—Ç–∞–≤ –¥–Ω—è"
- –ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—É
- –ò—Å–ø–æ–ª—å–∑—É–π –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ (5:00, 8:00 –∏ —Ç.–¥.)

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
- –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç: –≤—Ä–µ–º—è - –¥–µ–π—Å—Ç–≤–∏–µ (–æ–ø–∏—Å–∞–Ω–∏–µ)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
- –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–µ–º—ã–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
- –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö HTML-—Ç–µ–≥–æ–≤

–ù–∞—á–Ω–∏ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—É –∏ –∑–∞–∫–æ–Ω—á–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é."""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò
        plan = await deepseek_complete(prompt, max_tokens=3000)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç–∏–ª–µ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞
        header = "‚öîÔ∏è <b>–ü–†–ò–ö–ê–ó –õ–ê–ù–ò–°–¢–´ –ì–õ–ê–î–ò–ê–¢–û–†–£</b>\n\n"
        footer = "\n\nüí™ <b>–ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –±–∏—Ç–≤–∞ –∑–∞ —Å–≤–æ—é —Å—É–¥—å–±—É. –°—Ä–∞–∂–∞–π—Å—è –¥–æ—Å—Ç–æ–π–Ω–æ!</b>"
        
        # –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω –æ—Ç –ª–∏—à–Ω–∏—Ö HTML-—Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
        import re
        clean_plan = re.sub(r'<[^>]+>', '', plan)  # –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏
        clean_plan = re.sub(r'\*\*([^*]+)\*\*', r'<b>\1</b>', clean_plan)  # –ó–∞–º–µ–Ω—è–µ–º ** –Ω–∞ <b>
        clean_plan = re.sub(r'\*([^*]+)\*', r'<i>\1</i>', clean_plan)  # –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ <i>
        
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –∏ –¥–Ω–µ–π
        clean_plan = re.sub(r'–Ω–∞ \d{1,2} [–∞-—è—ë]+', '–Ω–∞ –∑–∞–≤—Ç—Ä–∞', clean_plan, flags=re.IGNORECASE)
        clean_plan = re.sub(r'–ë–æ–µ–≤–æ–π –ø–ª–∞–Ω –Ω–∞ \d{1,2} [–∞-—è—ë]+', '‚öîÔ∏è –ë–æ–µ–≤–æ–π –ø–ª–∞–Ω', clean_plan, flags=re.IGNORECASE)
        clean_plan = re.sub(r'–ü–ª–∞–Ω –Ω–∞ \d{1,2} [–∞-—è—ë]+', '‚öîÔ∏è –ü–ª–∞–Ω –¥–Ω—è', clean_plan, flags=re.IGNORECASE)
        clean_plan = re.sub(r'–£—Å—Ç–∞–≤ –Ω–∞ \d{1,2} [–∞-—è—ë]+', '‚öîÔ∏è –£—Å—Ç–∞–≤ –¥–Ω—è', clean_plan, flags=re.IGNORECASE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        full_message = f"{header}{clean_plan}{footer}"
        if len(full_message) > 4000:
            # –û–±—Ä–µ–∑–∞–µ–º –ø–ª–∞–Ω, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            max_plan_length = 4000 - len(header) - len(footer) - 50  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            clean_plan = clean_plan[:max_plan_length] + "\n\n... (–ø–ª–∞–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è)"
        
        return f"{header}{clean_plan}{footer}"
        
    except Exception as e:
        return f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω: {str(e)}"


async def create_todo_from_perfect_day(user_id: int, plan_text: str, session: AsyncSession) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ To-Do –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –ø–ª–∞–Ω –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        lines = plan_text.split('\n')
        tasks_created = 0
        
        for line in lines:
            line = line.strip()
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Ñ–æ—Ä–º–∞—Ç: –≤—Ä–µ–º—è - –¥–µ–π—Å—Ç–≤–∏–µ)
            if line and ('-' in line or ':' in line) and len(line) > 10:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                if any(skip in line.lower() for skip in ['–ø—Ä–∏–∫–∞–∑', '–ª–∞–Ω–∏—Å—Ç—ã', '–≥–ª–∞–¥–∏–∞—Ç–æ—Ä—É', '–ø–æ–º–Ω–∏', '–±–∏—Ç–≤–∞', '—Å—É–¥—å–±–∞']):
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                task_time = None
                task_desc = ""
                
                # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
                import re
                time_match = re.search(r'(\d{1,2}:\d{2})', line)
                if time_match:
                    task_time = time_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                if '-' in line:
                    parts = line.split('-', 1)
                    if len(parts) > 1:
                        task_desc = parts[1].strip()
                elif ':' in line:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
                    if task_time:
                        time_parts = line.split(task_time, 1)
                        if len(time_parts) > 1:
                            task_desc = time_parts[1].strip()
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
                            task_desc = re.sub(r'^[^\w]*', '', task_desc)
                    else:
                        parts = line.split(':', 1)
                        if len(parts) > 1:
                            task_desc = parts[1].strip()
                
                # –û—á–∏—â–∞–µ–º –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                if task_desc:
                    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                    task_desc = re.sub(r'[^\w\s\-\.\,\!\?\(\)]', '', task_desc).strip()
                    
                    if len(task_desc) > 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
                        priority = "medium"
                        if task_time:
                            hour = int(task_time.split(':')[0])
                            if 5 <= hour <= 9:
                                priority = "high"  # –£—Ç—Ä–µ–Ω–Ω–∏–µ –¥–µ–ª–∞ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            elif hour >= 20:
                                priority = "low"  # –í–µ—á–µ—Ä–Ω–∏–µ –¥–µ–ª–∞ - –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                        elif any(time_indicator in line.lower() for time_indicator in ['—É—Ç—Ä–æ', '6:', '7:', '8:']):
                            priority = "high"
                        elif any(time_indicator in line.lower() for time_indicator in ['–≤–µ—á–µ—Ä', '20:', '21:', '22:']):
                            priority = "low"
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                        new_todo = Todo(
                            user_id=user_id,
                            title=task_desc[:100],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            description=f"–ò–∑ –ø–ª–∞–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è: {line}",
                            due_date=date.today(),
                            priority=priority,
                            is_daily=False,
                            reminder_time=task_time,
                            is_reminder_active=bool(task_time)
                        )
                        session.add(new_todo)
                        tasks_created += 1
        
        if tasks_created > 0:
            await session.commit()
            return True
        
        return False
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –∏–∑ –ø–ª–∞–Ω–∞: {e}")
        return False


async def _get_user_by_id(session: AsyncSession, user_id: int) -> User | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    result = await session.execute(select(User).where(User.id == user_id))
    return result.scalar_one_or_none()


async def _get_all_users(session: AsyncSession) -> list[User]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    result = await session.execute(select(User))
    return list(result.scalars().all())
