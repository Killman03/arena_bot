from __future__ import annotations

from datetime import datetime, date, time, timedelta
from typing import List, Tuple, Dict
import random

from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.models import Creditor, Debtor, User
from app.utils.timezone_utils import get_user_time_info

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# –§–æ—Ä–º–∞—Ç: {reminder_key: last_sent_date}
_sent_reminders_cache: Dict[str, str] = {}

# –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
FINANCE_MOTIVATION_MESSAGES = [
    "üí∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞!",
    "üí∏ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ–ª–∞!",
    "üè¶ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –¥–æ–ª–≥–∏ –∏ –∫—Ä–µ–¥–∏—Ç—ã!",
    "üí≥ –í—Ä–µ–º—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!",
    "üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ - –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É!",
    "üíµ –ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤ - –∫–æ–Ω—Ç—Ä–æ–ª—å –∂–∏–∑–Ω–∏!",
    "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!",
    "üí∏ –î–µ—Ä–∂–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!",
    "üè¶ –í—Ä–µ–º—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!",
    "üí≥ –£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ –¥–µ–Ω—å–≥–∞–º–∏ –º—É–¥—Ä–æ!"
]


async def get_overdue_creditors(session: AsyncSession, user_id: int) -> List[Creditor]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    today = date.today()
    result = await session.execute(
        select(Creditor)
        .where(
            and_(
                Creditor.user_id == user_id,
                Creditor.is_active == True,
                Creditor.due_date < today
            )
        )
        .order_by(Creditor.due_date)
    )
    return result.scalars().all()


async def get_overdue_debtors(session: AsyncSession, user_id: int) -> List[Debtor]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    today = date.today()
    result = await session.execute(
        select(Debtor)
        .where(
            and_(
                Debtor.user_id == user_id,
                Debtor.is_active == True,
                Debtor.due_date < today
            )
        )
        .order_by(Debtor.due_date)
    )
    return result.scalars().all()


async def get_upcoming_creditors(session: AsyncSession, user_id: int, days_ahead: int = 3) -> List[Creditor]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è —Å—Ä–æ–∫–∞–º–∏ –≤—ã–ø–ª–∞—Ç."""
    today = date.today()
    future_date = today + timedelta(days=days_ahead)
    result = await session.execute(
        select(Creditor)
        .where(
            and_(
                Creditor.user_id == user_id,
                Creditor.is_active == True,
                Creditor.due_date >= today,
                Creditor.due_date <= future_date
            )
        )
        .order_by(Creditor.due_date)
    )
    return result.scalars().all()


async def get_upcoming_debtors(session: AsyncSession, user_id: int, days_ahead: int = 3) -> List[Debtor]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è —Å—Ä–æ–∫–∞–º–∏ –≤—ã–ø–ª–∞—Ç."""
    today = date.today()
    future_date = today + timedelta(days=days_ahead)
    result = await session.execute(
        select(Debtor)
        .where(
            and_(
                Debtor.user_id == user_id,
                Debtor.is_active == True,
                Debtor.due_date >= today,
                Debtor.due_date <= future_date
            )
        )
        .order_by(Debtor.due_date)
    )
    return result.scalars().all()


def get_random_finance_message() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤."""
    return random.choice(FINANCE_MOTIVATION_MESSAGES)


def _cleanup_old_reminders_cache() -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    global _sent_reminders_cache
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    keys_to_remove = [
        key for key, date in _sent_reminders_cache.items() 
        if date != today
    ]
    
    for key in keys_to_remove:
        del _sent_reminders_cache[key]


async def send_finance_reminders(session: AsyncSession, bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if bot is None:
        print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
    _cleanup_old_reminders_cache()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = (await session.execute(select(User))).scalars().all()
    
    for user in users:
        await send_finance_reminders_for_user(session, user.id, bot)


async def send_finance_reminders_for_user(session: AsyncSession, user_id: int, bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if bot is None:
        print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = (await session.execute(select(User).where(User.id == user_id))).scalar_one()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        prefs = user.notification_preferences or {}
        if not prefs.get("finance_reminders", True):
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reminder_key = f"{user.id}_finance_reminders"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime("%Y-%m-%d")
        if _sent_reminders_cache.get(reminder_key) == today:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        time_info = get_user_time_info(user.timezone)
        user_local_time = time_info['user_local_time']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (9:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        reminder_time = time(9, 0)  # 9:00 —É—Ç—Ä–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        # (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ 1 –º–∏–Ω—É—Ç—É)
        time_diff = abs(
            (user_local_time.hour * 60 + user_local_time.minute) - 
            (reminder_time.hour * 60 + reminder_time.minute)
        )
        
        if time_diff <= 1:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            overdue_creditors = await get_overdue_creditors(session, user.id)
            overdue_debtors = await get_overdue_debtors(session, user.id)
            upcoming_creditors = await get_upcoming_creditors(session, user.id)
            upcoming_debtors = await get_upcoming_debtors(session, user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await _format_finance_reminder_message(
                overdue_creditors, overdue_debtors, 
                upcoming_creditors, upcoming_debtors
            )
            
            if message:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    user.telegram_id,
                    message,
                    parse_mode="HTML"
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                _sent_reminders_cache[reminder_key] = today
                
                print(f"‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def _format_finance_reminder_message(
    overdue_creditors: List[Creditor],
    overdue_debtors: List[Debtor],
    upcoming_creditors: List[Creditor],
    upcoming_debtors: List[Debtor]
) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    message_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    message_parts.append("üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n")
    
    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã (–≤–∞–º –¥–æ–ª–∂–Ω—ã)
    if overdue_creditors:
        message_parts.append("üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (–≤–∞–º –¥–æ–ª–∂–Ω—ã):</b>")
        for creditor in overdue_creditors:
            days_overdue = (date.today() - creditor.due_date).days
            message_parts.append(
                f"‚Ä¢ {creditor.name}: {float(creditor.amount):,.2f} ‚ÇΩ "
                f"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days_overdue} –¥–Ω.)"
            )
        message_parts.append("")
    
    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–∏–∫–∏ (–≤—ã –¥–æ–ª–∂–Ω—ã)
    if overdue_debtors:
        message_parts.append("üî¥ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ (–≤—ã –¥–æ–ª–∂–Ω—ã):</b>")
        for debtor in overdue_debtors:
            days_overdue = (date.today() - debtor.due_date).days
            message_parts.append(
                f"‚Ä¢ {debtor.name}: {float(debtor.amount):,.2f} ‚ÇΩ "
                f"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days_overdue} –¥–Ω.)"
            )
        message_parts.append("")
    
    # –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã (–≤–∞–º –¥–æ–ª–∂–Ω—ã)
    if upcoming_creditors:
        message_parts.append("üü° <b>–ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –≤—ã–ø–ª–∞—Ç—ã (–≤–∞–º –¥–æ–ª–∂–Ω—ã):</b>")
        for creditor in upcoming_creditors:
            days_until = (creditor.due_date - date.today()).days
            message_parts.append(
                f"‚Ä¢ {creditor.name}: {float(creditor.amount):,.2f} ‚ÇΩ "
                f"(—á–µ—Ä–µ–∑ {days_until} –¥–Ω.)"
            )
        message_parts.append("")
    
    # –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–æ–ª–∂–Ω–∏–∫–∏ (–≤—ã –¥–æ–ª–∂–Ω—ã)
    if upcoming_debtors:
        message_parts.append("üü° <b>–ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –¥–æ–ª–≥–∏ (–≤—ã –¥–æ–ª–∂–Ω—ã):</b>")
        for debtor in upcoming_debtors:
            days_until = (debtor.due_date - date.today()).days
            message_parts.append(
                f"‚Ä¢ {debtor.name}: {float(debtor.amount):,.2f} ‚ÇΩ "
                f"(—á–µ—Ä–µ–∑ {days_until} –¥–Ω.)"
            )
        message_parts.append("")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if not (overdue_creditors or overdue_debtors or upcoming_creditors or upcoming_debtors):
        message_parts.append("‚úÖ –í—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!")
        message_parts.append("")
    
    # –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts.append(f"üí™ {get_random_finance_message()}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ñ–∏–Ω–∞–Ω—Å—ã
    message_parts.append("\nüíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:</b> /finance")
    
    return "\n".join(message_parts)


async def send_urgent_finance_reminder(session: AsyncSession, user_id: int, bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if bot is None:
        print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    
    try:
        user = (await session.execute(select(User).where(User.id == user_id))).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        overdue_creditors = await get_overdue_creditors(session, user_id)
        overdue_debtors = await get_overdue_debtors(session, user_id)
        
        if overdue_creditors or overdue_debtors:
            message = await _format_finance_reminder_message(
                overdue_creditors, overdue_debtors, [], []
            )
            
            await bot.send_message(
                user.telegram_id,
                f"üö® <b>–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!</b>\n\n{message}",
                parse_mode="HTML"
            )
            
            print(f"üö® –°—Ä–æ—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ä–æ—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
