from __future__ import annotations

from datetime import datetime, date, timedelta
from typing import List, Dict, Any, Optional
from sqlalchemy import select, func, and_
from sqlalchemy.ext.asyncio import AsyncSession
import csv
from io import StringIO

from app.db.models import FinanceTransaction, User, Creditor, Debtor, Income

# –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
MAIN_CATEGORY_GROUPS = {
    # –†–∞—Å—Ö–æ–¥—ã
    "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", 
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    "–ó–¥–æ—Ä–æ–≤—å–µ": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    "–û–¥–µ–∂–¥–∞": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": "–§–∏–Ω–∞–Ω—Å—ã",
    "–ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É": "–ü–µ—Ä–µ–≤–æ–¥—ã",
    "–ü–µ—Ä–µ–≤–æ–¥—ã": "–ü–µ—Ä–µ–≤–æ–¥—ã",
    "–†–∞—Å—Ö–æ–¥—ã": "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    
    # –î–æ—Ö–æ–¥—ã
    "–î–æ—Ö–æ–¥—ã": "–î–æ—Ö–æ–¥—ã",
    "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è": "–î–æ—Ö–æ–¥—ã",
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": "–î–æ—Ö–æ–¥—ã",
    "–ü—Ä–æ—Ü–µ–Ω—Ç—ã": "–î–æ—Ö–æ–¥—ã",
    "–î–∏–≤–∏–¥–µ–Ω–¥—ã": "–î–æ—Ö–æ–¥—ã",
    
    # –ü—Ä–æ—á–µ–µ
    "–ü—Ä–æ—á–µ–µ": "–ü—Ä–æ—á–µ–µ"
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø (–¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
GROUP_COLORS = {
    "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": "üî¥",
    "–§–∏–Ω–∞–Ω—Å—ã": "üîµ", 
    "–ü–µ—Ä–µ–≤–æ–¥—ã": "üü°",
    "–î–æ—Ö–æ–¥—ã": "üü¢",
    "–ü—Ä–æ—á–µ–µ": "‚ö™"
}


def get_main_category_group(category: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return MAIN_CATEGORY_GROUPS.get(category, "–ü—Ä–æ—á–µ–µ")


def get_group_color(group: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç (—ç–º–æ–¥–∑–∏) –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    return GROUP_COLORS.get(group, "‚ö™")

# –í–ê–ñ–ù–û: CSV –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –¢–û–õ–¨–ö–û –†–ê–°–•–û–î–´ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)
# –î–æ—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –º–µ–Ω—é "–î–æ—Ö–æ–¥—ã"
# –ü–µ—Ä–µ–≤–æ–¥—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—ã


async def get_finance_summary(session: AsyncSession, user_id: int) -> Dict[str, float]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    now = datetime.now()
    month_start = date(now.year, now.month, 1)
    month_end = date(now.year, now.month + 1, 1) if now.month < 12 else date(now.year + 1, 1, 1)
    
    # –î–æ—Ö–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    monthly_income_result = await session.execute(
        select(func.sum(FinanceTransaction.amount))
        .where(
            and_(
                FinanceTransaction.user_id == user_id,
                FinanceTransaction.amount > 0,
                FinanceTransaction.date >= month_start,
                FinanceTransaction.date < month_end
            )
        )
    )
    monthly_income = monthly_income_result.scalar() or 0.0
    
    # –†–∞—Å—Ö–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    monthly_expenses_result = await session.execute(
        select(func.sum(FinanceTransaction.amount))
        .where(
            and_(
                FinanceTransaction.user_id == user_id,
                FinanceTransaction.amount < 0,
                FinanceTransaction.date >= month_start,
                FinanceTransaction.date < month_end
            )
        )
    )
    monthly_expenses = abs(monthly_expenses_result.scalar() or 0.0)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    monthly_income = float(monthly_income)
    monthly_expenses = float(monthly_expenses)
    
    # –ë–∞–ª–∞–Ω—Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    monthly_balance = monthly_income - monthly_expenses
    
    # –û–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã
    creditors_result = await session.execute(
        select(func.sum(Creditor.amount))
        .where(
            and_(
                Creditor.user_id == user_id,
                Creditor.is_active.is_(True)
            )
        )
    )
    total_creditors = float(creditors_result.scalar() or 0.0)
    
    # –û–±—â–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∏
    debtors_result = await session.execute(
        select(func.sum(Debtor.amount))
        .where(
            and_(
                Debtor.user_id == user_id,
                Debtor.is_active.is_(True)
            )
        )
    )
    total_debtors = float(debtors_result.scalar() or 0.0)
    
    return {
        "monthly_income": monthly_income,
        "monthly_expenses": monthly_expenses,
        "monthly_balance": monthly_balance,
        "total_creditors": total_creditors,
        "total_debtors": total_debtors
    }


async def get_finance_summary_by_groups(session: AsyncSession, user_id: int, period_days: int = 30) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    now = datetime.now()
    period_start = now - timedelta(days=period_days)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    transactions_result = await session.execute(
        select(FinanceTransaction)
        .where(
            and_(
                FinanceTransaction.user_id == user_id,
                FinanceTransaction.date >= period_start.date()
            )
        )
        .order_by(FinanceTransaction.date.desc())
    )
    transactions = transactions_result.scalars().all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    groups_summary = {}
    total_income = 0.0
    total_expenses = 0.0
    
    for transaction in transactions:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
        main_group = get_main_category_group(transaction.category)
        
        if main_group not in groups_summary:
            groups_summary[main_group] = {
                "total": 0.0,
                "income": 0.0,
                "expenses": 0.0,
                "categories": {},
                "count": 0
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—É–º–º–µ –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–≤–æ–¥–∏–º –∫ float)
        amount_float = float(transaction.amount)
        groups_summary[main_group]["total"] += amount_float
        groups_summary[main_group]["count"] += 1
        
        if amount_float > 0:
            groups_summary[main_group]["income"] += amount_float
            total_income += amount_float
        else:
            groups_summary[main_group]["expenses"] += abs(amount_float)
            total_expenses += abs(amount_float)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if transaction.category not in groups_summary[main_group]["categories"]:
            groups_summary[main_group]["categories"][transaction.category] = {
                "total": 0.0,
                "income": 0.0,
                "expenses": 0.0,
                "count": 0
            }
        
        groups_summary[main_group]["categories"][transaction.category]["total"] += amount_float
        groups_summary[main_group]["categories"][transaction.category]["count"] += 1
        
        if amount_float > 0:
            groups_summary[main_group]["categories"][transaction.category]["income"] += amount_float
        else:
            groups_summary[main_group]["categories"][transaction.category]["expenses"] += abs(amount_float)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_groups = sorted(
        groups_summary.items(), 
        key=lambda x: abs(x[1]["total"]), 
        reverse=True
    )
    
    return {
        "period_days": period_days,
        "total_income": total_income,
        "total_expenses": total_expenses,
        "balance": total_income - total_expenses,
        "groups": dict(sorted_groups)
    }


async def get_category_statistics(session: AsyncSession, user_id: int, period_days: int = 30) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    now = datetime.now()
    period_start = now - timedelta(days=period_days)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    transactions_result = await session.execute(
        select(FinanceTransaction)
        .where(
            and_(
                FinanceTransaction.user_id == user_id,
                FinanceTransaction.date >= period_start.date()
            )
        )
        .order_by(FinanceTransaction.date.desc())
    )
    transactions = transactions_result.scalars().all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories_stats = {}
    total_income = 0.0
    total_expenses = 0.0
    
    for transaction in transactions:
        category = transaction.category
        if category not in categories_stats:
            categories_stats[category] = {
                "total": 0.0,
                "income": 0.0,
                "expenses": 0.0,
                "count": 0,
                "main_group": get_main_category_group(category)
            }
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        amount_float = float(transaction.amount)
        categories_stats[category]["total"] += amount_float
        categories_stats[category]["count"] += 1
        
        if amount_float > 0:
            categories_stats[category]["income"] += amount_float
            total_income += amount_float
        else:
            categories_stats[category]["expenses"] += abs(amount_float)
            total_expenses += abs(amount_float)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_categories = sorted(
        categories_stats.items(), 
        key=lambda x: abs(x[1]["total"]), 
        reverse=True
    )
    
    return {
        "period_days": period_days,
        "total_income": total_income,
        "total_expenses": total_expenses,
        "balance": total_income - total_expenses,
        "categories": dict(sorted_categories)
    }


async def get_creditors(session: AsyncSession, user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(Creditor)
        .where(
            and_(
                Creditor.user_id == user_id,
                Creditor.is_active.is_(True)
            )
        )
        .order_by(Creditor.due_date)
    )
    creditors = result.scalars().all()
    
    return [
        {
            "id": c.id,
            "name": c.name,
            "amount": float(c.amount),
            "due_date": c.due_date.strftime("%d.%m.%Y"),
            "description": c.description
        }
        for c in creditors
    ]


async def get_debtors(session: AsyncSession, user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(
        select(Debtor)
        .where(
            and_(
                Debtor.user_id == user_id,
                Debtor.is_active.is_(True)
            )
        )
        .order_by(Debtor.due_date)
    )
    debtors = result.scalars().all()
    
    return [
        {
            "id": d.id,
            "name": d.name,
            "amount": float(d.amount),
            "due_date": d.due_date.strftime("%d.%m.%Y"),
            "description": d.description
        }
        for d in debtors
    ]


async def process_bank_csv(session: AsyncSession, user_id: int, csv_content: str, bank_type: str) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å CSV —Ñ–∞–π–ª –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏"""
    try:
        reader = csv.DictReader(StringIO(csv_content))
        rows = list(reader)
        
        print(f"DEBUG: –¢–∏–ø –±–∞–Ω–∫–∞: {bank_type}")
        print(f"DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
        if rows:
            print(f"DEBUG: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {rows[0]}")
        
        if not rows:
            return {
                "processed": 0,
                "added": 0,
                "skipped": 0,
                "errors": ["CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"]
            }
        
        processed = 0
        added = 0
        skipped = 0
        errors = []
        
        for row_num, row in enumerate(rows, 1):
            try:
                processed += 1
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∞–Ω–∫–∞
                transaction_data = parse_bank_row(row, bank_type)
                
                if not transaction_data:
                    print(f"DEBUG: –°—Ç—Ä–æ–∫–∞ {row_num} –ø—Ä–æ–ø—É—â–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ: {row}")
                    skipped += 1
                    continue
                
                # –î–ª—è MBank —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ä–∞—Å—Ö–æ–¥—ã, –¥–æ—Ö–æ–¥—ã, –ø–µ—Ä–µ–≤–æ–¥—ã)
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
                if bank_type == "MBank" or transaction_data["amount"] < 0:
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    transaction = FinanceTransaction(
                        user_id=user_id,
                        date=transaction_data["date"],
                        amount=transaction_data["amount"],
                        category=transaction_data["category"],
                        description=transaction_data["description"]
                    )
                    
                    session.add(transaction)
                    added += 1
                else:
                    print(f"DEBUG: –°—Ç—Ä–æ–∫–∞ {row_num} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è –±–∞–Ω–∫–∞ {bank_type}): {row}")
                    skipped += 1
                
            except Exception as e:
                error_msg = f"–°—Ç—Ä–æ–∫–∞ {row_num}: {str(e)}"
                print(f"DEBUG: {error_msg}")
                errors.append(error_msg)
                skipped += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()
        
        return {
            "processed": processed,
            "added": added,
            "skipped": skipped,
            "errors": errors
        }
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return {
            "processed": 0,
            "added": 0,
            "skipped": 0,
            "errors": [f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"]
        }


def parse_bank_row(row: Dict[str, str], bank_type: str) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É CSV –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∞–Ω–∫–∞"""
    try:
        if bank_type == "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫":
            return parse_alpha_row(row)
        elif bank_type == "–¢-–ë–∞–Ω–∫":
            return parse_tbank_row(row)
        elif bank_type == "MBank":
            return parse_mbank_row(row)
        else:
            return parse_generic_row(row)
    except:
        return None





def parse_alpha_row(row: Dict[str, str]) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞"""
    try:
        print(f"DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞: {row}")
        
        # –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        date_str = row.get("operationDate") or row.get("transactionDate") or row.get("operationdate") or row.get("transactiondate")
        amount_str = row.get("amount")
        description = row.get("comment") or row.get("merchant") or ""
        category = row.get("category") or ""
        merchant = row.get("merchant") or ""
        transaction_type = row.get("type") or ""
        
        print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –Ω–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è - –¥–∞—Ç–∞: {date_str}, —Å—É–º–º–∞: {amount_str}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, merchant: {merchant}, type: {transaction_type}")
        
        if not date_str or not amount_str:
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∏–ª–∏ —Å—É–º–º–∞")
            return None
            
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
        date = None
        for fmt in ["%Y-%m-%d", "%d.%m.%Y", "%Y/%m/%d", "%d/%m/%Y"]:
            try:
                date = datetime.strptime(date_str, fmt).date()
                print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –¥–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {date}")
                break
            except:
                continue
                
        if not date:
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
            return None
            
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —É–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É)
        amount_str = amount_str.replace(" ", "").replace(",", ".").replace("‚ÇΩ", "").replace("—Ä—É–±", "").replace("—Ä—É–±–ª–µ–π", "")
        try:
            amount = float(amount_str)
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {amount}")
        except ValueError:
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É: {amount_str}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∞–Ω–∏—è (—Ä–∞—Å—Ö–æ–¥—ã)
        if transaction_type.lower() not in ["—Å–ø–∏—Å–∞–Ω–∏–µ", "debit", "debit transaction"]:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ —Ç.–¥.) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–∏–ø–∞ '{transaction_type}' (–Ω–µ —Å–ø–∏—Å–∞–Ω–∏–µ)")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–º
        if is_transfer_or_income(description, category):
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥/–¥–æ—Ö–æ–¥: {description}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return None
        
        # –î–ª—è —Å–ø–∏—Å–∞–Ω–∏–π –¥–µ–ª–∞–µ–º —Å—É–º–º—É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π (—Ä–∞—Å—Ö–æ–¥)
        amount = -abs(amount)
        print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - —Å–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–º–∞ —Å–¥–µ–ª–∞–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π: {amount}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –±–∞–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if category and category.strip():
            final_category = category.strip()
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –±–∞–Ω–∫–∞: {final_category}")
        else:
            final_category = determine_category(description)
            print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {final_category}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        full_description_parts = []
        if merchant:
            full_description_parts.append(f"Merchant: {merchant}")
        if description:
            full_description_parts.append(description)
        if row.get("mcc"):
            full_description_parts.append(f"MCC: {row['mcc']}")
        if row.get("bonusValue"):
            full_description_parts.append(f"–ë–æ–Ω—É—Å: {row['bonusValue']}")
        if row.get("bonusTitle"):
            full_description_parts.append(f"–¢–∏–ø –±–æ–Ω—É—Å–∞: {row['bonusTitle']}")
        
        if full_description_parts:
            full_description = " | ".join(full_description_parts)
        else:
            full_description = description or "–û–ø–µ—Ä–∞—Ü–∏—è"
        
        print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {full_description}")
        
        return {
            "date": date,
            "amount": amount,
            "category": final_category,
            "description": full_description
        }
    except Exception as e:
        print(f"DEBUG: –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ - –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None



def parse_tbank_row(row: Dict[str, str]) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¢-–ë–∞–Ω–∫–∞"""
    try:
        print(f"DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¢-–ë–∞–Ω–∫–∞: {row}")
        
        # –¢-–ë–∞–Ω–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        date_str = row.get("–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏") or row.get("–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞")
        amount_str = row.get("–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏") or row.get("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
        description = row.get("–û–ø–∏—Å–∞–Ω–∏–µ") or ""
        category = row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") or ""
        
        print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –Ω–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è - –¥–∞—Ç–∞: {date_str}, —Å—É–º–º–∞: {amount_str}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        if not date_str or not amount_str:
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∏–ª–∏ —Å—É–º–º–∞")
            return None
            
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (–¢-–ë–∞–Ω–∫ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)
        date = None
        for fmt in ["%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y", "%d.%m.%y", "%d/%m/%y"]:
            try:
                date = datetime.strptime(date_str, fmt).date()
                print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –¥–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {date}")
                break
            except:
                continue
                
        if not date:
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
            return None
            
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —É–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É)
        amount_str = amount_str.replace(" ", "").replace(",", ".").replace("‚ÇΩ", "").replace("—Ä—É–±", "").replace("—Ä—É–±–ª–µ–π", "")
        try:
            amount = float(amount_str)
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - —Å—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {amount}")
        except ValueError:
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É: {amount_str}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–º
        if is_transfer_or_income(description, category):
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥/–¥–æ—Ö–æ–¥: {description}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            return None
        
        # –¢-–ë–∞–Ω–∫: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)
        # –ï—Å–ª–∏ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, –¥–µ–ª–∞–µ–º –µ—ë –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π (—ç—Ç–æ —Ä–∞—Å—Ö–æ–¥)
        if amount > 0:
            amount = -amount
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∞–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π (—Ä–∞—Å—Ö–æ–¥): {amount}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –±–∞–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if category and category.strip():
            final_category = category.strip()
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –±–∞–Ω–∫–∞: {final_category}")
        else:
            final_category = determine_category(description)
            print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {final_category}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        additional_info = []
        if row.get("MCC"):
            additional_info.append(f"MCC: {row['MCC']}")
        if row.get("–ö—ç—à–±—ç–∫"):
            additional_info.append(f"–ö—ç—à–±—ç–∫: {row['–ö—ç—à–±—ç–∫']}")
        if row.get("–ë–æ–Ω—É—Å—ã (–≤–∫–ª—é—á–∞—è –∫—ç—à–±—ç–∫)"):
            additional_info.append(f"–ë–æ–Ω—É—Å—ã: {row['–ë–æ–Ω—É—Å—ã (–≤–∫–ª—é—á–∞—è –∫—ç—à–±—ç–∫)']}")
        
        if additional_info:
            full_description = f"{description} | {' | '.join(additional_info)}"
        else:
            full_description = description
        
        print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {full_description}")
        
        return {
            "date": date,
            "amount": amount,
            "category": final_category,
            "description": full_description
        }
    except Exception as e:
        print(f"DEBUG: –¢-–ë–∞–Ω–∫ - –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None


def parse_mbank_row(row: Dict[str, str]) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É MBank"""
    try:
        print(f"DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ MBank: {row}")
        
        # MBank: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        date_str = row.get("–î–∞—Ç–∞") or row.get("–¥–∞—Ç–∞")
        recipient = row.get("–ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ü–ª–∞—Ç–µ–ª—å—â–∏–∫") or row.get("–ø–æ–ª—É—á–∞—Ç–µ–ª—å/–ø–ª–∞—Ç–µ–ª—å—â–∏–∫") or ""
        expense_str = row.get("–†–∞—Å—Ö–æ–¥") or row.get("—Ä–∞—Å—Ö–æ–¥") or "0,00"
        income_str = row.get("–ü—Ä–∏—Ö–æ–¥") or row.get("–ø—Ä–∏—Ö–æ–¥") or "0,00"
        operation = row.get("–û–ø–µ—Ä–∞—Ü–∏—è") or row.get("–æ–ø–µ—Ä–∞—Ü–∏—è") or ""
        
        print(f"DEBUG: MBank - –Ω–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è - –¥–∞—Ç–∞: {date_str}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}, —Ä–∞—Å—Ö–æ–¥: {expense_str}, –ø—Ä–∏—Ö–æ–¥: {income_str}, –æ–ø–µ—Ä–∞—Ü–∏—è: {operation}")
        
        if not date_str or not date_str.strip():
            print(f"DEBUG: MBank - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞")
            return None
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∏—Ç–æ–≥–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ç.–¥.)
        date_str_lower = date_str.lower().strip()
        if any(skip_word in date_str_lower for skip_word in [
            "—Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", "—Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞",
            "–∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥", "—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥", "–¥–∞—Ç–∞:"
        ]):
            print(f"DEBUG: MBank - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É: {date_str}")
            return None
            
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (MBank –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)
        date = None
        for fmt in ["%d.%m.%Y %H:%M", "%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y", "%d.%m.%y", "%d/%m/%y"]:
            try:
                parsed_datetime = datetime.strptime(date_str, fmt)
                date = parsed_datetime.date()
                print(f"DEBUG: MBank - –¥–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {date} (–∏–∑ {date_str})")
                break
            except:
                continue
                
        if not date:
            print(f"DEBUG: MBank - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
            return None
            
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—ã (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —É–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É)
        expense_str = expense_str.replace(" ", "").replace(",", ".").replace("KGS", "").replace("‚Ç∏", "").strip()
        income_str = income_str.replace(" ", "").replace(",", ".").replace("KGS", "").replace("‚Ç∏", "").strip()
        
        try:
            expense = float(expense_str) if expense_str != "0,00" and expense_str != "0.00" else 0.0
            income = float(income_str) if income_str != "0,00" and income_str != "0.00" else 0.0
            print(f"DEBUG: MBank - —Å—É–º–º—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã - —Ä–∞—Å—Ö–æ–¥: {expense}, –ø—Ä–∏—Ö–æ–¥: {income}")
        except ValueError:
            print(f"DEBUG: MBank - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—ã: —Ä–∞—Å—Ö–æ–¥={expense_str}, –ø—Ä–∏—Ö–æ–¥={income_str}")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—É–º–º—É
        if expense > 0 and income == 0:
            # –≠—Ç–æ —Ä–∞—Å—Ö–æ–¥
            amount = -expense
            transaction_type = "—Ä–∞—Å—Ö–æ–¥"
        elif income > 0 and expense == 0:
            # –≠—Ç–æ –ø—Ä–∏—Ö–æ–¥
            amount = income
            transaction_type = "–ø—Ä–∏—Ö–æ–¥"
        else:
            # –ï—Å–ª–∏ –æ–±–µ —Å—É–º–º—ã 0 –∏–ª–∏ –æ–±–µ –±–æ–ª—å—à–µ 0 - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            print(f"DEBUG: MBank - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º: —Ä–∞—Å—Ö–æ–¥={expense}, –ø—Ä–∏—Ö–æ–¥={income}")
            return None
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—É—Å—Ç—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
        if not recipient.strip() and not operation.strip():
            print(f"DEBUG: MBank - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: –ø–æ–ª—É—á–∞—Ç–µ–ª—å='{recipient}', –æ–ø–µ—Ä–∞—Ü–∏—è='{operation}'")
            return None
        
        # –î–ª—è MBank —É—á–∏—Ç—ã–≤–∞–µ–º –∏ —Ä–∞—Å—Ö–æ–¥—ã, –∏ –ø—Ä–∏—Ö–æ–¥—ã, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏
        category = determine_mbank_category(operation, recipient, transaction_type)
        print(f"DEBUG: MBank - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description_parts = []
        if recipient:
            description_parts.append(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")
        if operation:
            description_parts.append(operation)
        
        full_description = " | ".join(description_parts) if description_parts else "–û–ø–µ—Ä–∞—Ü–∏—è MBank"
        print(f"DEBUG: MBank - –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {full_description}")
        
        return {
            "date": date,
            "amount": amount,
            "category": category,
            "description": full_description
        }
    except Exception as e:
        print(f"DEBUG: MBank - –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None



def parse_generic_row(row: Dict[str, str]) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    try:
        print(f"DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {row}")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        date_str = row.get("date") or row.get("–î–∞—Ç–∞") or row.get("Date") or row.get("–¥–∞—Ç–∞")
        amount_str = row.get("amount") or row.get("–°—É–º–º–∞") or row.get("Amount") or row.get("—Å—É–º–º–∞")
        description = row.get("description") or row.get("–û–ø–∏—Å–∞–Ω–∏–µ") or row.get("Description") or row.get("–æ–ø–∏—Å–∞–Ω–∏–µ") or row.get("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ") or row.get("–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ") or ""
        
        print(f"DEBUG: –ù–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è - –¥–∞—Ç–∞: {date_str}, —Å—É–º–º–∞: {amount_str}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        if not date_str or not amount_str:
            print(f"DEBUG: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –∏–ª–∏ —Å—É–º–º–∞")
            return None
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        date = None
        for fmt in ["%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y", "%d.%m.%y", "%d/%m/%y"]:
            try:
                date = datetime.strptime(date_str, fmt).date()
                print(f"DEBUG: –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {date}")
                break
            except:
                continue
                
        if not date:
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
            return None
            
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —É–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É)
        amount_str = amount_str.replace(" ", "").replace(",", ".").replace("‚ÇΩ", "").replace("—Ä—É–±", "").replace("—Ä—É–±–ª–µ–π", "")
        try:
            amount = float(amount_str)
            print(f"DEBUG: –°—É–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {amount}")
        except ValueError:
            print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É: {amount_str}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–º
        if is_transfer_or_income(description):
            print(f"DEBUG: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥/–¥–æ—Ö–æ–¥: {description}")
            return None
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã)
        # –ï—Å–ª–∏ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, –¥–µ–ª–∞–µ–º –µ—ë –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π (—ç—Ç–æ —Ä–∞—Å—Ö–æ–¥)
        if amount > 0:
            amount = -amount
            print(f"DEBUG: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∞–Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π (—Ä–∞—Å—Ö–æ–¥): {amount}")
        
        category = determine_category(description)
        print(f"DEBUG: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        return {
            "date": date,
            "amount": amount,
            "category": category,
            "description": description
        }
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {e}")
        return None


def is_transfer_or_income(description: str, category: str = "") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–º (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å)"""
    description_lower = description.lower()
    category_lower = category.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    transfer_keywords = [
        "–ø–µ—Ä–µ–≤–æ–¥", "transfer", "–ø–µ—Ä–µ–≤–æ–¥—ã", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ",
        "–≤–Ω–µ—Å–µ–Ω–∏–µ", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–æ—Ç", "–∫—ç—à–±—ç–∫", "–∫–µ—à–±—ç–∫", "cashback",
        "–±–æ–Ω—É—Å", "bonus", "–≤–æ–∑–≤—Ä–∞—Ç", "refund", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è"
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
    income_keywords = [
        "–∑–∞—Ä–ø–ª–∞—Ç–∞", "salary", "–¥–æ—Ö–æ–¥", "income", "–≤—ã–ø–ª–∞—Ç–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ",
        "dividend", "–¥–∏–≤–∏–¥–µ–Ω–¥", "–ø—Ä–æ—Ü–µ–Ω—Ç", "interest", "–ø—Ä–µ–º–∏—è"
    ]
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
    skip_categories = [
        "–ø–µ—Ä–µ–≤–æ–¥—ã", "transfers", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "–¥–æ—Ö–æ–¥—ã", 
        "income", "–±–æ–Ω—É—Å—ã", "bonus", "–∫—ç—à–±—ç–∫", "cashback", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    for keyword in transfer_keywords + income_keywords:
        if keyword in description_lower:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for skip_cat in skip_categories:
        if skip_cat in category_lower:
            return True
    
    return False


def determine_category(description: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    description_lower = description.lower()
    
    # –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
    if any(word in description_lower for word in ["–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–º–∞–≥–∞–∑–∏–Ω", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–æ—Ñ–µ"]):
        return "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"
    
    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    elif any(word in description_lower for word in ["–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "—Ç–∞–∫—Å–∏", "uber", "—è–Ω–¥–µ–∫—Å", "–±–µ–Ω–∑–∏–Ω", "—Ç–æ–ø–ª–∏–≤–æ"]):
        return "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    
    # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    elif any(word in description_lower for word in ["–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–º—É–∑–µ–π", "–∏–≥—Ä–∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]):
        return "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
    
    # –ó–¥–æ—Ä–æ–≤—å–µ
    elif any(word in description_lower for word in ["–∞–ø—Ç–µ–∫–∞", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü–∞", "–∫–ª–∏–Ω–∏–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞"]):
        return "–ó–¥–æ—Ä–æ–≤—å–µ"
    
    # –û–¥–µ–∂–¥–∞
    elif any(word in description_lower for word in ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", "zara", "h&m"]):
        return "–û–¥–µ–∂–¥–∞"
    
    # –°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    elif any(word in description_lower for word in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–≤—è–∑—å", "–º—Ç—Å", "–±–∏–ª–∞–π–Ω", "–º–µ–≥–∞—Ñ–æ–Ω"]):
        return "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
    
    # –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    elif any(word in description_lower for word in ["–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–≥–∞–∑", "–≤–æ–¥–∞"]):
        return "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
    
    # –î–æ—Ö–æ–¥—ã
    elif any(word in description_lower for word in ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–≤–æ–¥"]):
        return "–î–æ—Ö–æ–¥—ã"
    
    else:
        return "–ü—Ä–æ—á–µ–µ"


def determine_mbank_category(operation: str, recipient: str, transaction_type: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π MBank –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    operation_lower = operation.lower()
    recipient_lower = recipient.lower()
    
    # –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
    if any(word in operation_lower for word in ["–ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ qr", "–ø–µ—Ä–µ–≤–æ–¥ –ø–æ mbank"]):
        return "–ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    
    # –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
    if any(word in operation_lower for word in ["globus", "–≥–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–º–∞–≥–∞–∑–∏–Ω", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–µ–¥–∞", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–æ—Ñ–µ"]):
        return "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è"
    
    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    elif any(word in operation_lower for word in ["—è–Ω–¥–µ–∫—Å", "yandex", "—Å–∞–º–æ–∫–∞—Ç", "scooter", "—Ç–∞–∫—Å–∏", "uber", "–±–µ–Ω–∑–∏–Ω", "—Ç–æ–ø–ª–∏–≤–æ", "atm", "–±–∞–Ω–∫–æ–º–∞—Ç"]):
        return "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    
    # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    elif any(word in operation_lower for word in ["–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∫–æ–Ω—Ü–µ—Ä—Ç", "–º—É–∑–µ–π", "–∏–≥—Ä–∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]):
        return "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
    
    # –ó–¥–æ—Ä–æ–≤—å–µ
    elif any(word in operation_lower for word in ["–∞–ø—Ç–µ–∫–∞", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü–∞", "–∫–ª–∏–Ω–∏–∫–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞"]):
        return "–ó–¥–æ—Ä–æ–≤—å–µ"
    
    # –û–¥–µ–∂–¥–∞
    elif any(word in operation_lower for word in ["–æ–¥–µ–∂–¥–∞", "–æ–±—É–≤—å", "–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", "zara", "h&m"]):
        return "–û–¥–µ–∂–¥–∞"
    
    # –°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    elif any(word in operation_lower for word in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–≤—è–∑—å", "–º—Ç—Å", "–±–∏–ª–∞–π–Ω", "–º–µ–≥–∞—Ñ–æ–Ω", "o!", "o!", "obank", "o!bank"]):
        return "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç"
    
    # –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
    elif any(word in operation_lower for word in ["–∂–∫—Ö", "–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–≥–∞–∑", "–≤–æ–¥–∞", "–≥–æ—Å—É—Å–ª—É–≥–∏"]):
        return "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
    
    # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    elif any(word in operation_lower for word in ["cash in", "cash out", "–ø—ç–π 24", "pay24", "megapay", "umai", "–≥—Ä–∏–Ω—Ç–µ–ª–µ–∫–æ–º", "–∫–æ–º–∏—Å—Å–∏—è"]):
        return "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
    
    # –î–æ—Ö–æ–¥—ã (–¥–ª—è –ø—Ä–∏—Ö–æ–¥–æ–≤)
    elif transaction_type == "–ø—Ä–∏—Ö–æ–¥":
        if any(word in operation_lower for word in ["–∑–∞—Ä–ø–ª–∞—Ç–∞", "–¥–æ—Ö–æ–¥", "–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–≤–æ–¥", "cash in"]):
            return "–î–æ—Ö–æ–¥—ã"
        else:
            return "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
    
    # –ü–µ—Ä–µ–≤–æ–¥—ã (–¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤)
    elif transaction_type == "—Ä–∞—Å—Ö–æ–¥":
        if any(word in operation_lower for word in ["–ø–µ—Ä–µ–≤–æ–¥", "transfer"]):
            return "–ü–µ—Ä–µ–≤–æ–¥—ã"
        else:
            return "–†–∞—Å—Ö–æ–¥—ã"
    
    else:
        return "–ü—Ä–æ—á–µ–µ"






