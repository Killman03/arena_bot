from datetime import datetime, time
from typing import List, Tuple, Dict

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.models import Todo, User
from app.utils.timezone_utils import get_user_time_info

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {user_id_task_id: date}
_sent_todo_reminders_cache: Dict[str, str] = {}


async def get_active_todo_reminders(session: AsyncSession) -> List[Tuple[Todo, User]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    result = (
        await session.execute(
            select(Todo, User)
            .join(User, Todo.user_id == User.id)
            .where(
                Todo.is_reminder_active == True,
                Todo.reminder_time.isnot(None),
                Todo.is_completed == False
            )
        )
    ).all()
    
    return result


def _cleanup_old_todo_reminders_cache() -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö to-do –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    global _sent_todo_reminders_cache
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    keys_to_remove = [
        key for key, date in _sent_todo_reminders_cache.items() 
        if date != today
    ]
    
    for key in keys_to_remove:
        del _sent_todo_reminders_cache[key]


async def send_todo_reminders(session: AsyncSession, bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ to-do –∑–∞–¥–∞—á–∞–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if bot is None:
        from app.bot import bot
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
    _cleanup_old_todo_reminders_cache()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    todos_with_users = await get_active_todo_reminders(session)
    
    for todo, user in todos_with_users:
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if todo.is_daily:
                reminder_key = f"{user.id}_{todo.id}_{todo.reminder_time}"
            else:
                # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤–∫–ª—é—á–∞–µ–º –¥–∞—Ç—É –≤ –∫–ª—é—á
                reminder_key = f"{user.id}_{todo.id}_{todo.reminder_time}_{todo.due_date}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime("%Y-%m-%d")
            if _sent_todo_reminders_cache.get(reminder_key) == today:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time_info = get_user_time_info(user.timezone)
            user_local_time = time_info['user_local_time']
            user_local_date = user_local_time.date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            if todo.is_daily:
                # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                should_send_today = True
            else:
                # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –¥–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                should_send_today = (user_local_date == todo.due_date)
            
            if not should_send_today:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ '{todo.title}' - –Ω–µ –≤—Ä–µ–º—è (–¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {todo.due_date}, —Å–µ–≥–æ–¥–Ω—è: {user_local_date})")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            reminder_time = time.fromisoformat(todo.reminder_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            # (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ 1 –º–∏–Ω—É—Ç—É)
            time_diff = abs(
                (user_local_time.hour * 60 + user_local_time.minute) - 
                (reminder_time.hour * 60 + reminder_time.minute)
            )
            
            if time_diff <= 1:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–∏–Ω—É—Ç—ã
                # –õ–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print(f"üïê –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∑–∞–¥–∞—á–µ '{todo.title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                print(f"   üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time_info['timezone']}")
                print(f"   üïê –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {time_info['user_local_time'].strftime('%H:%M:%S')}")
                print(f"   üåç UTC –≤—Ä–µ–º—è: {time_info['utc_time'].strftime('%H:%M:%S')}")
                print(f"   ‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {todo.reminder_time}")
                print(f"   üìä –°–º–µ—â–µ–Ω–∏–µ: {time_info['offset_hours']:+g} —á")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if todo.is_daily:
                    message_text = (
                        f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ</b>\n\n"
                        f"üìù <b>{todo.title}</b>\n\n"
                        f"üîÑ –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                        f"üî¥ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {todo.priority}\n\n"
                        f"üí™ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!"
                    )
                else:
                    message_text = (
                        f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</b>\n\n"
                        f"üìù <b>{todo.title}</b>\n"
                        f"üìÖ <b>–°—Ä–æ–∫:</b> {todo.due_date.strftime('%d.%m.%Y')}\n"
                        f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {todo.priority}\n\n"
                        f"üí™ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!"
                    )
                
                if todo.description:
                    message_text += f"\n\nüìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{todo.description}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=message_text,
                    parse_mode="HTML"
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                _sent_todo_reminders_cache[reminder_key] = today
                
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} –ø–æ –∑–∞–¥–∞—á–µ: {todo.title}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


async def send_test_todo_reminder(user_id: int, task_title: str = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞", bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ to-do –∑–∞–¥–∞—á–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)."""
    if bot is None:
        from app.bot import bot
        
    try:
        message_text = (
            f"üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ</b>\n\n"
            f"üìù <b>{task_title}</b>\n"
            f"üìÖ <b>–°—Ä–æ–∫:</b> –°–µ–≥–æ–¥–Ω—è\n"
            f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –í—ã—Å–æ–∫–∏–π\n\n"
            f"üí™ <b>–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>"
        )
        
        await bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode="HTML"
        )
        
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
