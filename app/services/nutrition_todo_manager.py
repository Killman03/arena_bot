from __future__ import annotations

from datetime import date, datetime, timedelta, timezone
from typing import List
from zoneinfo import ZoneInfo

from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.db.models import User, Todo, NutritionReminder


def _weekday_str_to_int(name: str) -> int:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —á–∏—Å–ª–æ (Monday=0, Sunday=6)"""
    mapping = {
        "monday": 0,
        "tuesday": 1,
        "wednesday": 2,
        "thursday": 3,
        "friday": 4,
        "saturday": 5,
        "sunday": 6,
    }
    return mapping[name]


async def create_nutrition_todos_for_user(session: AsyncSession, user_id: int) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏ –∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
        user = (await session.execute(select(User).where(User.id == user_id))).scalar_one()
        nutrition_reminder = (
            await session.execute(
                select(NutritionReminder).where(NutritionReminder.user_id == user_id)
            )
        ).scalar_one_or_none()
        
        if not nutrition_reminder or not nutrition_reminder.is_active:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tz_name = user.timezone or settings.DEFAULT_TIMEZONE
        try:
            user_now = datetime.now(timezone.utc).astimezone(ZoneInfo(tz_name))
        except Exception:
            user_now = datetime.now(timezone.utc).astimezone(ZoneInfo(settings.DEFAULT_TIMEZONE))
        
        today = user_now.date()
        tasks_created = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏
        days = [d.strip().lower() for d in (nutrition_reminder.cooking_days or "").split(",") if d.strip()]
        cooking_weekdays = [_weekday_str_to_int(d) for d in days if d in {"sunday", "wednesday", "monday", "tuesday", "thursday", "friday", "saturday"}]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        existing_todos = await session.execute(
            select(Todo).where(
                and_(
                    Todo.user_id == user_id,
                    Todo.due_date == today,
                    Todo.description.like("–ó–∞–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è:%")
                )
            )
        )
        existing_todos_list = existing_todos.scalars().all()
        existing_titles = [todo.title for todo in existing_todos_list]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏
        if user_now.weekday() in cooking_weekdays:
            cooking_task_title = f"üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∫–∞ –≤ {nutrition_reminder.cooking_time}"
            if cooking_task_title not in existing_titles:
                todo = Todo(
                    user_id=user_id,
                    title=cooking_task_title,
                    description=f"–ó–∞–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è: –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –í—Ä–µ–º—è: {nutrition_reminder.cooking_time}",
                    due_date=today,
                    priority="high",  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è
                    is_daily=False,
                    is_completed=False,
                    reminder_time=nutrition_reminder.cooking_time,
                    is_reminder_active=True
                )
                session.add(todo)
                tasks_created += 1
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {today}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫—É–ø–æ–∫ (–∑–∞ –¥–µ–Ω—å –¥–æ –≥–æ—Ç–æ–≤–∫–∏)
        tomorrow = today + timedelta(days=1)
        tomorrow_weekday = (user_now.weekday() + 1) % 7
        
        if tomorrow_weekday in cooking_weekdays:
            shopping_task_title = f"üõí –ü–æ–∫—É–ø–∫–∏ –≤ {nutrition_reminder.shopping_reminder_time}"
            if shopping_task_title not in existing_titles:
                todo = Todo(
                    user_id=user_id,
                    title=shopping_task_title,
                    description=f"–ó–∞–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è: –ü–æ–∫—É–ø–∫–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –≥–æ—Ç–æ–≤–∫–∏. –í—Ä–µ–º—è: {nutrition_reminder.shopping_reminder_time}",
                    due_date=today,
                    priority="medium",  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–æ–∫
                    is_daily=False,
                    is_completed=False,
                    reminder_time=nutrition_reminder.shopping_reminder_time,
                    is_reminder_active=True
                )
                session.add(todo)
                tasks_created += 1
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {today}")
        
        if tasks_created > 0:
            await session.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {tasks_created} –∑–∞–¥–∞—á –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def create_nutrition_todos_for_all_users(session: AsyncSession) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏ –∏ –ø–æ–∫—É–ø–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = (await session.execute(select(User))).scalars().all()
        
        for user in users:
            await create_nutrition_todos_for_user(session, user.id)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


async def cleanup_old_nutrition_todos(session: AsyncSession, user_id: int) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–∏—Ç–∞–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π).
    """
    try:
        today = date.today()
        three_days_ago = today - timedelta(days=3)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–∏—Ç–∞–Ω–∏—è
        old_todos = await session.execute(
            select(Todo)
            .where(
                and_(
                    Todo.user_id == user_id,
                    Todo.due_date < three_days_ago,
                    Todo.description.like("–ó–∞–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è:%"),
                    Todo.is_completed == True  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                )
            )
        )
        old_todos_list = old_todos.scalars().all()
        
        for todo in old_todos_list:
            await session.delete(todo)
        
        if old_todos_list:
            await session.commit()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(old_todos_list)} —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø–∏—Ç–∞–Ω–∏—è: {e}")


async def get_nutrition_todos_for_user(session: AsyncSession, user_id: int) -> List[Todo]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        result = await session.execute(
            select(Todo)
            .where(
                and_(
                    Todo.user_id == user_id,
                    Todo.description.like("–ó–∞–¥–∞—á–∞ –ø–∏—Ç–∞–Ω–∏—è:%")
                )
            )
            .order_by(Todo.due_date.desc())
        )
        return result.scalars().all()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–∏—Ç–∞–Ω–∏—è: {e}")
        return []
