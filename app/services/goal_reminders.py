import random
from datetime import datetime, time
from typing import List, Tuple, Dict, Set

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.models import Goal, GoalReminder, User
from app.db.models.goal import GoalStatus
from app.utils.timezone_utils import get_user_time_info

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# –§–æ—Ä–º–∞—Ç: {reminder_key: last_sent_date}
_sent_reminders_cache: Dict[str, str] = {}


# –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
MOTIVATION_MESSAGES = [
    "–°–µ–≥–æ–¥–Ω—è –≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å! –°–µ–≥–æ–¥–Ω—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–∏: {goal_title} üéØ‚ú®",
    "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –°–µ–≥–æ–¥–Ω—è —Ç—ã –¥–æ—Å—Ç–∏–≥–∞–µ—à—å —Ü–µ–ª–∏: {goal_title} üöÄüí™",
    "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å - –¥–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {goal_title} üåüüéâ",
    "–ü–æ–º–Ω–∏ –æ —Å–≤–æ–µ–π —Ü–µ–ª–∏: {goal_title}. –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—Å–ø–µ—Ö—É! üî•",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã –≤–æ–ø–ª–æ—â–∞–µ—à—å –≤ –∂–∏–∑–Ω—å —Ü–µ–ª—å: {goal_title} ‚≠êüí´",
    "–¢–≤–æ—è —Ü–µ–ª—å: {goal_title} –∂–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è! –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω! üéØüî•",
    "–°–µ–≥–æ–¥–Ω—è –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {goal_title} ‚ú®üåü",
    "–ü–æ–º–Ω–∏, —Ä–∞–¥–∏ —á–µ–≥–æ —Ç—ã –Ω–∞—á–∞–ª! –°–µ–≥–æ–¥–Ω—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–∏: {goal_title} üéØüí™",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ç–≤–æ–µ–π —Ü–µ–ª–∏: {goal_title}. –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! üöÄ‚≠ê",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ! –¶–µ–ª—å: {goal_title} üåüüéØ"
]


async def get_active_goal_reminders(session: AsyncSession) -> List[Tuple[Goal, GoalReminder, User]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º."""
    result = (
        await session.execute(
            select(Goal, GoalReminder, User)
            .join(GoalReminder, Goal.id == GoalReminder.goal_id)
            .join(User, Goal.user_id == User.id)
            .where(
                Goal.status == GoalStatus.active,
                GoalReminder.is_active == True
            )
        )
    ).all()
    
    return result


def get_random_motivation_message(goal_title: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–µ–ª–∏."""
    message_template = random.choice(MOTIVATION_MESSAGES)
    return message_template.format(goal_title=goal_title)


def _cleanup_old_reminders_cache() -> None:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    global _sent_reminders_cache
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    keys_to_remove = [
        key for key, date in _sent_reminders_cache.items() 
        if date != today
    ]
    
    for key in keys_to_remove:
        del _sent_reminders_cache[key]


async def send_goal_reminders(session: AsyncSession, bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if bot is None:
        from app.bot import bot
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞
    _cleanup_old_reminders_cache()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminders = await get_active_goal_reminders(session)
    
    for goal, reminder, user in reminders:
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_key = f"{user.id}_{goal.id}_{reminder.reminder_time}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime("%Y-%m-%d")
            if _sent_reminders_cache.get(reminder_key) == today:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time_info = get_user_time_info(user.timezone)
            user_local_time = time_info['user_local_time']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            reminder_time = time.fromisoformat(reminder.reminder_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            # (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ 1 –º–∏–Ω—É—Ç—É)
            time_diff = abs(
                (user_local_time.hour * 60 + user_local_time.minute) - 
                (reminder_time.hour * 60 + reminder_time.minute)
            )
            
            if time_diff <= 1:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–∏–Ω—É—Ç—ã
                # –õ–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                time_info = get_user_time_info(user.timezone)
                print(f"üïê –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª–∏ '{goal.title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                print(f"   üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time_info['timezone']}")
                print(f"   üïê –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {time_info['user_local_time'].strftime('%H:%M:%S')}")
                print(f"   üåç UTC –≤—Ä–µ–º—è: {time_info['utc_time'].strftime('%H:%M:%S')}")
                print(f"   ‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder.reminder_time}")
                print(f"   üìä –°–º–µ—â–µ–Ω–∏–µ: {time_info['offset_hours']:+g} —á")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                motivation_message = get_random_motivation_message(goal.title)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                full_message = (
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —Ü–µ–ª–∏\n\n"
                    f"{motivation_message}\n\n"
                    f"üìÖ –°—Ä–æ–∫: {goal.due_date.strftime('%d.%m.%Y') if goal.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {goal.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                    f"üí™ –î–µ–π—Å—Ç–≤—É–π —Å–µ–π—á–∞—Å!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=full_message,
                    parse_mode=None
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                _sent_reminders_cache[reminder_key] = today
                
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} –ø–æ —Ü–µ–ª–∏: {goal.title}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


async def send_test_reminder(user_id: int, goal_title: str = "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å", bot=None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)."""
    if bot is None:
        from app.bot import bot
        
    try:
        motivation_message = get_random_motivation_message(goal_title)
        
        full_message = (
            f"üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
            f"{motivation_message}\n\n"
            f"üìÖ **–°—Ä–æ–∫:** –°–µ–≥–æ–¥–Ω—è\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n\n"
            f"üí™ **–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!**"
        )
        
        await bot.send_message(
            chat_id=user_id,
            text=full_message,
            parse_mode="Markdown"
        )
        
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
