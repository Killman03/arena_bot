from __future__ import annotations

from datetime import date
from typing import List

from aiogram import Bot
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.models import Challenge, User


async def cleanup_expired_challenges(session: AsyncSession, bot: Bot) -> None:
    """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    today = date.today()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
    expired_challenges = (
        await session.execute(
            select(Challenge).where(
                Challenge.end_date <= today,
                Challenge.end_date.is_not(None)
            )
        )
    ).scalars().all()
    
    if not expired_challenges:
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–µ–ª–ª–µ–Ω–¥–∂–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    user_challenges = {}
    for challenge in expired_challenges:
        if challenge.user_id not in user_challenges:
            user_challenges[challenge.user_id] = []
        user_challenges[challenge.user_id].append(challenge)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id, challenges in user_challenges.items():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await session.get(User, user_id)
            if not user:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö
            challenge_names = [ch.title for ch in challenges]
            message = (
                "‚è∞ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!</b>\n\n"
                f"–°–ª–µ–¥—É—é—â–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã:\n"
                f"{chr(10).join(f'‚Ä¢ {name}' for name in challenge_names)}\n\n"
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º! üéâ\n"
                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                user.telegram_id,
                message,
                parse_mode="HTML"
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏
    await session.execute(
        delete(Challenge).where(
            Challenge.end_date <= today,
            Challenge.end_date.is_not(None)
        )
    )
    
    print(f"–£–¥–∞–ª–µ–Ω–æ {len(expired_challenges)} –∏—Å—Ç–µ–∫—à–∏—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π")
