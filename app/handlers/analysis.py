from __future__ import annotations

from datetime import datetime, timedelta
from typing import Any
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, desc
from sqlalchemy.orm import selectinload

from app.db.session import session_scope
from app.db.models import User, WeeklyRetro, Goal, FinanceTransaction, Challenge, ChallengeLog
from app.keyboards.common import analysis_menu, back_main_menu
from app.services.llm import deepseek_complete

router = Router()


def _split_into_messages(text: str, max_len: int = 3000) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
    if not text:
        return []
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º
    if len(text) <= max_len:
        return [text]
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π (>4000), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏
    if len(text) > 4000:
        part_size = len(text) // 3
        
        # –ò—â–µ–º —Ö–æ—Ä–æ—à–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
        split1 = part_size
        split2 = part_size * 2
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã
        for i in range(part_size - 100, part_size + 100):
            if i < 0 or i >= len(text):
                continue
            if text[i] == '\n' or text[i] == ' ':
                split1 = i + 1
                break
        
        for i in range(part_size * 2 - 100, part_size * 2 + 100):
            if i < 0 or i >= len(text):
                continue
            if text[i] == '\n' or text[i] == ' ':
                split2 = i + 1
                break
        
        part1 = text[:split1].strip()
        part2 = text[split1:split2].strip()
        part3 = text[split2:].strip()
        
        if part1 and part2 and part3:
            return [part1, part2, part3]
        elif part1 and part2:
            return [part1, part2]
        else:
            return [text]
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å—Ç–∏
    paragraphs = text.split("\n\n")
    total_len = len(text)
    target = total_len // 2
    part1 = []
    len1 = 0
    
    for p in paragraphs:
        block = p + "\n\n"
        if len1 + len(block) <= max_len and (len1 + len(block) <= target or len1 == 0):
            part1.append(block)
            len1 += len(block)
        else:
            break
    
    p1 = "".join(part1).rstrip()
    rest = text[len(p1):].lstrip()
    
    if not p1:
        p1 = text[:max_len]
        rest = text[max_len:]
    
    if len(rest) <= max_len:
        return [p1, rest] if rest else [p1]
    
    # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë —Ç–æ–∂–µ
    if len(rest) > max_len:
        mid_point = len(rest) // 2
        for i in range(mid_point - 100, mid_point + 100):
            if i < 0 or i >= len(rest):
                continue
            if rest[i] == '\n' or rest[i] == ' ':
                mid_point = i + 1
                break
        
        part2 = rest[:mid_point].strip()
        part3 = rest[mid_point:].strip()
        
        if part2 and part3:
            return [p1, part2, part3]
        else:
            return [p1, rest[:max_len - 1] + "‚Ä¶"]
    
    return [p1, rest]


class AnalysisStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–µ–ª–∏."""
    waiting_for_success = State()
    waiting_for_success_reason = State()
    waiting_for_failure = State()
    waiting_for_failure_reason = State()


@router.callback_query(F.data == "menu_analysis")
async def analysis_menu_handler(callback: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞."""
    await callback.message.edit_text(
        "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑**\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–µ–¥–µ–ª–∏ "
        "–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=analysis_menu()
    )


@router.callback_query(F.data == "analysis_start")
async def start_analysis_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–µ–ª–∏."""
    await state.set_state(AnalysisStates.waiting_for_success)
    await callback.message.edit_text(
        "üìù **–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏**\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é –ø–æ —à–∞–≥–∞–º.\n\n"
        "**–®–∞–≥ 1/4:** –ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "–û–ø–∏—à–∏ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —É—Å–ø–µ—Ö–∏ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:",
        reply_markup=back_main_menu()
    )


@router.message(AnalysisStates.waiting_for_success)
async def process_success_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å."""
    await state.update_data(success=message.text)
    await state.set_state(AnalysisStates.waiting_for_success_reason)
    await message.answer(
        "**–®–∞–≥ 2/4:** –ü–æ—á–µ–º—É —ç—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å?\n"
        "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏—á–∏–Ω—ã —É—Å–ø–µ—Ö–∞, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ –¥–æ—Å—Ç–∏—á—å —ç—Ç–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    )


@router.message(AnalysisStates.waiting_for_success_reason)
async def process_success_reason_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ –ø—Ä–∏—á–∏–Ω–∞—Ö —É—Å–ø–µ—Ö–∞."""
    await state.update_data(success_reason=message.text)
    await state.set_state(AnalysisStates.waiting_for_failure)
    await message.answer(
        "**–®–∞–≥ 3/4:** –ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?\n"
        "–û–ø–∏—à–∏ –Ω–µ—É–¥–∞—á–∏, –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ç–æ, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:"
    )


@router.message(AnalysisStates.waiting_for_failure)
async def process_failure_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å."""
    await state.update_data(failure=message.text)
    await state.set_state(AnalysisStates.waiting_for_failure_reason)
    await message.answer(
        "**–®–∞–≥ 4/4:** –ü–æ—á–µ–º—É —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å?\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏—á–∏–Ω—ã –Ω–µ—É–¥–∞—á, —á—Ç–æ –ø–æ–º–µ—à–∞–ª–æ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π:"
    )


@router.message(AnalysisStates.waiting_for_failure_reason)
async def process_failure_reason_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –Ω–µ—É–¥–∞—á –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑."""
    await state.update_data(failure_reason=message.text)
    
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user = message.from_user
    if not user:
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(
            select(User).where(User.telegram_id == user.id)
        )).scalar_one()
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        today = datetime.now()
        days_since_monday = today.weekday()
        week_start = today - timedelta(days=days_since_monday)
        week_start = week_start.replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞
        analysis = WeeklyRetro(
            user_id=db_user.id,
            week_start=week_start,
            did_well=data.get("success"),
            why_good=data.get("success_reason"),
            not_well=data.get("failure"),
            why_bad=data.get("failure_reason")
        )
        session.add(analysis)
        await session.commit()
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
        recent_data = await get_recent_user_data(session, db_user.id)
        
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò
        try:
            await message.answer("‚è≥ **–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò...**", parse_mode="Markdown")
        except Exception:
            pass
        ai_analysis = await generate_ai_analysis(data, recent_data)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –ø–ª–∞–Ω–æ–º –æ—Ç –ò–ò
        analysis.plan = ai_analysis
        await session.commit()
    
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        f"üìä **–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:**\n"
        f"‚úÖ **–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:** {data.get('success')}\n"
        f"üí° **–ü–æ—á–µ–º—É –ø–æ–ª—É—á–∏–ª–æ—Å—å:** {data.get('success_reason')}\n"
        f"‚ùå **–ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å:** {data.get('failure')}\n"
        f"ü§î **–ü–æ—á–µ–º—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å:** {data.get('failure_reason')}",
        reply_markup=back_main_menu(),
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if ai_analysis:
        await message.answer("ü§ñ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:**", parse_mode="Markdown")
        parts = _split_into_messages(ai_analysis)
        for i, part in enumerate(parts, 1):
            if i == 1:
                await message.answer(part, parse_mode="Markdown")
            else:
                await message.answer(f"**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:**\n{part}", parse_mode="Markdown")


@router.callback_query(F.data == "analysis_history")
async def analysis_history_handler(callback: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤."""
    user = callback.from_user
    if not user:
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(
            select(User).where(User.telegram_id == user.id)
        )).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–Ω–∞–ª–∏–∑–æ–≤
        analyses = (await session.execute(
            select(WeeklyRetro)
            .where(WeeklyRetro.user_id == db_user.id)
            .order_by(desc(WeeklyRetro.week_start))
            .limit(5)
        )).scalars().all()
    
    if not analyses:
        await callback.message.edit_text(
            "üìä **–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. "
            "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏!",
            reply_markup=back_main_menu()
        )
        return
    
    history_text = "üìä **–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤**\n\n"
    for i, analysis in enumerate(analyses, 1):
        week_end = analysis.week_start + timedelta(days=6)
        history_text += f"**{i}. –ù–µ–¥–µ–ª—è {analysis.week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m')}**\n"
        
        if analysis.did_well:
            history_text += f"‚úÖ **–£—Å–ø–µ—Ö–∏:** {analysis.did_well[:100]}{'...' if len(analysis.did_well) > 100 else ''}\n"
        
        if analysis.not_well:
            history_text += f"‚ùå **–ù–µ—É–¥–∞—á–∏:** {analysis.not_well[:100]}{'...' if len(analysis.not_well) > 100 else ''}\n"
        
        history_text += "\n"
    
    await callback.message.edit_text(
        history_text,
        reply_markup=back_main_menu()
    )


async def get_recent_user_data(session, user_id: int) -> dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."""
    recent_data = {
        "goals": [],
        "finances": [],
        "challenges": []
    }
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–ª–∏
    goals = (await session.execute(
        select(Goal)
        .where(Goal.user_id == user_id)
        .order_by(desc(Goal.created_at))
        .limit(10)
    )).scalars().all()
    recent_data["goals"] = [{"title": g.title, "description": g.description, "status": g.status.value} for g in goals]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    finances = (await session.execute(
        select(FinanceTransaction)
        .where(FinanceTransaction.user_id == user_id)
        .order_by(desc(FinanceTransaction.created_at))
        .limit(10)
    )).scalars().all()
    recent_data["finances"] = [{"amount": f.amount, "category": f.category, "description": f.description} for f in finances]
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
    challenge_logs = (await session.execute(
        select(ChallengeLog)
        .join(Challenge, ChallengeLog.challenge_id == Challenge.id)
        .where(Challenge.user_id == user_id)
        .order_by(desc(ChallengeLog.created_at))
        .limit(10)
    )).scalars().all()
    recent_data["challenges"] = [{"completed": c.completed, "note": c.note} for c in challenge_logs]
    
    return recent_data


async def generate_ai_analysis(analysis_data: dict, recent_data: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    context = f"""
–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–ß—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {analysis_data.get('success', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ü–æ—á–µ–º—É –ø–æ–ª—É—á–∏–ª–æ—Å—å: {analysis_data.get('success_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ß—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {analysis_data.get('failure', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ü–æ—á–µ–º—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: {analysis_data.get('failure_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –¶–µ–ª–∏: {len(recent_data['goals'])} –∑–∞–ø–∏—Å–µ–π
- –§–∏–Ω–∞–Ω—Å—ã: {len(recent_data['finances'])} –∑–∞–ø–∏—Å–µ–π
- –ß–µ–ª–ª–µ–Ω–¥–∂–∏: {len(recent_data['challenges'])} –∑–∞–ø–∏—Å–µ–π

–î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:
–¶–µ–ª–∏: {recent_data['goals']}
–§–∏–Ω–∞–Ω—Å—ã: {recent_data['finances']}
–ß–µ–ª–ª–µ–Ω–¥–∂–∏: {recent_data['challenges']}
"""
    
    system_prompt = """–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—É—á –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ. 

–§–æ–∫—É—Å –Ω–∞:
1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
2. –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏
3. –£—Å–∏–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ë—É–¥—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º. –î–∞–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    
    try:
        ai_response = await deepseek_complete(
            prompt=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{context}",
            system=system_prompt,
            max_tokens=5000
        )
        return ai_response
    except Exception as e:
        return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ò–ò. –û—à–∏–±–∫–∞: {str(e)}"
