from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select, func
from datetime import datetime, timedelta

from app.db.session import session_scope
from app.db.models import User, Goal, Habit, HabitLog, PomodoroSession

router = Router()


@router.message(Command("analysis"))
async def analysis_handler(message: types.Message) -> None:
    """Show user's progress analysis"""
    user = message.from_user
    if not user:
        return

    async with session_scope() as session:
        # Get user from database
        db_user = await session.execute(
            select(User).where(User.telegram_id == user.id)
        )
        db_user = db_user.scalar_one_or_none()
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        # Get basic stats
        goals_count = await session.execute(
            select(func.count(Goal.id)).where(Goal.user_id == db_user.id)
        )
        goals_count = goals_count.scalar()

        active_habits = await session.execute(
            select(func.count(Habit.id)).where(
                Habit.user_id == db_user.id,
                Habit.is_active == True
            )
        )
        active_habits = active_habits.scalar()

        # Get habit completion rate for last 7 days
        week_ago = datetime.now() - timedelta(days=7)
        habit_logs = await session.execute(
            select(HabitLog).join(Habit).where(
                Habit.user_id == db_user.id,
                HabitLog.completed_at >= week_ago
            )
        )
        habit_logs = habit_logs.scalars().all()

        completion_rate = 0
        if active_habits > 0:
            total_possible = active_habits * 7  # 7 days
            actual_completions = len(habit_logs)
            completion_rate = (actual_completions / total_possible) * 100 if total_possible > 0 else 0

        # Get productivity stats
        pomodoro_sessions = await session.execute(
            select(func.count(PomodoroSession.id)).where(
                PomodoroSession.user_id == db_user.id,
                PomodoroSession.completed_at >= week_ago
            )
        )
        pomodoro_sessions = pomodoro_sessions.scalar()

        analysis_text = f"""
üìä **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞**

üéØ **–¶–µ–ª–∏**: {goals_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
‚úÖ **–ü—Ä–∏–≤—ã—á–∫–∏**: {active_habits} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
üìà **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é**: {completion_rate:.1f}%
üçÖ **–ü–æ–º–æ–¥–æ—Ä–æ —Å–µ—Å—Å–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é**: {pomodoro_sessions}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**:
"""
        
        if completion_rate < 50:
            analysis_text += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        if pomodoro_sessions < 5:
            analysis_text += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        if goals_count == 0:
            analysis_text += "‚Ä¢ –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è\n"
        
        if completion_rate >= 80 and pomodoro_sessions >= 10:
            analysis_text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üöÄ\n"

        await message.answer(analysis_text)


@router.message(Command("stats"))
async def stats_handler(message: types.Message) -> None:
    """Show detailed statistics"""
    user = message.from_user
    if not user:
        return

    async with session_scope() as session:
        db_user = await session.execute(
            select(User).where(User.telegram_id == user.id)
        )
        db_user = db_user.scalar_one_or_none()
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        # Get user creation date
        days_registered = (datetime.now() - db_user.created_at.replace(tzinfo=None)).days

        stats_text = f"""
üìà **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: {db_user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìÖ **–í —Å–∏—Å—Ç–µ–º–µ**: {days_registered} –¥–Ω–µ–π
üÜî **Telegram ID**: {db_user.telegram_id}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analysis –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""
        
        await message.answer(stats_text)
