from __future__ import annotations

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.common import (
    main_menu,
    goals_menu,
    finance_menu,
    finance_upload_menu,
    finance_income_menu,
    finance_goals_menu,
    creditor_debtor_menu,
    health_menu,
    nutrition_menu,
    back_main_menu,
    goals_list_keyboard,
    books_menu,
)
from sqlalchemy import select
from app.db.session import session_scope
from app.db.models import User, Goal, GoalStatus
from app.services.exporters import export_user_data_to_excel
from pathlib import Path

router = Router()


@router.callback_query(F.data == "back_main")
async def back_main(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()


@router.callback_query(F.data == "menu_goals")
async def menu_goals(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–†–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π:", reply_markup=goals_menu())
    await cb.answer()


@router.callback_query(F.data == "menu_books")
async def menu_books(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∫–Ω–∏–≥"""
    await cb.message.edit_text(
        "üìö <b>–†–∞–∑–¥–µ–ª –∫–Ω–∏–≥</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–µ–Ω–∏—è",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )
    await cb.answer()





HELP_TEXT = (
    "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n\n"
    "- –ú–µ–Ω—é: –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª ‚Äî –¶–µ–ª–∏, –§–∏–Ω–∞–Ω—Å—ã, –ö–Ω–∏–≥–∏.\n"
    "- –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏.\n"
    "- –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å SMART –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é\n"
    "/pillars ‚Äî 7 –æ–ø–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n"
    "/motivation ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    "/goal_add ¬´—Ç–µ–∫—Å—Ç¬ª ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å (–ò–ò)\n"
    "/goals ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
    "/ab A | B ‚Äî A/B-–∞–Ω–∞–ª–∏–∑ —Å –ø–ª–∞–Ω–æ–º —à–∞–≥–æ–≤\n"
    "/smart scope title | desc | YYYY-MM-DD ‚Äî SMART-—Ü–µ–ª—å\n"
    "/expense 199.99 –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
    "/finance_export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel\n"
    "/meal breakfast –û–º–ª–µ—Ç [YYYY-MM-DD] ‚Äî –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
    "/pomodoro ‚Äî —Å—Ç–∞—Ä—Ç –ø–æ–º–æ–¥–æ—Ä–æ 25 –º–∏–Ω—É—Ç\n\n"
    "Inline-–∫–Ω–æ–ø–∫–∏:\n"
    "- –í –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
    "- –í —Ü–µ–ª—è—Ö –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n"
    "- –í —Ñ–∏–Ω–∞–Ω—Å–∞—Ö ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel.\n"
    "- –í –∫–Ω–∏–≥–∞—Ö ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π, —Ü–∏—Ç–∞—Ç—ã, –º—ã—Å–ª–∏, –ò–ò-—Å–æ–≤–µ—Ç—ã.\n"
)


@router.callback_query(F.data == "help")
async def help_callback(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text(HELP_TEXT, reply_markup=back_main_menu(), parse_mode=None)
    await cb.answer()


@router.callback_query(F.data == "menu_finance")
async def menu_finance(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å –º–∏–Ω–∏-–æ—Ç—á–µ—Ç–æ–º"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã
    await cb.message.edit_text(
        "ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã...</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        from app.services.finance_analytics import get_finance_summary
        summary = await get_finance_summary(session, db_user.id)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò
        from app.services.llm import deepseek_complete
        try:
            ai_advice = await deepseek_complete(
                f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö: –¥–æ—Ö–æ–¥—ã {summary['monthly_income']}, —Ä–∞—Å—Ö–æ–¥—ã {summary['monthly_expenses']}, –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã {summary['total_creditors']}, –¥–æ–ª–∂–Ω–∏–∫–∏ {summary['total_debtors']}. –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                system="–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                max_tokens=100
            )
            # –ó–∞–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ HTML-—Ç–µ–≥–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            import re
            ai_advice = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', ai_advice)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            if len(ai_advice) > 300:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
                truncated = ai_advice[:300]
                last_period = truncated.rfind('.')
                if last_period > 250:  # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    ai_advice = truncated[:last_period + 1]
                else:
                    ai_advice = truncated + "..."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            ai_advice = ai_advice.replace(". ", ".\n")
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ
            ai_advice = ai_advice.strip()
            
        except Exception:
            ai_advice = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò"
        
        report_text = f"""üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>

üíµ <b>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>
üìà –î–æ—Ö–æ–¥—ã: {summary['monthly_income']:,.2f} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {summary['monthly_expenses']:,.2f} ‚ÇΩ
üíπ –ë–∞–ª–∞–Ω—Å: {summary['monthly_balance']:,.2f} ‚ÇΩ

üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã:</b> {summary['total_creditors']:,.2f} ‚ÇΩ
üè¶ <b>–î–æ–ª–∂–Ω–∏–∫–∏:</b> {summary['total_debtors']:,.2f} ‚ÇΩ

ü§ñ <b>–°–æ–≤–µ—Ç –ò–ò:</b>
{ai_advice}"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(report_text) > 4000:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ
            main_report = f"""üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>

üíµ <b>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>
üìà –î–æ—Ö–æ–¥—ã: {summary['monthly_income']:,.2f} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {summary['monthly_expenses']:,.2f} ‚ÇΩ
üíπ –ë–∞–ª–∞–Ω—Å: {summary['monthly_balance']:,.2f} ‚ÇΩ

üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã:</b> {summary['total_creditors']:,.2f} ‚ÇΩ
üè¶ <b>–î–æ–ª–∂–Ω–∏–∫–∏:</b> {summary['total_debtors']:,.2f} ‚ÇΩ"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
            await cb.message.edit_text(main_report, reply_markup=finance_menu(), parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –ò–ò –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await cb.message.answer(
                f"ü§ñ <b>–°–æ–≤–µ—Ç –ò–ò:</b>\n\n{ai_advice}",
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
            await cb.message.edit_text(report_text, reply_markup=finance_menu(), parse_mode="HTML")
        
        await cb.answer()


@router.callback_query(F.data == "menu_nutrition")
async def menu_nutrition(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ü–∏—Ç–∞–Ω–∏–µ:", reply_markup=nutrition_menu())
    await cb.answer()


@router.callback_query(F.data == "menu_health")
async def menu_health(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ó–¥–æ—Ä–æ–≤—å–µ:", reply_markup=health_menu())
    await cb.answer()


@router.callback_query(F.data == "goals_list")
async def goals_list(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–ª–∏
        goals = (
            await session.execute(select(Goal).where(Goal.user_id == db_user.id, Goal.status == GoalStatus.active))
        ).scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
        from app.db.models import FinancialGoal
        financial_goals = (
            await session.execute(select(FinancialGoal).where(FinancialGoal.user_id == db_user.id, FinancialGoal.is_active.is_(True)))
        ).scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        all_goals_text = "üéØ <b>–í–∞—à–∏ —Ü–µ–ª–∏:</b>\n\n"
        
        # –û–±—ã—á–Ω—ã–µ —Ü–µ–ª–∏
        if goals:
            all_goals_text += "üìã <b>–û–±—â–∏–µ —Ü–µ–ª–∏:</b>\n"
            for i, goal in enumerate(goals, 1):
                all_goals_text += f"{i}. {goal.title}\n"
            all_goals_text += "\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
        if financial_goals:
            all_goals_text += "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:</b>\n"
            for i, goal in enumerate(financial_goals, 1):
                progress_percentage = (float(goal.current_amount) / float(goal.target_amount)) * 100
                remaining = float(goal.target_amount) - float(goal.current_amount)
                all_goals_text += f"{i}. {goal.name} - {progress_percentage:.1f}% ({goal.current_amount:,.0f}‚ÇΩ / {goal.target_amount:,.0f}‚ÇΩ)\n"
                all_goals_text += f"   üéØ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f} ‚ÇΩ\n"
            all_goals_text += "\n"
        
        if not goals and not financial_goals:
            await cb.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –Ω–µ—Ç", reply_markup=goals_menu())
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ü–µ–ª–µ–π (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            items = [(g.id, g.title) for g in goals]
            if items:
                await cb.message.edit_text(all_goals_text, reply_markup=goals_list_keyboard(items))
            else:
                await cb.message.edit_text(all_goals_text, reply_markup=goals_menu())
    
    await cb.answer()


@router.callback_query(F.data.startswith("goal_done:"))
async def goal_done(cb: types.CallbackQuery) -> None:
    goal_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        goal = await session.get(Goal, goal_id)
        if goal:
            goal.status = GoalStatus.completed
    await cb.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    await goals_list(cb)


@router.callback_query(F.data.startswith("goal_cancel:"))
async def goal_cancel(cb: types.CallbackQuery) -> None:
    goal_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        goal = await session.get(Goal, goal_id)
        if goal:
            goal.status = GoalStatus.cancelled
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úñ")
    await goals_list(cb)


@router.callback_query(F.data == "finance_export_cb")
async def finance_export_cb(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        out = Path("exports") / f"user_{db_user.id}.xlsx"
        await export_user_data_to_excel(session, db_user.id, out)
    try:
        await cb.message.answer_document(types.FSInputFile(out))  # type: ignore[arg-type]
    except Exception:
        await cb.message.answer("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: " + str(out))
    await cb.answer()


@router.callback_query(F.data == "finance_goals")
async def finance_goals_menu_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π"""
    await cb.message.edit_text(
        "üéØ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π.",
        reply_markup=finance_goals_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "finance_upload_csv")
async def finance_upload_csv(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV"""
    await cb.message.edit_text(
        "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –≤—ã–ø–∏—Å–∫—É:",
        reply_markup=finance_upload_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("bank_"))
async def bank_selection(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    bank = cb.data.replace("bank_", "")
    bank_names = {
        "alpha": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "tbank": "–¢-–ë–∞–Ω–∫",
        "mbank": "MBank",
        "vtb": "–í–¢–ë",
        "gazprom": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫"
    }
    
    bank_name = bank_names.get(bank, '–ë–∞–Ω–∫')
    
    if bank == "mbank":
        message_text = (
            f"üè¶ <b>{bank_name}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ XLS —Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–æ–π.\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
            "‚ö†Ô∏è <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ MBank:</b>\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç XLS —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã, –¥–æ—Ö–æ–¥—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )
    else:
        message_text = (
            f"üè¶ <b>{bank_name}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–æ–π.\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã."
        )
    
    await cb.message.edit_text(
        message_text,
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "finance_income")
async def finance_income(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤"""
    await cb.message.edit_text(
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=finance_income_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "finance_creditors")
async def finance_creditors(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
        from app.services.finance_analytics import get_creditors
        creditors = await get_creditors(session, db_user.id)
        
        if not creditors:
            await cb.message.edit_text(
                "üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞", callback_data="creditor_add")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")]
                ]),
                parse_mode="HTML"
            )
        else:
            text = "üí∏ <b>–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã:</b>\n\n"
            for creditor in creditors:
                text += f"üë§ <b>{creditor['name']}</b>\n"
                text += f"üí∞ –°—É–º–º–∞: {creditor['amount']:,.2f} ‚ÇΩ\n"
                text += f"üìÖ –°—Ä–æ–∫: {creditor['due_date']}\n\n"
            
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
            keyboard = []
            for creditor in creditors:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë§ {creditor['name']} - {creditor['amount']:,.0f}‚ÇΩ",
                        callback_data=f"creditor_view:{creditor['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞", callback_data="creditor_add")])
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")])
            
            await cb.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    await cb.answer()


@router.callback_query(F.data == "finance_debtors")
async def finance_debtors(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–æ–≤
        from app.services.finance_analytics import get_debtors
        debtors = await get_debtors(session, db_user.id)
        
        if not debtors:
            await cb.message.edit_text(
                "üè¶ <b>–î–æ–ª–∂–Ω–∏–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞", callback_data="debtor_add")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")]
                ]),
                parse_mode="HTML"
            )
        else:
            text = "üè¶ <b>–í–∞—à–∏ –¥–æ–ª–∂–Ω–∏–∫–∏:</b>\n\n"
            for debtor in debtors:
                text += f"üë§ <b>{debtor['name']}</b>\n"
                text += f"üí∞ –°—É–º–º–∞: {debtor['amount']:,.2f} ‚ÇΩ\n"
                text += f"üìÖ –°—Ä–æ–∫: {debtor['due_date']}\n\n"
            
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤
            keyboard = []
            for debtor in debtors:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë§ {debtor['name']} - {debtor['amount']:,.0f}‚ÇΩ",
                        callback_data=f"debtor_view:{debtor['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞", callback_data="debtor_add")])
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")])
            
            await cb.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    await cb.answer()


