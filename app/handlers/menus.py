from __future__ import annotations

from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.common import (
    main_menu,
    goals_menu,
    finance_menu,
    finance_upload_menu,
    finance_income_menu,
    finance_goals_menu,
    creditor_debtor_menu,
    health_menu,
    nutrition_menu,
    back_main_menu,
    goals_list_keyboard,
    books_menu,
)
from sqlalchemy import select
from app.db.session import session_scope
from app.db.models import User, Goal, GoalStatus
from app.services.exporters import export_user_data_to_excel
from pathlib import Path

router = Router()


@router.callback_query(F.data == "back_main")
async def back_main(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()


@router.callback_query(F.data == "menu_goals")
async def menu_goals(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–†–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π:", reply_markup=goals_menu())
    await cb.answer()


@router.callback_query(F.data == "menu_books")
async def menu_books(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∫–Ω–∏–≥"""
    await cb.message.edit_text(
        "üìö <b>–†–∞–∑–¥–µ–ª –∫–Ω–∏–≥</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–µ–Ω–∏—è",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )
    await cb.answer()





HELP_TEXT = (
    "ü§ñ <b>Gladiator Arena Life Bot</b>\n\n"
    "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω—Ç–æ—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!\n\n"
    "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n"
    "‚Ä¢ <b>–¶–µ–ª–∏</b> - SMART-—Ü–µ–ª–∏ —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º\n"
    "‚Ä¢ <b>–§–∏–Ω–∞–Ω—Å—ã</b> - —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤, —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n"
    "‚Ä¢ <b>–ö–Ω–∏–≥–∏</b> - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞, —Ü–∏—Ç–∞—Ç—ã, –º—ã—Å–ª–∏, –ò–ò-–∞–Ω–∞–ª–∏–∑\n"
    "‚Ä¢ <b>–ó–¥–æ—Ä–æ–≤—å–µ</b> - —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    "‚Ä¢ <b>–ü–∏—Ç–∞–Ω–∏–µ</b> - –ø–ª–∞–Ω—ã –≥–æ—Ç–æ–≤–∫–∏, —Å—É—à–∫–∞/–º–∞—Å—Å–∞\n"
    "‚Ä¢ <b>–ß–µ–ª–ª–µ–Ω–¥–∂–∏</b> - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ —Ü–µ–ª–∏\n"
    "‚Ä¢ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è</b> - –≤–∏–¥–µ–Ω–∏–µ, –º–∏—Å—Å–∏—è, —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n"
    "‚Ä¢ <b>–ê–Ω–∞–ª–∏–∑</b> - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞\n"
    "‚Ä¢ <b>To-Do</b> - –∑–∞–¥–∞—á–∏ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞\n\n"
    "üí° <b>–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
    "‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ SMART-—Ü–µ–ª–µ–π\n"
    "‚Ä¢ A/B –∞–Ω–∞–ª–∏–∑ —Å –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π\n"
    "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è\n"
    "‚Ä¢ –ü–ª–∞–Ω—ã –≥–æ—Ç–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫\n"
    "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
    "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    "/pillars ‚Äî 7 –æ–ø–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n"
    "/motivation ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
    "/goal_add ¬´—Ç–µ–∫—Å—Ç¬ª ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n"
    "/goals ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
    "/ab A | B ‚Äî A/B –∞–Ω–∞–ª–∏–∑\n"
    "/expense 199.99 –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Ä–∞—Å—Ö–æ–¥\n"
    "/finance_export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n"
    "/meal breakfast –û–º–ª–µ—Ç [YYYY-MM-DD] ‚Äî –ø–∏—Ç–∞–Ω–∏–µ\n"
    "/pomodoro ‚Äî –ø–æ–º–æ–¥–æ—Ä–æ —Ç–∞–π–º–µ—Ä\n\n"
    "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
    "–í –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´‚ùì –ü–æ–º–æ—â—å¬ª —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏!"
)


@router.callback_query(F.data == "help")
async def help_callback(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text(HELP_TEXT, reply_markup=back_main_menu(), parse_mode="HTML")
    await cb.answer()


@router.callback_query(F.data == "guide")
async def guide_callback(cb: types.CallbackQuery) -> None:
    guide_text = (
        "üìö <b>–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "üéØ <b>1. –¶–ï–õ–ò</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ SMART-—Ü–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ A/B –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n\n"
        "üí∞ <b>2. –§–ò–ù–ê–ù–°–´</b>\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n\n"
        "üìö <b>3. –ö–ù–ò–ì–ò</b>\n"
        "‚Ä¢ –í–µ–¥–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–Ω–∏–≥\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è\n\n"
        "ü©∫ <b>4. –ó–î–û–†–û–í–¨–ï</b>\n"
        "‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (—à–∞–≥–∏, —Å–æ–Ω, –≤–µ—Å)\n"
        "‚Ä¢ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ —Å –ò–ò\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "üçΩÔ∏è <b>5. –ü–ò–¢–ê–ù–ò–ï</b>\n"
        "‚Ä¢ –ü–ª–∞–Ω—ã –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ 3 –¥–Ω—è\n"
        "‚Ä¢ –°–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ –æ—Ç –ò–ò\n"
        "‚Ä¢ –¶–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (—Å—É—à–∫–∞/–º–∞—Å—Å–∞)\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "üèÜ <b>6. –ß–ï–õ–õ–ï–ù–î–ñ–ò</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "üî• <b>7. –ú–û–¢–ò–í–ê–¶–ò–Ø</b>\n"
        "‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∏–¥–µ–Ω–∏–µ –∏ –º–∏—Å—Å–∏—é\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ –ª–∏—á–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –°—Ç–∞–≤—å—Ç–µ –≥–æ–¥–æ–≤—ã–µ —Ü–µ–ª–∏\n\n"
        "üìä <b>8. –ê–ù–ê–õ–ò–ó</b>\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞\n"
        "‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
        "üìù <b>9. TO-DO</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–ª–∞\n\n"
        "‚öôÔ∏è <b>10. –ù–ê–°–¢–†–û–ô–ö–ò</b>\n"
        "‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ùì –ü–æ–º–æ—â—å¬ª –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ\n"
        "‚Ä¢ –ò–ò –ø–æ–º–æ–∂–µ—Ç —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π —Ü–µ–ª–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –ª—É—á—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
    )
    
    await cb.message.edit_text(guide_text, reply_markup=back_main_menu(), parse_mode="HTML")
    await cb.answer()


# ==================== –ü–û–ú–û–©–¨ –ü–û –†–ê–ó–î–ï–õ–ê–ú ====================

@router.callback_query(F.data == "goals_help")
async def goals_help(cb: types.CallbackQuery) -> None:
    help_text = (
        "üéØ <b>–†–∞–∑–¥–µ–ª –¶–ï–õ–ò - –ü–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å SMART-—Ü–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å A/B –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏\n\n"
        "üí° <b>SMART-—Ü–µ–ª–∏:</b>\n"
        "‚Ä¢ <b>S</b>pecific (–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è) - —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è\n"
        "‚Ä¢ <b>M</b>easurable (–ò–∑–º–µ—Ä–∏–º–∞—è) - —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ <b>A</b>chievable (–î–æ—Å—Ç–∏–∂–∏–º–∞—è) - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è\n"
        "‚Ä¢ <b>R</b>elevant (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è) - –≤–∞–∂–Ω–∞—è –¥–ª—è –≤–∞—Å\n"
        "‚Ä¢ <b>T</b>ime-bound (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏) - —Å –¥–µ–¥–ª–∞–π–Ω–æ–º\n\n"
        "üîß <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å¬ª\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏\n"
        "3. –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç SMART-–æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/goal_add ¬´—Ç–µ–∫—Å—Ç¬ª - –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n"
        "/goals - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "/ab A | B - A/B –∞–Ω–∞–ª–∏–∑\n"
        "/smart scope title | desc | YYYY-MM-DD - SMART-—Ü–µ–ª—å"
    )
    
    await cb.message.edit_text(help_text, reply_markup=back_main_menu(), parse_mode="HTML")
    await cb.answer()


@router.callback_query(F.data == "menu_finance")
async def menu_finance(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å –º–∏–Ω–∏-–æ—Ç—á–µ—Ç–æ–º"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã
    await cb.message.edit_text(
        "ü§ñ <b>AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã...</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        from app.services.finance_analytics import get_finance_summary
        summary = await get_finance_summary(session, db_user.id)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò
        from app.services.llm import deepseek_complete
        try:
            ai_advice = await deepseek_complete(
                f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö: –¥–æ—Ö–æ–¥—ã {summary['monthly_income']}, —Ä–∞—Å—Ö–æ–¥—ã {summary['monthly_expenses']}, –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã {summary['total_creditors']}, –¥–æ–ª–∂–Ω–∏–∫–∏ {summary['total_debtors']}. –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                system="–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                max_tokens=100
            )
            # –ó–∞–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ HTML-—Ç–µ–≥–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            import re
            ai_advice = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', ai_advice)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            if len(ai_advice) > 300:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
                truncated = ai_advice[:300]
                last_period = truncated.rfind('.')
                if last_period > 250:  # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    ai_advice = truncated[:last_period + 1]
                else:
                    ai_advice = truncated + "..."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            ai_advice = ai_advice.replace(". ", ".\n")
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ
            ai_advice = ai_advice.strip()
            
        except Exception:
            ai_advice = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ò–ò"
        
        report_text = f"""üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>

üíµ <b>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>
üìà –î–æ—Ö–æ–¥—ã: {summary['monthly_income']:,.2f} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {summary['monthly_expenses']:,.2f} ‚ÇΩ
üíπ –ë–∞–ª–∞–Ω—Å: {summary['monthly_balance']:,.2f} ‚ÇΩ

üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã:</b> {summary['total_creditors']:,.2f} ‚ÇΩ
üè¶ <b>–î–æ–ª–∂–Ω–∏–∫–∏:</b> {summary['total_debtors']:,.2f} ‚ÇΩ

ü§ñ <b>–°–æ–≤–µ—Ç –ò–ò:</b>
{ai_advice}"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(report_text) > 4000:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ
            main_report = f"""üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>

üíµ <b>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>
üìà –î–æ—Ö–æ–¥—ã: {summary['monthly_income']:,.2f} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {summary['monthly_expenses']:,.2f} ‚ÇΩ
üíπ –ë–∞–ª–∞–Ω—Å: {summary['monthly_balance']:,.2f} ‚ÇΩ

üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã:</b> {summary['total_creditors']:,.2f} ‚ÇΩ
üè¶ <b>–î–æ–ª–∂–Ω–∏–∫–∏:</b> {summary['total_debtors']:,.2f} ‚ÇΩ"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
            await cb.message.edit_text(main_report, reply_markup=finance_menu(), parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –ò–ò –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await cb.message.answer(
                f"ü§ñ <b>–°–æ–≤–µ—Ç –ò–ò:</b>\n\n{ai_advice}",
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
            await cb.message.edit_text(report_text, reply_markup=finance_menu(), parse_mode="HTML")
        
        await cb.answer()


@router.callback_query(F.data == "menu_nutrition")
async def menu_nutrition(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ü–∏—Ç–∞–Ω–∏–µ:", reply_markup=nutrition_menu())
    await cb.answer()


@router.callback_query(F.data == "menu_health")
async def menu_health(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ó–¥–æ—Ä–æ–≤—å–µ:", reply_markup=health_menu())
    await cb.answer()


@router.callback_query(F.data == "goals_list")
async def goals_list(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–ª–∏
        goals = (
            await session.execute(select(Goal).where(Goal.user_id == db_user.id, Goal.status == GoalStatus.active))
        ).scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
        from app.db.models import FinancialGoal
        financial_goals = (
            await session.execute(select(FinancialGoal).where(FinancialGoal.user_id == db_user.id, FinancialGoal.is_active.is_(True)))
        ).scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        all_goals_text = "üéØ <b>–í–∞—à–∏ —Ü–µ–ª–∏:</b>\n\n"
        
        # –û–±—ã—á–Ω—ã–µ —Ü–µ–ª–∏
        if goals:
            all_goals_text += "üìã <b>–û–±—â–∏–µ —Ü–µ–ª–∏:</b>\n"
            for i, goal in enumerate(goals, 1):
                all_goals_text += f"{i}. {goal.title}\n"
            all_goals_text += "\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
        if financial_goals:
            all_goals_text += "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:</b>\n"
            for i, goal in enumerate(financial_goals, 1):
                progress_percentage = (float(goal.current_amount) / float(goal.target_amount)) * 100
                remaining = float(goal.target_amount) - float(goal.current_amount)
                all_goals_text += f"{i}. {goal.name} - {progress_percentage:.1f}% ({goal.current_amount:,.0f}‚ÇΩ / {goal.target_amount:,.0f}‚ÇΩ)\n"
                all_goals_text += f"   üéØ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f} ‚ÇΩ\n"
            all_goals_text += "\n"
        
        if not goals and not financial_goals:
            await cb.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –Ω–µ—Ç", reply_markup=goals_menu())
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ü–µ–ª–µ–π (—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            items = [(g.id, g.title) for g in goals]
            if items:
                await cb.message.edit_text(all_goals_text, reply_markup=goals_list_keyboard(items))
            else:
                await cb.message.edit_text(all_goals_text, reply_markup=goals_menu())
    
    await cb.answer()


@router.callback_query(F.data.startswith("goal_done:"))
async def goal_done(cb: types.CallbackQuery) -> None:
    goal_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        goal = await session.get(Goal, goal_id)
        if goal:
            goal.status = GoalStatus.completed
    await cb.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    await goals_list(cb)


@router.callback_query(F.data.startswith("goal_cancel:"))
async def goal_cancel(cb: types.CallbackQuery) -> None:
    goal_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        goal = await session.get(Goal, goal_id)
        if goal:
            goal.status = GoalStatus.cancelled
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úñ")
    await goals_list(cb)


@router.callback_query(F.data == "finance_export_cb")
async def finance_export_cb(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        out = Path("exports") / f"user_{db_user.id}.xlsx"
        await export_user_data_to_excel(session, db_user.id, out)
    try:
        await cb.message.answer_document(types.FSInputFile(out))  # type: ignore[arg-type]
    except Exception:
        await cb.message.answer("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: " + str(out))
    await cb.answer()


@router.callback_query(F.data == "finance_goals")
async def finance_goals_menu_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π"""
    await cb.message.edit_text(
        "üéØ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π.",
        reply_markup=finance_goals_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "finance_upload_csv")
async def finance_upload_csv(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV"""
    await cb.message.edit_text(
        "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –≤—ã–ø–∏—Å–∫—É:",
        reply_markup=finance_upload_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("bank_"))
async def bank_selection(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞"""
    bank = cb.data.replace("bank_", "")
    bank_names = {
        "alpha": "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫",
        "tbank": "–¢-–ë–∞–Ω–∫",
        "mbank": "MBank",
        "vtb": "–í–¢–ë",
        "gazprom": "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫"
    }
    
    bank_name = bank_names.get(bank, '–ë–∞–Ω–∫')
    
    if bank == "mbank":
        message_text = (
            f"üè¶ <b>{bank_name}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ XLS —Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–æ–π.\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
            "‚ö†Ô∏è <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ MBank:</b>\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç XLS —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã, –¥–æ—Ö–æ–¥—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )
    else:
        message_text = (
            f"üè¶ <b>{bank_name}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–æ–π.\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–æ–±–∞–≤–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã."
        )
    
    await cb.message.edit_text(
        message_text,
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "finance_help")
async def finance_help(cb: types.CallbackQuery) -> None:
    help_text = (
        "üí∞ <b>–†–∞–∑–¥–µ–ª –§–ò–ù–ê–ù–°–´ - –ü–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —É—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤ –∏ –¥–æ–ª–∂–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏\n\n"
        "üîß <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. <b>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥:</b> –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥¬ª\n"
        "2. <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b> –ü–æ–∫—É–ø–∫–∏, –ø–∏—Ç–∞–Ω–∏–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –¥—Ä.\n"
        "3. <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n"
        "4. <b>–≠–∫—Å–ø–æ—Ä—Ç:</b> –ù–∞–∂–º–∏—Ç–µ ¬´üìä –≠–∫—Å–ø–æ—Ä—Ç Excel¬ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏\n\n"
        "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/expense 199.99 –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø–∏—Å–∞–Ω–∏–µ - –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/finance_export - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n\n"
        "üè¶ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–∞–Ω–∫–∏:</b>\n"
        "‚Ä¢ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫\n"
        "‚Ä¢ –¢-–ë–∞–Ω–∫\n"
        "‚Ä¢ MBank\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ —Ç—Ä–∞—Ç—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ"
    )
    
    await cb.message.edit_text(help_text, reply_markup=back_main_menu(), parse_mode="HTML")
    await cb.answer()


@router.callback_query(F.data == "finance_income")
async def finance_income(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤"""
    await cb.message.edit_text(
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=finance_income_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "challenges_help")
async def challenges_help(cb: types.CallbackQuery) -> None:
    help_text = (
        "üèÜ <b>–†–∞–∑–¥–µ–ª –ß–ï–õ–õ–ï–ù–î–ñ–ò - –ü–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n\n"
        "üîß <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        "4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "5. –û—Ç–º–µ—Ç—å—Ç–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã —á–µ–ª–ª–µ–Ω–¥–∂–µ–π:</b>\n"
        "‚Ä¢ 30 –¥–Ω–µ–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\n"
        "‚Ä¢ 21 –¥–µ–Ω—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢ 7 –¥–Ω–µ–π —Ä–∞–Ω–Ω–µ–≥–æ –ø–æ–¥—ä–µ–º–∞\n"
        "‚Ä¢ –ú–µ—Å—è—Ü –±–µ–∑ –ø–æ–∫—É–ø–æ–∫\n\n"
        "üì± <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞—Ç\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö"
    )
    
    await cb.message.edit_text(help_text, reply_markup=back_main_menu(), parse_mode="HTML")
    await cb.answer()


@router.callback_query(F.data == "finance_creditors")
async def finance_creditors(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
        from app.services.finance_analytics import get_creditors
        creditors = await get_creditors(session, db_user.id)
        
        if not creditors:
            await cb.message.edit_text(
                "üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞", callback_data="creditor_add")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")]
                ]),
                parse_mode="HTML"
            )
        else:
            text = "üí∏ <b>–í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã:</b>\n\n"
            for creditor in creditors:
                text += f"üë§ <b>{creditor['name']}</b>\n"
                text += f"üí∞ –°—É–º–º–∞: {creditor['amount']:,.2f} ‚ÇΩ\n"
                text += f"üìÖ –°—Ä–æ–∫: {creditor['due_date']}\n\n"
            
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
            keyboard = []
            for creditor in creditors:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë§ {creditor['name']} - {creditor['amount']:,.0f}‚ÇΩ",
                        callback_data=f"creditor_view:{creditor['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞", callback_data="creditor_add")])
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")])
            
            await cb.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    await cb.answer()


@router.callback_query(F.data == "motivation_help")
async def motivation_help(cb: types.CallbackQuery) -> None:
    help_text = (
        "üî• <b>–†–∞–∑–¥–µ–ª –ú–û–¢–ò–í–ê–¶–ò–Ø - –ü–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>\n"
        "‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–Ω–∏–µ\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –º–∏—Å—Å–∏—é –∂–∏–∑–Ω–∏\n"
        "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –≥–æ–¥–æ–≤—ã–µ —Ü–µ–ª–∏\n"
        "‚Ä¢ –í—ã—è–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "üîß <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. <b>–í–∏–¥–µ–Ω–∏–µ:</b> –û–ø–∏—à–∏—Ç–µ, –∫–µ–º —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å\n"
        "2. <b>–ú–∏—Å—Å–∏—è:</b> –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å –≤ –∂–∏–∑–Ω–∏\n"
        "3. <b>–¶–µ–Ω–Ω–æ—Å—Ç–∏:</b> –í—ã–±–µ—Ä–∏—Ç–µ 3-5 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤\n"
        "4. <b>–ì–æ–¥–æ–≤–∞—è —Ü–µ–ª—å:</b> –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω—É—é —Ü–µ–ª—å –≥–æ–¥–∞\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ:</b>\n"
        "‚Ä¢ <b>–í–∏–¥–µ–Ω–∏–µ:</b> ¬´–Ø - —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π...¬ª\n"
        "‚Ä¢ <b>–ú–∏—Å—Å–∏—è:</b> ¬´–ú–æ—è —Ü–µ–ª—å - –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º...¬ª\n"
        "‚Ä¢ <b>–¶–µ–Ω–Ω–æ—Å—Ç–∏:</b> –ß–µ—Å—Ç–Ω–æ—Å—Ç—å, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Ä–æ—Å—Ç\n\n"
        "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/motivation - –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/pillars - 7 –æ–ø–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n\n"
        "üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤–∏–¥–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –º–∏—Å—Å–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"
    )
    
    await cb.message.edit_text(help_text, reply_markup=back_main_menu(), parse_mode="HTML")
    await cb.answer()


@router.callback_query(F.data == "finance_debtors")
async def finance_debtors(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–æ–≤
        from app.services.finance_analytics import get_debtors
        debtors = await get_debtors(session, db_user.id)
        
        if not debtors:
            await cb.message.edit_text(
                "üè¶ <b>–î–æ–ª–∂–Ω–∏–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞", callback_data="debtor_add")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")]
                ]),
                parse_mode="HTML"
            )
        else:
            text = "üè¶ <b>–í–∞—à–∏ –¥–æ–ª–∂–Ω–∏–∫–∏:</b>\n\n"
            for debtor in debtors:
                text += f"üë§ <b>{debtor['name']}</b>\n"
                text += f"üí∞ –°—É–º–º–∞: {debtor['amount']:,.2f} ‚ÇΩ\n"
                text += f"üìÖ –°—Ä–æ–∫: {debtor['due_date']}\n\n"
            
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–ª–∂–Ω–∏–∫–æ–≤
            keyboard = []
            for debtor in debtors:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë§ {debtor['name']} - {debtor['amount']:,.0f}‚ÇΩ",
                        callback_data=f"debtor_view:{debtor['id']}"
                    )
                ])
            keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–∏–∫–∞", callback_data="debtor_add")])
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")])
            
            await cb.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    await cb.answer()


