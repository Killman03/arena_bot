from __future__ import annotations

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from decimal import Decimal

from app.db.session import session_scope
from app.db.models import User, Income
from app.keyboards.common import back_main_menu
from app.services.finance_analytics import get_finance_summary

router = Router()


class NutritionBudgetStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    waiting_for_budget_type = State()
    waiting_for_percentage = State()
    waiting_for_fixed_amount = State()


@router.callback_query(F.data == "nutrition_budget")
async def nutrition_budget_menu(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞
            current_budget_text = ""
            if db_user.food_budget_type == "percentage_income" and db_user.food_budget_percentage:
                current_budget_text = f"\n\n<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\nüìä {db_user.food_budget_percentage}% –æ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"
            elif db_user.food_budget_type == "fixed_amount" and db_user.food_budget_amount:
                current_budget_text = f"\n\n<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\nüí∞ {db_user.food_budget_amount:,.2f} ‚ÇΩ –≤ –º–µ—Å—è—Ü"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            summary = await get_finance_summary(session, db_user.id)
            
            budget_text = f"""üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ç –Ω–∞ –µ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è.

üíµ <b>–í–∞—à –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥:</b> {summary['monthly_income']:,.2f} ‚ÇΩ
üìâ <b>–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</b> {summary['monthly_expenses']:,.2f} ‚ÇΩ{current_budget_text}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—é–¥–∂–µ—Ç–∞:"""

            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞", callback_data="budget_type_percentage"),
                        InlineKeyboardButton(text="üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞", callback_data="budget_type_fixed")
                    ],
                    [
                        InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="budget_reset"),
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_nutrition")
                    ]
                ]
            )
            
            await cb.message.edit_text(budget_text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data == "budget_type_percentage")
async def budget_type_percentage(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞"""
    await cb.message.edit_text(
        "üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ.\n\n"
        "<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ 15-20% - —ç–∫–æ–Ω–æ–º–Ω—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ 20-25% - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ 25-30% - –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 5 –¥–æ 50):",
        parse_mode="HTML"
    )
    await state.set_state(NutritionBudgetStates.waiting_for_percentage)
    await cb.answer()


@router.message(NutritionBudgetStates.waiting_for_percentage)
async def process_percentage(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    try:
        percentage = int(message.text)
        if percentage < 5 or percentage > 50:
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 50. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
        
        user = message.from_user
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db_user.food_budget_type = "percentage_income"
            db_user.food_budget_percentage = percentage
            db_user.food_budget_amount = None  # –û—á–∏—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
            
            await session.commit()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É
            summary = await get_finance_summary(session, db_user.id)
            estimated_amount = summary['monthly_income'] * percentage / 100
            
            success_text = f"""‚úÖ <b>–ë—é–¥–∂–µ—Ç –ø–∏—Ç–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>

üìä <b>–¢–∏–ø:</b> –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞
üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {percentage}%
üí∞ <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞:</b> {estimated_amount:,.2f} ‚ÇΩ/–º–µ—Å—è—Ü

–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –±—é–¥–∂–µ—Ç –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è."""

            await message.answer(
                success_text,
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50.")
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data == "budget_type_fixed")
async def budget_type_fixed(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
    await cb.message.edit_text(
        "üí∞ <b>–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ –≤ –º–µ—Å—è—Ü.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã:</b>\n"
        "‚Ä¢ 8,000-12,000 ‚ÇΩ - –±–∞–∑–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
        "‚Ä¢ 12,000-18,000 ‚ÇΩ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
        "‚Ä¢ 18,000-25,000 ‚ÇΩ - —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:",
        parse_mode="HTML"
    )
    await state.set_state(NutritionBudgetStates.waiting_for_fixed_amount)
    await cb.answer()


@router.message(NutritionBudgetStates.waiting_for_fixed_amount)
async def process_fixed_amount(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    try:
        amount = float(message.text)
        if amount < 1000 or amount > 100000:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1,000 –¥–æ 100,000 —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
        
        user = message.from_user
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db_user.food_budget_type = "fixed_amount"
            db_user.food_budget_amount = Decimal(str(amount))
            db_user.food_budget_percentage = None  # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
            
            await session.commit()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            summary = await get_finance_summary(session, db_user.id)
            percentage_of_income = (amount / summary['monthly_income'] * 100) if summary['monthly_income'] > 0 else 0
            
            success_text = f"""‚úÖ <b>–ë—é–¥–∂–µ—Ç –ø–∏—Ç–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>

üí∞ <b>–¢–∏–ø:</b> –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
üìä <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ/–º–µ—Å—è—Ü
üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞:</b> {percentage_of_income:.1f}%

–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –±—é–¥–∂–µ—Ç –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è."""

            await message.answer(
                success_text,
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data == "budget_reset")
async def budget_reset(cb: types.CallbackQuery) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            db_user.food_budget_type = None
            db_user.food_budget_percentage = None
            db_user.food_budget_amount = None
            
            await session.commit()
            
            await cb.message.edit_text(
                "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ —É—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


async def get_user_food_budget(session, user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db_user = (await session.execute(select(User).where(User.id == user_id))).scalar_one()
    
    if not db_user.food_budget_type:
        return {"type": None, "amount": None, "description": "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"}
    
    if db_user.food_budget_type == "percentage_income":
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Ö–æ–¥–∞
        summary = await get_finance_summary(session, user_id)
        amount = summary['monthly_income'] * db_user.food_budget_percentage / 100
        return {
            "type": "percentage",
            "percentage": db_user.food_budget_percentage,
            "amount": amount,
            "description": f"{db_user.food_budget_percentage}% –æ—Ç –¥–æ—Ö–æ–¥–∞ (~{amount:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü)"
        }
    
    elif db_user.food_budget_type == "fixed_amount":
        return {
            "type": "fixed",
            "amount": float(db_user.food_budget_amount),
            "description": f"{db_user.food_budget_amount:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü"
        }
    
    return {"type": None, "amount": None, "description": "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"}
