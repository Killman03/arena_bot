from __future__ import annotations

from datetime import date, datetime
from typing import Optional

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, func
from sqlalchemy.orm import joinedload

from app.db.models import Book, BookStatus, BookQuote, BookThought, User
from app.db.session import session_scope
from app.keyboards.common import (
    books_menu, book_status_menu, book_add_status_menu, book_detail_keyboard, book_list_keyboard,
    book_edit_keyboard, book_rating_keyboard, book_ai_menu, back_main_menu
)
from app.services.llm import deepseek_complete

router = Router()


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥
class BookFSM(StatesGroup):
    waiting_title = State()
    waiting_author = State()
    waiting_description = State()
    waiting_genre = State()
    waiting_total_pages = State()
    waiting_status = State()
    waiting_quote = State()
    waiting_thought = State()
    waiting_rating = State()
    waiting_ai_question = State()


# FSM –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç
class BookQuoteFSM(StatesGroup):
    waiting_quote = State()
    waiting_book_selection = State()
    waiting_page_number = State()


# FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class BookEditFSM(StatesGroup):
    waiting_title = State()
    waiting_author = State()
    waiting_description = State()
    waiting_genre = State()
    waiting_total_pages = State()
    waiting_current_page = State()
    waiting_start_date = State()
    waiting_finish_date = State()
    waiting_notes = State()


@router.callback_query(F.data == "menu_books")
async def menu_books(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –∫–Ω–∏–≥"""
    await cb.message.edit_text(
        "üìö <b>–†–∞–∑–¥–µ–ª –∫–Ω–∏–≥</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–µ–Ω–∏—è",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "books_add")
async def books_add_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏"""
    await state.set_state(BookFSM.waiting_title)
    await cb.message.edit_text(
        "üìö <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(BookFSM.waiting_title)
async def books_add_title(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
    if data.get("search_mode"):
        # –≠—Ç–æ –ø–æ–∏—Å–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –¥—Ä—É–≥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        return
    
    title = message.text.strip()
    if len(title) > 256:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 256 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=title)
    await state.set_state(BookFSM.waiting_author)
    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω):",
        reply_markup=back_main_menu()
    )


@router.message(BookFSM.waiting_author)
async def books_add_author(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    author = message.text.strip()
    if author == "-":
        author = None
    elif len(author) > 256:
        await message.answer("–ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 256 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(author=author)
    await state.set_state(BookFSM.waiting_description)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ):",
        reply_markup=back_main_menu()
    )


@router.message(BookFSM.waiting_description)
async def books_add_description(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    description = message.text.strip()
    if description == "-":
        description = None
    
    await state.update_data(description=description)
    await state.set_state(BookFSM.waiting_genre)
    await message.answer(
        "üìö –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω):",
        reply_markup=back_main_menu()
    )


@router.message(BookFSM.waiting_genre)
async def books_add_genre(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏"""
    genre = message.text.strip()
    if genre == "-":
        genre = None
    elif len(genre) > 100:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(genre=genre)
    await state.set_state(BookFSM.waiting_total_pages)
    await message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–Ω–∏–≥–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ):",
        reply_markup=back_main_menu()
    )


@router.message(BookFSM.waiting_total_pages)
async def books_add_pages(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    pages_text = message.text.strip()
    total_pages = None
    
    if pages_text != "-":
        try:
            total_pages = int(pages_text)
            if total_pages <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'.")
            return
    
    await state.update_data(total_pages=total_pages)
    await state.set_state(BookFSM.waiting_status)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    await message.answer(
        "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏:",
        reply_markup=book_add_status_menu()
    )


@router.callback_query(F.data.startswith("book_add_status_"))
async def books_add_status(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    status_map = {
        "book_add_status_want_to_read": BookStatus.want_to_read,
        "book_add_status_reading": BookStatus.reading,
        "book_add_status_completed": BookStatus.completed,
        "book_add_status_abandoned": BookStatus.abandoned
    }
    
    status = status_map.get(cb.data)
    if not status:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        return
    
    data = await state.get_data()
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É
        book = Book(
            user_id=db_user.id,
            title=data["title"],
            author=data["author"],
            description=data["description"],
            genre=data["genre"],
            total_pages=data["total_pages"],
            status=status
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status == BookStatus.reading:
            book.start_date = date.today()
        elif status == BookStatus.completed:
            book.start_date = date.today()
            book.finish_date = date.today()
        
        session.add(book)
        await session.commit()
        
        # –ü–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
        book_id = book.id
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    status_text = {
        BookStatus.want_to_read: "üìö –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è",
        BookStatus.reading: "üìñ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —á–∏—Ç–∞–µ–º–∞—è",
        BookStatus.completed: "‚úÖ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è",
        BookStatus.abandoned: "‚ùå –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –±—Ä–æ—à–µ–Ω–Ω–∞—è"
    }[status]
    
    await cb.message.edit_text(
        f"üìö <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"<b>–ê–≤—Ç–æ—Ä:</b> {data['author'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –∫–Ω–∏–≥–æ–π.",
        reply_markup=book_detail_keyboard(book_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "books_want_to_read")
async def books_want_to_read(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        books = (await session.execute(
            select(Book).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.want_to_read
            ).order_by(Book.created_at.desc())
        )).scalars().all()
    
    if not books:
        await cb.message.edit_text(
            "üìö <b>–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —á—Ç–µ–Ω–∏—è</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É!",
            reply_markup=books_menu(),
            parse_mode="HTML"
        )
    else:
        book_list = [(book.id, book.title, book.author) for book in books]
        await cb.message.edit_text(
            "üìö <b>–ö–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}",
            reply_markup=book_list_keyboard(book_list, "want_to_read"),
            parse_mode="HTML"
        )
    
    # –£–±–∏—Ä–∞–µ–º await cb.answer() —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text


@router.callback_query(F.data == "books_reading")
async def books_reading(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∏—Ç–∞–µ–º—ã—Ö –∫–Ω–∏–≥"""
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        books = (await session.execute(
            select(Book).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.reading
            ).order_by(Book.start_date.desc())
        )).scalars().all()
    
    if not books:
        await cb.message.edit_text(
            "üìñ <b>–ß–∏—Ç–∞–µ–º—ã–µ –∫–Ω–∏–≥–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É!",
            reply_markup=books_menu(),
            parse_mode="HTML"
        )
    else:
        book_list = [(book.id, book.title, book.author) for book in books]
        await cb.message.edit_text(
            "üìñ <b>–ß–∏—Ç–∞–µ–º—ã–µ –∫–Ω–∏–≥–∏</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}",
            reply_markup=book_list_keyboard(book_list, "reading"),
            parse_mode="HTML"
        )
    
    # –£–±–∏—Ä–∞–µ–º await cb.answer() —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text


@router.callback_query(F.data == "books_completed")
async def books_completed(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥"""
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        books = (await session.execute(
            select(Book).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.completed
            ).order_by(Book.finish_date.desc())
        )).scalars().all()
    
    if not books:
        await cb.message.edit_text(
            "‚úÖ <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —á—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏!",
            reply_markup=books_menu(),
            parse_mode="HTML"
        )
    else:
        book_list = [(book.id, book.title, book.author) for book in books]
        await cb.message.edit_text(
            "‚úÖ <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}",
            reply_markup=book_list_keyboard(book_list, "completed"),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data.startswith("book_view:"))
async def book_view(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ"""
    book_id = int(cb.data.split(":")[1])
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        book = (await session.execute(
            select(Book)
            .options(joinedload(Book.quotes), joinedload(Book.thoughts))
            .where(Book.id == book_id, Book.user_id == db_user.id)
        )).unique().scalar_one_or_none()
        
        if not book:
            await cb.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        quotes_count = len(book.quotes)
        thoughts_count = len(book.thoughts)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
        progress_text = ""
        if book.status == BookStatus.reading and book.current_page and book.total_pages:
            progress_percent = int((book.current_page / book.total_pages) * 100)
            progress_text = f"\nüìñ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {book.current_page}/{book.total_pages} ({progress_percent}%)"
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = {
            BookStatus.want_to_read: "üìö",
            BookStatus.reading: "üìñ",
            BookStatus.completed: "‚úÖ",
            BookStatus.abandoned: "‚ùå"
        }[book.status]
        
        status_text = {
            BookStatus.want_to_read: "–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å",
            BookStatus.reading: "–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å",
            BookStatus.completed: "–ü—Ä–æ—á–∏—Ç–∞–Ω–∞",
            BookStatus.abandoned: "–ë—Ä–æ—Å–∏–ª —á–∏—Ç–∞—Ç—å"
        }[book.status]
        
        # –†–µ–π—Ç–∏–Ω–≥
        rating_text = ""
        if book.rating:
            rating_text = f"\n‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {'‚≠ê' * book.rating}"
        
        # –î–∞—Ç—ã
        dates_text = ""
        if book.start_date:
            dates_text += f"\nüìÖ <b>–ù–∞—á–∞–ª —á–∏—Ç–∞—Ç—å:</b> {book.start_date.strftime('%d.%m.%Y')}"
        if book.finish_date:
            dates_text += f"\n‚úÖ <b>–ó–∞–≤–µ—Ä—à–∏–ª:</b> {book.finish_date.strftime('%d.%m.%Y')}"
        
        # –¶–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏
        content_text = ""
        if quotes_count > 0:
            content_text += f"\nüí¨ <b>–¶–∏—Ç–∞—Ç:</b> {quotes_count}"
        if thoughts_count > 0:
            content_text += f"\nüí≠ <b>–ú—ã—Å–ª–µ–π:</b> {thoughts_count}"
        
        await cb.message.edit_text(
            f"{status_emoji} <b>{book.title}</b>\n\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> {book.author or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>–ñ–∞–Ω—Ä:</b> {book.genre or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü:</b> {book.total_pages or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            f"{rating_text}"
            f"{dates_text}"
            f"{progress_text}"
            f"{content_text}\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{book.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'}",
            reply_markup=book_detail_keyboard(book_id),
            parse_mode="HTML"
        )
    
    # –£–±–∏—Ä–∞–µ–º await cb.answer() —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text


@router.callback_query(F.data.startswith("book_add_quote:"))
async def book_add_quote_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã"""
    book_id = int(cb.data.split(":")[1])
    await state.set_state(BookFSM.waiting_quote)
    await state.update_data(book_id=book_id)
    
    await cb.message.edit_text(
        "üí¨ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(BookFSM.waiting_quote)
async def book_add_quote_text(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã"""
    quote_text = message.text.strip()
    if not quote_text:
        await message.answer("–¶–∏—Ç–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    
    data = await state.get_data()
    book_id = data["book_id"]
    
    async with session_scope() as session:
        quote = BookQuote(
            book_id=book_id,
            quote_text=quote_text
        )
        session.add(quote)
        await session.commit()
    
    await state.clear()
    
    await message.answer(
        "üí¨ <b>–¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"¬´{quote_text}¬ª\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ.",
        reply_markup=book_detail_keyboard(book_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("book_add_thought:"))
async def book_add_thought_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏"""
    book_id = int(cb.data.split(":")[1])
    await state.set_state(BookFSM.waiting_thought)
    await state.update_data(book_id=book_id)
    
    await cb.message.edit_text(
        "üí≠ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å –∏–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ –∫–Ω–∏–≥–µ:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(BookFSM.waiting_thought)
async def book_add_thought_text(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –º—ã—Å–ª–∏"""
    thought_text = message.text.strip()
    if not thought_text:
        await message.answer("–ú—ã—Å–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return
    
    data = await state.get_data()
    book_id = data["book_id"]
    
    async with session_scope() as session:
        thought = BookThought(
            book_id=book_id,
            thought_text=thought_text,
            thought_type="insight"
        )
        session.add(thought)
        await session.commit()
    
    await state.clear()
    
    await message.answer(
        "üí≠ <b>–ú—ã—Å–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"¬´{thought_text}¬ª\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –º—ã—Å–ª–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ.",
        reply_markup=book_detail_keyboard(book_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("book_ai_question:"))
async def book_ai_question_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫ –ò–ò –æ –∫–Ω–∏–≥–µ"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await cb.answer()
    
    book_id = int(cb.data.split(":")[1])
    await state.set_state(BookFSM.waiting_ai_question)
    await state.update_data(book_id=book_id)
    
    await cb.message.edit_text(
        "ü§ñ <b>–í–æ–ø—Ä–æ—Å –∫ –ò–ò –æ –∫–Ω–∏–≥–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
        reply_markup=book_ai_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("book_ai_"))
async def book_ai_question_handle(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await cb.answer()
    
    question_type = cb.data.split("_")[1]
    data = await state.get_data()
    book_id = data["book_id"]
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    async with session_scope() as session:
        book = (await session.execute(
            select(Book)
            .options(joinedload(Book.quotes), joinedload(Book.thoughts))
            .where(Book.id == book_id)
        )).unique().scalar_one()
    
    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    question_map = {
        "what_is": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –∫–Ω–∏–≥–∞? –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ.",
        "main_ideas": "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏ –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –∫–Ω–∏–≥–µ?",
        "who_for": "–ö–æ–º—É –ø–æ–¥–æ–π–¥–µ—Ç —ç—Ç–∞ –∫–Ω–∏–≥–∞? –ö—Ç–æ –ø–æ–ª—É—á–∏—Ç –æ—Ç –Ω–µ–µ –Ω–∞–∏–±–æ–ª—å—à—É—é –ø–æ–ª—å–∑—É?",
        "summary": "–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –≤ 3-4 –∞–±–∑–∞—Ü–∞.",
        "quotes_analysis": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ.",
        "personal_advice": "–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ —á—Ç–µ–Ω–∏—é —ç—Ç–æ–π –∫–Ω–∏–≥–∏."
    }
    
    question = question_map.get(question_type, "–†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–π –∫–Ω–∏–≥–µ.")
    
    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    context = f"–ö–Ω–∏–≥–∞: {book.title}"
    if book.author:
        context += f" (–∞–≤—Ç–æ—Ä: {book.author})"
    if book.description:
        context += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {book.description}"
    if book.genre:
        context += f"\n–ñ–∞–Ω—Ä: {book.genre}"
    
    # –î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if book.quotes:
        quotes_text = "\n–¶–∏—Ç–∞—Ç—ã:\n" + "\n".join([f"¬´{q.quote_text}¬ª" for q in book.quotes[:3]])
        context += quotes_text
    
    if book.thoughts:
        thoughts_text = "\n–ú—ã—Å–ª–∏ —á–∏—Ç–∞—Ç–µ–ª—è:\n" + "\n".join([f"‚Ä¢ {t.thought_text}" for t in book.thoughts[:3]])
        context += thoughts_text
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await cb.message.edit_text(
        f"ü§ñ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –ò–ò...</b>\n\n"
        f"<b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–∏–≥—É...\n"
        "üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ\n"
        "üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n"
        "ü§ñ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
        reply_markup=book_detail_keyboard(book_id),
        parse_mode="HTML"
    )
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    import asyncio
    await asyncio.sleep(0.5)
    
    # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    try:
        ai_response = await deepseek_complete(
            f"{question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}",
            system="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∑–≤–µ–∑–¥ ‚≠ê –≤–º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞ *. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏."
        )
        
        # –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç –ò–ò –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        ai_response_clean = ai_response.replace('*', '‚≠ê')  # –ó–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ —ç–º–æ–¥–∑–∏
        ai_response_clean = ai_response_clean.replace('<', '&lt;')  # –ó–∞—â–∏—Ç–∞ –æ—Ç HTML
        ai_response_clean = ai_response_clean.replace('>', '&gt;')  # –ó–∞—â–∏—Ç–∞ –æ—Ç HTML
        
        # –ó–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await loading_message.edit_text(
            f"ü§ñ <b>–û—Ç–≤–µ—Ç –ò–ò –æ –∫–Ω–∏–≥–µ</b>\n\n"
            f"<b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\n"
            f"<b>–û—Ç–≤–µ—Ç:</b>\n{ai_response_clean}",
            reply_markup=book_detail_keyboard(book_id),
            parse_mode="HTML"
        )
    except Exception as e:
        # –ó–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await loading_message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò</b>\n\n"
            f"<b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=book_detail_keyboard(book_id),
            parse_mode="HTML"
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("book_view_quotes:"))
async def book_view_quotes(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ –∫–Ω–∏–≥–µ"""
    book_id = int(cb.data.split(":")[1])
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        book = (await session.execute(
            select(Book).where(Book.id == book_id, Book.user_id == db_user.id)
        )).scalar_one_or_none()
        
        if not book:
            await cb.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        quotes = (await session.execute(
            select(BookQuote).where(BookQuote.book_id == book_id).order_by(BookQuote.created_at.desc())
        )).scalars().all()
    
    if not quotes:
        await cb.message.edit_text(
            f"üìö <b>–¶–∏—Ç–∞—Ç—ã –ø–æ –∫–Ω–∏–≥–µ ¬´{book.title}¬ª</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –ø–æ —ç—Ç–æ–π –∫–Ω–∏–≥–µ.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É!",
            reply_markup=book_detail_keyboard(book_id),
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º
    quotes_text = f"üìö <b>–¶–∏—Ç–∞—Ç—ã –ø–æ –∫–Ω–∏–≥–µ ¬´{book.title}¬ª</b>\n\n"
    quotes_text += f"–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: {len(quotes)}\n\n"
    
    for i, quote in enumerate(quotes, 1):
        quotes_text += f"<b>{i}.</b> ¬´{quote.quote_text}¬ª\n"
        if quote.page_number:
            quotes_text += f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {quote.page_number}\n"
        if quote.context:
            quotes_text += f"   üí≠ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {quote.context}\n"
        quotes_text += f"   üìÖ {quote.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–µ"
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–µ", callback_data=f"book_view:{book_id}")
            ]
        ]
    )
    
    await cb.message.edit_text(
        quotes_text,
        reply_markup=back_keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("book_view_thoughts:"))
async def book_view_thoughts(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º—ã—Å–ª–∏ –ø–æ –∫–Ω–∏–≥–µ"""
    book_id = int(cb.data.split(":")[1])
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        book = (await session.execute(
            select(Book).where(Book.id == book_id, Book.user_id == db_user.id)
        )).scalar_one_or_none()
        
        if not book:
            await cb.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        thoughts = (await session.execute(
            select(BookThought).where(BookThought.book_id == book_id).order_by(BookThought.created_at.desc())
        )).scalars().all()
    
    if not thoughts:
        await cb.message.edit_text(
            f"üí≠ <b>–ú—ã—Å–ª–∏ –ø–æ –∫–Ω–∏–≥–µ ¬´{book.title}¬ª</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π –ø–æ —ç—Ç–æ–π –∫–Ω–∏–≥–µ.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –º—ã—Å–ª—å!",
            reply_markup=book_detail_keyboard(book_id),
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º—ã—Å–ª—è–º
    thoughts_text = f"üí≠ <b>–ú—ã—Å–ª–∏ –ø–æ –∫–Ω–∏–≥–µ ¬´{book.title}¬ª</b>\n\n"
    thoughts_text += f"–í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {len(thoughts)}\n\n"
    
    for i, thought in enumerate(thoughts, 1):
        thoughts_text += f"<b>{i}.</b> {thought.thought_text}\n"
        thoughts_text += f"   üè∑Ô∏è –¢–∏–ø: {thought.thought_type}\n"
        thoughts_text += f"   üìÖ {thought.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–µ"
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–µ", callback_data=f"book_view:{book_id}")
            ]
        ]
    )
    
    await cb.message.edit_text(
        thoughts_text,
        reply_markup=back_keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "books_stats")
async def books_stats(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á—Ç–µ–Ω–∏—è"""
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_books = (await session.execute(
            select(func.count(Book.id)).where(Book.user_id == db_user.id)
        )).scalar()
        
        want_to_read = (await session.execute(
            select(func.count(Book.id)).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.want_to_read
            )
        )).scalar()
        
        reading = (await session.execute(
            select(func.count(Book.id)).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.reading
            )
        )).scalar()
        
        completed = (await session.execute(
            select(func.count(Book.id)).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.completed
            )
        )).scalar()
        
        abandoned = (await session.execute(
            select(func.count(Book.id)).where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.abandoned
            )
        )).scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–∏—Ç–∞—Ç–∞–º –∏ –º—ã—Å–ª—è–º
        total_quotes = (await session.execute(
            select(func.count(BookQuote.id))
            .join(Book)
            .where(Book.user_id == db_user.id)
        )).scalar()
        
        total_thoughts = (await session.execute(
            select(func.count(BookThought.id))
            .join(Book)
            .where(Book.user_id == db_user.id)
        )).scalar()
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
        avg_rating = (await session.execute(
            select(func.avg(Book.rating))
            .where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.completed,
                Book.rating.isnot(None)
            )
        )).scalar()
        
        avg_rating_text = f"{avg_rating:.1f}‚≠ê" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        
        # –ö–Ω–∏–≥–∏ —Å –ª—É—á—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        top_books = (await session.execute(
            select(Book.title, Book.rating)
            .where(
                Book.user_id == db_user.id,
                Book.status == BookStatus.completed,
                Book.rating.isnot(None)
            )
            .order_by(Book.rating.desc())
            .limit(3)
        )).all()
        
        top_books_text = ""
        if top_books:
            top_books_text = "\n\n<b>–¢–æ–ø-3 –∫–Ω–∏–≥–∏:</b>\n"
            for i, (title, rating) in enumerate(top_books, 1):
                top_books_text += f"{i}. {title} - {'‚≠ê' * rating}\n"
    
    await cb.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è</b>\n\n"
        f"üìö <b>–í—Å–µ–≥–æ –∫–Ω–∏–≥:</b> {total_books}\n"
        f"üìñ <b>–•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å:</b> {want_to_read}\n"
        f"üìñ <b>–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å:</b> {reading}\n"
        f"‚úÖ <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–æ:</b> {completed}\n"
        f"‚ùå <b>–ë—Ä–æ—à–µ–Ω–æ:</b> {abandoned}\n\n"
        f"üí¨ <b>–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç:</b> {total_quotes}\n"
        f"üí≠ <b>–í—Å–µ–≥–æ –º—ã—Å–ª–µ–π:</b> {total_thoughts}\n"
        f"‚≠ê <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {avg_rating_text}"
        f"{top_books_text}",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


# ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

@router.callback_query(F.data.startswith("book_edit:"))
async def book_edit_start(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    book_id = int(cb.data.split(":")[1])
    await cb.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=book_edit_keyboard(book_id),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("book_delete_confirm:"))
async def book_delete_confirm(cb: types.CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
    book_id = int(cb.data.split(":")[1])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"book_delete:{book_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"book_view:{book_id}")
            ]
        ]
    )
    
    await cb.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?\n"
        "–í—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("book_delete:"))
async def book_delete(cb: types.CallbackQuery) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É"""
    book_id = int(cb.data.split(":")[1])
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        book = (await session.execute(
            select(Book).where(Book.id == book_id, Book.user_id == db_user.id)
        )).scalar_one_or_none()
        
        if not book:
            await cb.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        book_title = book.title
        session.delete(book)
        await session.commit()
    
    await cb.message.edit_text(
        f"üóëÔ∏è <b>–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
        f"–ö–Ω–∏–≥–∞ ¬´{book_title}¬ª –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("book_change_status:"))
async def book_change_status_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏"""
    book_id = int(cb.data.split(":")[1])
    await state.update_data(book_id=book_id)
    await cb.message.edit_text(
        "üìñ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=book_status_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("book_rate:"))
async def book_rate_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É –∫–Ω–∏–≥–∏"""
    book_id = int(cb.data.split(":")[1])
    await state.update_data(book_id=book_id)
    await cb.message.edit_text(
        "‚≠ê <b>–û—Ü–µ–Ω–∫–∞ –∫–Ω–∏–≥–∏</b>\n\n"
        "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
        reply_markup=book_rating_keyboard(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("book_rate_"))
async def book_rate_handle(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫—É –∫–Ω–∏–≥–∏"""
    rating = int(cb.data.split("_")[2])
    user = cb.from_user
    
    # –ü–æ–ª—É—á–∏—Ç—å book_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    book_id = data.get("book_id")
    
    if not book_id:
        await cb.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–∏–≥—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏.",
            reply_markup=books_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∫ –∫–Ω–∏–≥–µ
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        book = (await session.execute(
            select(Book).where(Book.id == book_id, Book.user_id == db_user.id)
        )).scalar_one_or_none()
        
        if not book:
            await cb.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=books_menu(),
                parse_mode="HTML"
            )
            await cb.answer()
            return
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
        book.rating = rating
        await session.commit()
    
    await state.clear()
    
    await cb.message.edit_text(
        f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞ {rating} –∑–≤–µ–∑–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!</b>\n\n"
        f"–ö–Ω–∏–≥–∞ ¬´{book.title}¬ª –ø–æ–ª—É—á–∏–ª–∞ –æ—Ü–µ–Ω–∫—É {'‚≠ê' * rating}",
        reply_markup=book_detail_keyboard(book_id),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "book_rating_cancel")
async def book_rating_cancel(cb: types.CallbackQuery) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∫–Ω–∏–≥–∏"""
    await cb.message.edit_text(
        "‚ùå <b>–û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ–∑–∂–µ.",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "book_ai_back")
async def book_ai_back(cb: types.CallbackQuery) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –º–µ–Ω—é –ò–ò"""
    await cb.message.edit_text(
        "üìö <b>–†–∞–∑–¥–µ–ª –∫–Ω–∏–≥</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–µ–Ω–∏—è",
        reply_markup=books_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("book_status_"))
async def book_change_status_apply(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏"""
    status_map = {
        "book_status_want_to_read": BookStatus.want_to_read,
        "book_status_reading": BookStatus.reading,
        "book_status_completed": BookStatus.completed,
        "book_status_abandoned": BookStatus.abandoned
    }
    
    status = status_map.get(cb.data)
    if not status:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        return
    
    data = await state.get_data()
    book_id = data.get("book_id")
    
    if not book_id:
        await cb.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–∏–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
            reply_markup=books_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    user = cb.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        book = (await session.execute(
            select(Book).where(Book.id == book_id, Book.user_id == db_user.id)
        )).scalar_one_or_none()
        
        if not book:
            await cb.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=books_menu(),
                parse_mode="HTML"
            )
            await cb.answer()
            return
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—ã
        old_status = book.status
        book.status = status
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if status == BookStatus.reading and not book.start_date:
            book.start_date = date.today()
        elif status == BookStatus.completed:
            if not book.start_date:
                book.start_date = date.today()
            book.finish_date = date.today()
        
        await session.commit()
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    status_text = {
        BookStatus.want_to_read: "üìö –•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å",
        BookStatus.reading: "üìñ –ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å",
        BookStatus.completed: "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–∞",
        BookStatus.abandoned: "‚ùå –ë—Ä–æ—Å–∏–ª —á–∏—Ç–∞—Ç—å"
    }[status]
    
    await cb.message.edit_text(
        f"üìñ <b>–°—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
        f"–ö–Ω–∏–≥–∞ ¬´{book.title}¬ª —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {status_text}",
        reply_markup=book_detail_keyboard(book_id),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "books_search")
async def books_search_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥"""
    await state.set_state(BookFSM.waiting_title)
    await state.update_data(search_mode=True)
    
    await cb.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∫–Ω–∏–≥</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(BookFSM.waiting_title)
async def books_search_handle(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥"""
    data = await state.get_data()
    if not data.get("search_mode"):
        return
    
    search_query = message.text.strip()
    if not search_query:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    user = message.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
        books = (await session.execute(
            select(Book).where(
                Book.user_id == db_user.id,
                Book.title.ilike(f"%{search_query}%")
            ).order_by(Book.title)
        )).scalars().all()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
        author_books = (await session.execute(
            select(Book).where(
                Book.user_id == db_user.id,
                Book.author.ilike(f"%{search_query}%")
            ).order_by(Book.title)
        )).scalars().all()
        
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —É–±—Ä–∞–≤ –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_books = list({book.id: book for book in books + author_books}.values())
    
    await state.clear()
    
    if not all_books:
        await message.answer(
            f"üîç <b>–ü–æ–∏—Å–∫: {search_query}</b>\n\n"
            "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
            reply_markup=books_menu(),
            parse_mode="HTML"
        )
    else:
        book_list = [(book.id, book.title, book.author) for book in all_books]
        await message.answer(
            f"üîç <b>–ü–æ–∏—Å–∫: {search_query}</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(all_books)}",
            reply_markup=book_list_keyboard(book_list),
            parse_mode="HTML"
        )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–´–°–¢–†–û–ì–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¶–ò–¢–ê–¢ ====================

@router.message(BookQuoteFSM.waiting_quote)
async def book_quote_text_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    if len(message.text) > 1000:
        await message.answer("‚ùå –¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(quote_text=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    books = data.get("available_books", [])
    
    if not books:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏
    keyboard = []
    for book in books:
        author_text = f" - {book.author}" if book.author else ""
        status_icon = "üìñ" if book.status == BookStatus.reading else "‚úÖ"
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status_icon} {book.title}{author_text}",
                callback_data=f"quick_quote_book:{book.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_main")])
    
    await state.set_state(BookQuoteFSM.waiting_book_selection)
    await message.answer(
        "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ü–∏—Ç–∞—Ç—ã</b>\n\n"
        "–ö –∫–∞–∫–æ–π –∫–Ω–∏–≥–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ —Ü–∏—Ç–∞—Ç–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("quick_quote_book:"))
async def book_quote_book_selection_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã"""
    book_id = int(cb.data.split(":")[1])
    
    await state.update_data(selected_book_id=book_id)
    await state.set_state(BookQuoteFSM.waiting_page_number)
    
    await cb.message.edit_text(
        "üìÑ <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ü–∏—Ç–∞—Ç–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(BookQuoteFSM.waiting_page_number)
async def book_quote_page_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ü–∏—Ç–∞—Ç—ã"""
    page_text = message.text.strip()
    page_number = None
    
    if page_text != "-":
        try:
            page_number = int(page_text)
            if page_number < 0:
                await message.answer("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    quote_text = data.get("quote_text")
    book_id = data.get("selected_book_id")
    
    if not quote_text or not book_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user = message.from_user
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        book = await session.execute(
            select(Book).where(Book.id == book_id, Book.user_id == db_user.id)
        )
        book = book.scalar_one_or_none()
        
        if not book:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
        new_quote = BookQuote(
            book_id=book_id,
            quote_text=quote_text,
            page_number=page_number
        )
        session.add(new_quote)
        await session.commit()
    
    await state.clear()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    page_info = f" (—Å—Ç—Ä. {page_number})" if page_number else ""
    author_text = f" - {book.author}" if book.author else ""
    
    await message.answer(
        f"‚úÖ <b>–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üìö –ö–Ω–∏–≥–∞: {book.title}{author_text}\n"
        f"üìù –¶–∏—Ç–∞—Ç–∞: {quote_text[:100]}{'...' if len(quote_text) > 100 else ''}{page_info}\n\n"
        f"–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–Ω–∏–≥.",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
