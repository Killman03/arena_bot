from __future__ import annotations

from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from sqlalchemy import select

from app.db.session import session_scope
from app.db.models import User
from app.keyboards.common import main_menu
from app.db.models.motivation import Motivation

router = Router()


PILLARS = [
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
    "–ö–æ–Ω—Ü–µ–ø—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω",
    "–ù–∞–ª–∏—á–∏–µ —Ü–µ–ª–∏",
    "–û—Å–æ–∑–Ω–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –∫–∞–∫ –º—É–∂—á–∏–Ω—ã",
    "–°–∏—Å—Ç–µ–º–∞ - –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏",
    "–°–æ–∑–¥–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
    "–ì–ª–∞–≤–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ü–µ–ª—å",
]


@router.message(CommandStart())
async def start_handler(message: types.Message) -> None:
    user = message.from_user
    if not user:
        return
    async with session_scope() as session:
        existing = await session.execute(select(User).where(User.telegram_id == user.id))
        instance = existing.scalar_one_or_none()
        if not instance:
            instance = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            session.add(instance)

    main_goal = None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        mot = (
            await session.execute(select(Motivation).where(Motivation.user_id == db_user.id))
        ).scalar_one_or_none()
        if mot and mot.main_year_goal:
            main_goal = mot.main_year_goal
    header = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫—É—é –∞—Ä–µ–Ω—É –∂–∏–∑–Ω–∏!\n–ó–¥–µ—Å—å —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.\n\n"
    if main_goal:
        header += f"üéØ –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≥–æ–¥–∞: {main_goal}\n\n"
    header += "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    await message.answer(header, reply_markup=main_menu())


@router.message(Command("pillars"))
async def pillars_handler(message: types.Message) -> None:
    await message.answer("7 –æ–ø–æ—Ä:\n- " + "\n- ".join(PILLARS))


@router.message(Command("motivation"))
async def motivation_handler(message: types.Message) -> None:
    from app.services.reminders import LAWS_OF_ARENA
    import random

    principle = random.choice(LAWS_OF_ARENA)
    await message.answer(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n\n{principle}")


