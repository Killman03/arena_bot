from __future__ import annotations

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.db.session import session_scope
from app.db.models import User, Book, BookStatus
from app.keyboards.common import main_menu, start_keyboard, back_main_menu
from app.db.models.motivation import Motivation

router = Router()


PILLARS = [
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
    "–ö–æ–Ω—Ü–µ–ø—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω",
    "–ù–∞–ª–∏—á–∏–µ —Ü–µ–ª–∏",
    "–û—Å–æ–∑–Ω–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –∫–∞–∫ –º—É–∂—á–∏–Ω—ã",
    "–°–∏—Å—Ç–µ–º–∞ - –∫–ª—é—á –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏",
    "–°–æ–∑–¥–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
    "–ì–ª–∞–≤–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ü–µ–ª—å",
]


@router.message(CommandStart())
async def start_handler(message: types.Message) -> None:
    user = message.from_user
    if not user:
        return
    async with session_scope() as session:
        existing = await session.execute(select(User).where(User.telegram_id == user.id))
        instance = existing.scalar_one_or_none()
        if not instance:
            instance = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            session.add(instance)

    main_goal = None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        mot = (
            await session.execute(select(Motivation).where(Motivation.user_id == db_user.id))
        ).scalar_one_or_none()
        if mot and mot.main_year_goal:
            main_goal = mot.main_year_goal
    header = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫—É—é –∞—Ä–µ–Ω—É –∂–∏–∑–Ω–∏!\n–ó–¥–µ—Å—å —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.\n\n"
    if main_goal:
        header += f"üéØ –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≥–æ–¥–∞: {main_goal}\n\n"
    header += "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    await message.answer(header, reply_markup=main_menu())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    from app.keyboards.common import main_reply_keyboard
    await message.answer(
        "üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
        reply_markup=main_reply_keyboard()
    )


@router.message(Command("pillars"))
async def pillars_handler(message: types.Message) -> None:
    await message.answer("7 –æ–ø–æ—Ä:\n- " + "\n- ".join(PILLARS))


@router.message(Command("motivation"))
async def motivation_handler(message: types.Message) -> None:
    from app.services.reminders import LAWS_OF_ARENA
    import random

    principle = random.choice(LAWS_OF_ARENA)
    await message.answer(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:\n\n{principle}")


@router.message(Command("hide_keyboard"))
async def hide_keyboard_handler(message: types.Message) -> None:
    """–°–∫—Ä—ã—Ç—å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    from app.keyboards.common import hide_keyboard
    await message.answer("‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞", reply_markup=hide_keyboard())


@router.message(lambda message: message.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def start_button_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç –≤ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    user = message.from_user
    if not user:
        return
    
    main_goal = None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        mot = (
            await session.execute(select(Motivation).where(Motivation.user_id == db_user.id))
        ).scalar_one_or_none()
        if mot and mot.main_year_goal:
            main_goal = mot.main_year_goal
    
    header = "üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ì–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫—É—é –∞—Ä–µ–Ω—É –∂–∏–∑–Ω–∏!**\n\n"
    if main_goal:
        header += f"üéØ **–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≥–æ–¥–∞:** {main_goal}\n\n"
    header += "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    
    await message.answer(header, reply_markup=main_menu(), parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å —Ü–∏—Ç–∞—Ç—É")
async def quick_quote_button_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ó–∞–ø–∏—Å–∞—Ç—å —Ü–∏—Ç–∞—Ç—É"""
    from app.handlers.books import BookQuoteFSM
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–Ω–∏–≥–∏
    user = message.from_user
    if not user:
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Ç–∞–µ—Ç —Å–µ–π—á–∞—Å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–ª)
        books = await session.execute(
            select(Book).where(
                Book.user_id == db_user.id,
                Book.status.in_([BookStatus.reading, BookStatus.completed])
            ).order_by(Book.title)
        )
        books_list = books.scalars().all()
    
    if not books_list:
        await message.answer(
            "üìö <b>–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ß–∏—Ç–∞—é —Å–µ–π—á–∞—Å' –∏–ª–∏ '–ü—Ä–æ—á–∏—Ç–∞–Ω–∞'.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥—É –≤ —Ä–∞–∑–¥–µ–ª–µ üìö –ö–Ω–∏–≥–∏.",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(available_books=books_list)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(BookQuoteFSM.waiting_quote)
    await message.answer(
        "üìù <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(F.text == "üìö –ó–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª—å")
async def quick_thought_button_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ó–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª—å"""
    from app.handlers.quick_actions import QuickThoughtStates
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(QuickThoughtStates.waiting_thought)
    await message.answer(
        "üìö <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(F.text == "üìã –î–æ–±–∞–≤–∏—Ç—å –≤ To-Do")
async def quick_todo_button_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å –≤ To-Do"""
    from app.handlers.todo import TodoStates
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(TodoStates.waiting_title)
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(F.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def quick_expense_button_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"""
    from app.handlers.quick_actions import QuickExpenseStates
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(QuickExpenseStates.waiting_amount)
    await message.answer(
        "üí∞ <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(F.text == "üéØ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å")
async def quick_goal_button_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å"""
    from app.handlers.goals import GoalFSM
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(GoalFSM.waiting_title)
    await message.answer(
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ü—Ä–æ–±–µ–∂–∞—Ç—å 10 –∫–º –∑–∞ 45 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞—Ç—å 12 –∫–Ω–∏–≥ –≤ —ç—Ç–æ–º –≥–æ–¥—É\n"
        "‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç—å 500,000 —Ä—É–±–ª–µ–π –Ω–∞ –æ—Ç–ø—É—Å–∫\n"
        "‚Ä¢ –í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–æ —É—Ä–æ–≤–Ω—è B2",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(F.text == "üí≠ –ü—Ä–æ—Å–º–æ—Ç—Ä –º—ã—Å–ª–µ–π")
async def view_thoughts_button_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ—Å–º–æ—Ç—Ä –º—ã—Å–ª–µ–π –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    from app.handlers.quick_actions import view_thoughts_handler
    
    # –°–æ–∑–¥–∞–µ–º mock callback query –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    class MockCallbackQuery:
        def __init__(self, message, from_user):
            self.message = message
            self.from_user = from_user
            self.data = "view_thoughts"
        
        async def answer(self):
            pass
    
    mock_cb = MockCallbackQuery(message, message.from_user)
    await view_thoughts_handler(mock_cb)


@router.message(F.text == "‚ú® –û–¥–∏–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å")
async def perfect_day_button_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û–¥–∏–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å"""
    from app.handlers.daily_reminders import perfect_day_menu
    
    # –°–æ–∑–¥–∞–µ–º mock callback query –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    class MockCallbackQuery:
        def __init__(self, message, from_user):
            self.message = message
            self.from_user = from_user
            self.data = "perfect_day_plan"
        
        async def answer(self):
            pass
    
    mock_cb = MockCallbackQuery(message, message.from_user)
    await perfect_day_menu(mock_cb)


@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = message.from_user
    if not user:
        return
    
    main_goal = None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        mot = (
            await session.execute(select(Motivation).where(Motivation.user_id == db_user.id))
        ).scalar_one_or_none()
        if mot and mot.main_year_goal:
            main_goal = mot.main_year_goal
    
    header = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
    if main_goal:
        header += f"üéØ <b>–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≥–æ–¥–∞:</b> {main_goal}\n\n"
    header += "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    
    await message.answer(header, reply_markup=main_menu(), parse_mode="HTML")


