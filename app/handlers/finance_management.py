from __future__ import annotations

from datetime import date, datetime
from decimal import Decimal
from typing import Any

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.session import session_scope
from app.db.models import User, Creditor, Debtor, Income, FinanceTransaction, FinancialGoal
from app.keyboards.common import creditor_debtor_menu, back_main_menu
from app.services.finance_reminders import send_finance_reminders_for_user
from app.services.finance_todo_manager import create_todo_for_financial_obligations
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.services.llm import deepseek_complete

router = Router()


class CreditorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    waiting_for_name = State()
    waiting_for_amount = State()
    waiting_for_due_date = State()
    waiting_for_description = State()


class DebtorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∏–∫–∞"""
    waiting_for_name = State()
    waiting_for_amount = State()
    waiting_for_due_date = State()
    waiting_for_description = State()


class IncomeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    waiting_for_name = State()
    waiting_for_amount = State()
    waiting_for_frequency = State()
    waiting_for_next_date = State()
    waiting_for_description = State()
    waiting_for_regular_amount = State()
    waiting_for_extra_amount = State()
    waiting_for_income_description = State()


class ExpenseStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    waiting_for_amount = State()
    waiting_for_description = State()


class FinancialGoalStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏"""
    waiting_for_name = State()
    waiting_for_target_amount = State()
    waiting_for_monthly_percentage = State()
    waiting_for_deadline = State()
    waiting_for_description = State()
    waiting_for_contribution_amount = State()


@router.callback_query(F.data == "creditor_add")
async def creditor_add_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.set_state(CreditorStates.waiting_for_name)
    await cb.message.edit_text(
        "üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞</b>\n\n"
        "<b>–ö—Ä–µ–¥–∏—Ç–æ—Ä</b> - —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–æ–π –í–´ –¥–æ–ª–∂–Ω—ã –¥–µ–Ω—å–≥–∏.\n\n"
        "<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ (–∫–æ–º—É –í–´ –¥–æ–ª–∂–Ω—ã –¥–µ–Ω—å–≥–∏):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(CreditorStates.waiting_for_name)
async def creditor_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–º—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.update_data(name=message.text)
    await state.set_state(CreditorStates.waiting_for_amount)
    await message.answer(
        "<b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )


@router.message(CreditorStates.waiting_for_amount)
async def creditor_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(CreditorStates.waiting_for_due_date)
        await message.answer(
            "<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(CreditorStates.waiting_for_due_date)
async def creditor_due_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(due_date=due_date)
        await state.set_state(CreditorStates.waiting_for_description)
        await message.answer(
            "<b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(CreditorStates.waiting_for_description)
async def creditor_description_handler(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    description = message.text if message.text != "." else None
    await state.update_data(description=description)
    
    data = await state.get_data()
    
    user = message.from_user
    if not user:
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        creditor = Creditor(
            user_id=db_user.id,
            name=data["name"],
            amount=Decimal(str(data["amount"])),
            due_date=data["due_date"],
            description=data["description"]
        )
        session.add(creditor)
        await session.commit()
    
    await state.clear()
    await message.answer(
        f"‚úÖ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
        f"üí∞ <b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {data['amount']:,.2f} ‚ÇΩ (–í–´ –¥–æ–ª–∂–Ω—ã)\n"
        f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:</b> {data['due_date'].strftime('%d.%m.%Y')}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "debtor_add")
async def debtor_add_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∞"""
    await state.set_state(DebtorStates.waiting_for_name)
    await cb.message.edit_text(
        "üè¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∞</b>\n\n"
        "<b>–î–æ–ª–∂–Ω–∏–∫</b> - —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –¥–µ–Ω—å–≥–∏ –í–ê–ú.\n\n"
        "<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞ (–∫—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–Ω—å–≥–∏ –í–ê–ú):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(DebtorStates.waiting_for_name)
async def debtor_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞"""
    await state.update_data(name=message.text)
    await state.set_state(DebtorStates.waiting_for_amount)
    await message.answer(
        "<b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )


@router.message(DebtorStates.waiting_for_amount)
async def debtor_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É –¥–æ–ª–∂–Ω–∏–∫–∞"""
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(DebtorStates.waiting_for_due_date)
        await message.answer(
            "<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(DebtorStates.waiting_for_due_date)
async def debtor_due_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã –¥–æ–ª–∂–Ω–∏–∫–∞"""
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(due_date=due_date)
        await state.set_state(DebtorStates.waiting_for_description)
        await message.answer(
            "<b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(DebtorStates.waiting_for_description)
async def debtor_description_handler(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∞"""
    description = message.text if message.text != "." else None
    await state.update_data(description=description)
    
    data = await state.get_data()
    
    user = message.from_user
    if not user:
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        debtor = Debtor(
            user_id=db_user.id,
            name=data["name"],
            amount=Decimal(str(data["amount"])),
            due_date=data["due_date"],
            description=data["description"]
        )
        session.add(debtor)
        await session.commit()
    
    await state.clear()
    await message.answer(
        f"‚úÖ <b>–î–æ–ª–∂–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data['name']}\n"
        f"üí∞ <b>–°—É–º–º–∞ –¥–æ–ª–≥–∞:</b> {data['amount']:,.2f} ‚ÇΩ (–¥–æ–ª–∂–µ–Ω –í–ê–ú)\n"
        f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:</b> {data['due_date'].strftime('%d.%m.%Y')}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("creditor_view:"))
async def creditor_view(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    creditor_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        creditor = await session.get(Creditor, creditor_id)
        if not creditor:
            await cb.answer("–ö—Ä–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"üí∏ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä: {creditor.name}</b>\n\n"
        text += f"üí∞ <b>–°—É–º–º–∞:</b> {float(creditor.amount):,.2f} ‚ÇΩ\n"
        text += f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:</b> {creditor.due_date.strftime('%d.%m.%Y')}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {creditor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {creditor.created_at.strftime('%d.%m.%Y')}"
        
        await cb.message.edit_text(text, reply_markup=creditor_debtor_menu("creditor", creditor_id), parse_mode="HTML")
    
    await cb.answer()


@router.callback_query(F.data.startswith("debtor_view:"))
async def debtor_view(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–æ–ª–∂–Ω–∏–∫–∞"""
    debtor_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        debtor = await session.get(Debtor, debtor_id)
        if not debtor:
            await cb.answer("–î–æ–ª–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        text = f"üè¶ <b>–î–æ–ª–∂–Ω–∏–∫: {debtor.name}</b>\n\n"
        text += f"üí∞ <b>–°—É–º–º–∞:</b> {float(debtor.amount):,.2f} ‚ÇΩ\n"
        text += f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:</b> {debtor.due_date.strftime('%d.%m.%Y')}\n"
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {debtor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {debtor.created_at.strftime('%d.%m.%Y')}"
        
        await cb.message.edit_text(text, reply_markup=creditor_debtor_menu("debtor", debtor_id), parse_mode="HTML")
    
    await cb.answer()


@router.callback_query(F.data.startswith("creditor_delete:") | F.data.startswith("debtor_delete:"))
async def delete_creditor_debtor(cb: types.CallbackQuery) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –∏–ª–∏ –¥–æ–ª–∂–Ω–∏–∫–∞"""
    parts = cb.data.split(":")
    item_type = parts[0]
    item_id = int(parts[1])
    
    async with session_scope() as session:
        if item_type == "creditor_delete":
            item = await session.get(Creditor, item_id)
            item_name = "–∫—Ä–µ–¥–∏—Ç–æ—Ä"
        else:
            item = await session.get(Debtor, item_id)
            item_name = "–¥–æ–ª–∂–Ω–∏–∫"
        
        if not item:
            await cb.answer(f"{item_name.title()} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        name = item.name
        session.delete(item)
        await session.commit()
    
    await cb.message.edit_text(
        f"üóëÔ∏è <b>{item_name.title()} —É–¥–∞–ª–µ–Ω!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {name}\n"
        f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("creditor_payment:") | F.data.startswith("debtor_payment:"))
async def mark_payment(cb: types.CallbackQuery) -> None:
    """–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É –∏–ª–∏ –¥–æ–ª–∂–Ω–∏–∫—É"""
    parts = cb.data.split(":")
    item_type = parts[0]
    item_id = int(parts[1])
    
    async with session_scope() as session:
        if item_type == "creditor_payment":
            item = await session.get(Creditor, item_id)
            item_name = "–∫—Ä–µ–¥–∏—Ç–æ—Ä"
        else:
            item = await session.get(Debtor, item_id)
            item_name = "–¥–æ–ª–∂–Ω–∏–∫"
        
        if not item:
            await cb.answer(f"{item_name.title()} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å
        item.is_active = False
        await session.commit()
    
    await cb.message.edit_text(
        f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞!</b>\n\n"
        f"üë§ <b>{item_name.title()}:</b> {item.name}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {float(item.amount):,.2f} ‚ÇΩ\n"
        f"‚úÖ –ó–∞–ø–∏—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–°–•–û–î–û–í =====

@router.callback_query(F.data == "expense_add")
async def expense_add_start(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    from app.keyboards.common import finance_expense_menu
    await cb.message.edit_text(
        "üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=finance_expense_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("expense_category_"))
async def expense_category_selected(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    category = cb.data.replace("expense_category_", "")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    category_names = {
        "purchases": "–ü–æ–∫—É–ø–∫–∏",
        "food": "–ü–∏—Ç–∞–Ω–∏–µ", 
        "transport": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "utilities": "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
        "health": "–ó–¥–æ—Ä–æ–≤—å–µ",
        "entertainment": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "communication": "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
        "clothing": "–û–¥–µ–∂–¥–∞",
        "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        "banking": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
        "other": "–ü—Ä–æ—á–µ–µ"
    }
    
    category_name = category_names.get(category, category)
    
    await state.update_data(category=category_name)
    await state.set_state(ExpenseStates.waiting_for_amount)
    
    await cb.message.edit_text(
        f"üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n\n"
        f"<b>–®–∞–≥ 1/2:</b> –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(ExpenseStates.waiting_for_amount)
async def expense_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
            
        await state.update_data(amount=amount)
        await state.set_state(ExpenseStates.waiting_for_description)
        
        await message.answer(
            "<b>–®–∞–≥ 2/2:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(ExpenseStates.waiting_for_description)
async def expense_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = await state.get_data()
    amount = data.get("amount")
    category = data.get("category")
    description = message.text if message.text != "." else ""
    
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
            from app.db.models import FinanceTransaction
            from datetime import date
            
            expense = FinanceTransaction(
                user_id=db_user.id,
                date=date.today(),
                amount=-abs(amount),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
                category=category,
                description=description
            )
            
            session.add(expense)
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"‚úÖ <b>–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        success_text += f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
        success_text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        if description:
            success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        success_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {date.today().strftime('%d.%m.%Y')}"
        
        await message.answer(
            success_text,
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ò–ú–ü–û–†–¢–ê EXCEL =====

@router.callback_query(F.data == "finance_import_excel")
async def finance_import_excel_start(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞"""
    await cb.message.edit_text(
        "üì§ <b>–ò–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞</b>\n\n"
        "üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ Excel —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üìä –≠–∫—Å–ø–æ—Ä—Ç Excel'\n"
        "2Ô∏è‚É£ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel (–∏–∑–º–µ–Ω–∏—Ç–µ —Å—É–º–º—ã, –¥–∞—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏—è)\n"
        "3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—é–¥–∞\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ù–µ —É–¥–∞–ª—è–π—Ç–µ –∫–æ–ª–æ–Ω–∫—É 'id' - –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –±–µ–∑ id (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)\n"
        "‚Ä¢ <b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∏–∑ Excel</b>\n"
        "‚Ä¢ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx):</b>",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–•–û–î–ê–ú–ò =====

@router.callback_query(F.data == "income_add_regular")
async def income_add_regular_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    await cb.message.edit_text(
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞:",
        parse_mode="HTML"
    )
    await state.set_state(IncomeStates.waiting_for_regular_amount)
    await cb.answer()


@router.message(IncomeStates.waiting_for_regular_amount)
async def income_regular_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
            
        await state.update_data(amount=amount, is_regular=True)
        await state.set_state(IncomeStates.waiting_for_income_description)
        
        await message.answer(
            "<b>–®–∞–≥ 2/2:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.callback_query(F.data == "income_add_extra")
async def income_add_extra_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    await cb.message.edit_text(
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞:",
        parse_mode="HTML"
    )
    await state.set_state(IncomeStates.waiting_for_extra_amount)
    await cb.answer()


@router.message(IncomeStates.waiting_for_extra_amount)
async def income_extra_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
            
        await state.update_data(amount=amount, is_regular=False)
        await state.set_state(IncomeStates.waiting_for_income_description)
        
        await message.answer(
            "<b>–®–∞–≥ 2/2:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(IncomeStates.waiting_for_income_description)
async def income_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = await state.get_data()
    amount = data.get("amount")
    is_regular = data.get("is_regular")
    description = message.text if message.text != "." else ""
    
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            from datetime import date
            
            income = Income(
                user_id=db_user.id,
                name=f"{'–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' if is_regular else '–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π'} –¥–æ—Ö–æ–¥",
                amount=amount,
                income_type="regular" if is_regular else "extra",
                frequency="monthly" if is_regular else "once",
                next_date=date.today(),
                description=description
            )
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ FinanceTransaction –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ
            finance_transaction = FinanceTransaction(
                user_id=db_user.id,
                date=date.today(),
                amount=amount,  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–æ—Ö–æ–¥–∞
                category="–î–æ—Ö–æ–¥",
                description=f"{'–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' if is_regular else '–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π'} –¥–æ—Ö–æ–¥: {description}" if description else f"{'–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' if is_regular else '–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π'} –¥–æ—Ö–æ–¥"
            )
            
            session.add(income)
            session.add(finance_transaction)
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        income_type = "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π" if is_regular else "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π"
        success_text = f"‚úÖ <b>–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        success_text += f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
        success_text += f"üìÇ <b>–¢–∏–ø:</b> {income_type}\n"
        if description:
            success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        success_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {date.today().strftime('%d.%m.%Y')}\n\n"
        success_text += f"üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –î–æ—Ö–æ–¥ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"
        
        await message.answer(
            success_text,
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data == "income_list")
async def income_list_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            incomes = (await session.execute(
                select(Income).where(Income.user_id == db_user.id).order_by(Income.created_at.desc())
            )).scalars().all()
            
            if not incomes:
                await cb.message.edit_text(
                    "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤
            income_text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤:</b>\n\n"
            
            for i, income in enumerate(incomes[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                income_type = "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π" if income.income_type == "regular" else "üí´ –í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π"
                income_text += f"{i}. {income_type}\n"
                income_text += f"   üí∞ {income.amount:,.2f} ‚ÇΩ\n"
                if income.description:
                    income_text += f"   üìù {income.description}\n"
                income_text += f"   üìÖ {income.created_at.strftime('%d.%m.%Y')}\n\n"
            
            if len(incomes) > 20:
                income_text += f"... –∏ –µ—â–µ {len(incomes) - 20} –¥–æ—Ö–æ–¥–æ–≤"
            
            await cb.message.edit_text(
                income_text,
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Ö–æ–¥–æ–≤:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –§–ò–ù–ê–ù–°–û–í–´–• –¶–ï–õ–ï–ô =====

@router.callback_query(F.data == "financial_goal_add")
async def financial_goal_add_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏"""
    await cb.message.edit_text(
        "üéØ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏</b>\n\n"
        "<b>–®–∞–≥ 1/5:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:",
        parse_mode="HTML"
    )
    await state.set_state(FinancialGoalStates.waiting_for_name)
    await cb.answer()


@router.message(FinancialGoalStates.waiting_for_name)
async def financial_goal_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏"""
    await state.update_data(name=message.text)
    await state.set_state(FinancialGoalStates.waiting_for_target_amount)
    await message.answer(
        "<b>–®–∞–≥ 2/5:</b> –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )


@router.message(FinancialGoalStates.waiting_for_target_amount)
async def financial_goal_target_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
            
        await state.update_data(target_amount=amount)
        await state.set_state(FinancialGoalStates.waiting_for_monthly_percentage)
        await message.answer(
            "<b>–®–∞–≥ 3/5:</b> –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ (1-100):",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(FinancialGoalStates.waiting_for_monthly_percentage)
async def financial_goal_percentage_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    try:
        percentage = int(message.text)
        if percentage < 1 or percentage > 100:
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
            
        await state.update_data(monthly_percentage=percentage)
        await state.set_state(FinancialGoalStates.waiting_for_deadline)
        await message.answer(
            "<b>–®–∞–≥ 4/5:</b> –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")


@router.message(FinancialGoalStates.waiting_for_deadline)
async def financial_goal_deadline_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"""
    if message.text == ".":
        await state.update_data(deadline=None)
    else:
        try:
            deadline = datetime.strptime(message.text, "%d.%m.%Y").date()
            await state.update_data(deadline=deadline)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
            return
    
    await state.set_state(FinancialGoalStates.waiting_for_description)
    await message.answer(
        "<b>–®–∞–≥ 5/5:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
        parse_mode="HTML"
    )


@router.message(FinancialGoalStates.waiting_for_description)
async def financial_goal_description_handler(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏"""
    description = message.text if message.text != "." else None
    await state.update_data(description=description)
    
    data = await state.get_data()
    
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            from decimal import Decimal
            
            financial_goal = FinancialGoal(
                user_id=db_user.id,
                name=data["name"],
                target_amount=Decimal(str(data["target_amount"])),
                current_amount=Decimal("0"),
                monthly_percentage=data["monthly_percentage"],
                deadline=data["deadline"],
                description=data["description"]
            )
            
            session.add(financial_goal)
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"‚úÖ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        success_text += f"üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
        success_text += f"üí∞ <b>–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞:</b> {data['target_amount']:,.2f} ‚ÇΩ\n"
        success_text += f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞:</b> {data['monthly_percentage']}%\n"
        if data['deadline']:
            success_text += f"üìÖ <b>–°—Ä–æ–∫:</b> {data['deadline'].strftime('%d.%m.%Y')}\n"
        if data['description']:
            success_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        success_text += f"\nüí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –¶–µ–ª—å —Ç–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–¶–µ–ª–∏'"
        
        await message.answer(
            success_text,
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data == "financial_goals_list")
async def financial_goals_list_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goals = (await session.execute(
                select(FinancialGoal).where(
                    FinancialGoal.user_id == db_user.id,
                    FinancialGoal.is_active.is_(True)
                ).order_by(FinancialGoal.created_at.desc())
            )).scalars().all()
            
            if not goals:
                await cb.message.edit_text(
                    "üìã <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            goals_text = "üìã <b>–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:</b>\n\n"
            
            for i, goal in enumerate(goals, 1):
                progress_percentage = (float(goal.current_amount) / float(goal.target_amount)) * 100
                remaining = float(goal.target_amount) - float(goal.current_amount)
                
                goals_text += f"{i}. <b>{goal.name}</b>\n"
                goals_text += f"   üí∞ –¶–µ–ª—å: {goal.target_amount:,.2f} ‚ÇΩ\n"
                goals_text += f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal.current_amount:,.2f} ‚ÇΩ / {goal.target_amount:,.2f} ‚ÇΩ ({progress_percentage:.1f}%)\n"
                goals_text += f"   üéØ –û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.2f} ‚ÇΩ\n"
                goals_text += f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞: {goal.monthly_percentage}%\n"
                if goal.deadline:
                    goals_text += f"   üìÖ –°—Ä–æ–∫: {goal.deadline.strftime('%d.%m.%Y')}\n"
                if goal.description:
                    goals_text += f"   üìù {goal.description}\n"
                goals_text += "\n"
            
            await cb.message.edit_text(
                goals_text,
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data == "financial_goal_contribute")
async def financial_goal_contribute_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goals = (await session.execute(
                select(FinancialGoal).where(
                    FinancialGoal.user_id == db_user.id,
                    FinancialGoal.is_active.is_(True)
                ).order_by(FinancialGoal.created_at.desc())
            )).scalars().all()
            
            if not goals:
                await cb.message.edit_text(
                    "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–µ–ª—è–º–∏
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = []
            for goal in goals:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{goal.name} ({goal.current_amount:,.0f}‚ÇΩ / {goal.target_amount:,.0f}‚ÇΩ)",
                        callback_data=f"contribute_to_goal:{goal.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="finance_goals")])
            
            await cb.message.edit_text(
                "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data.startswith("contribute_to_goal:"))
async def contribute_to_goal_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    goal_id = int(cb.data.split(":", 1)[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ü–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(goal_id=goal_id)
    
    await cb.message.edit_text(
        "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    await state.set_state(FinancialGoalStates.waiting_for_contribution_amount)
    await cb.answer()


@router.message(FinancialGoalStates.waiting_for_contribution_amount)
async def contribution_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
            
        data = await state.get_data()
        goal_id = data.get("goal_id")
        
        user = message.from_user
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        try:
            async with session_scope() as session:
                db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
                goal = (await session.execute(
                    select(FinancialGoal).where(
                        FinancialGoal.id == goal_id,
                        FinancialGoal.user_id == db_user.id
                    )
                )).scalar_one()
                
                if not goal:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    await state.clear()
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É
                from decimal import Decimal
                goal.current_amount += Decimal(str(amount))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
                if goal.current_amount >= goal.target_amount:
                    goal.is_active = False  # –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
                    await message.answer(
                        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å '{goal.name}' –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!</b>\n\n"
                        f"üí∞ –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: {goal.target_amount:,.2f} ‚ÇΩ\n"
                        f"üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: {goal.current_amount:,.2f} ‚ÇΩ\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 100%",
                        reply_markup=back_main_menu(),
                        parse_mode="HTML"
                    )
                else:
                    progress_percentage = (float(goal.current_amount) / float(goal.target_amount)) * 100
                    remaining = float(goal.target_amount) - float(goal.current_amount)
                    
                    await message.answer(
                        f"‚úÖ <b>–¶–µ–ª—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                        f"üéØ <b>–¶–µ–ª—å:</b> {goal.name}\n"
                        f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> {amount:,.2f} ‚ÇΩ\n"
                        f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {goal.current_amount:,.2f} ‚ÇΩ / {goal.target_amount:,.2f} ‚ÇΩ ({progress_percentage:.1f}%)\n"
                        f"üéØ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining:,.2f} ‚ÇΩ",
                        reply_markup=back_main_menu(),
                        parse_mode="HTML"
                    )
                
                await session.commit()
                await state.clear()
                
        except Exception as e:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–µ–ª–∏:</b>\n{str(e)}",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            await state.clear()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.callback_query(F.data == "financial_goals_progress")
async def financial_goals_progress_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ü–µ–ª—è–º"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goals = (await session.execute(
                select(FinancialGoal).where(
                    FinancialGoal.user_id == db_user.id,
                    FinancialGoal.is_active.is_(True)
                )
            )).scalars().all()
            
            if not goals:
                await cb.message.edit_text(
                    "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª—è–º</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_target = sum(float(goal.target_amount) for goal in goals)
            total_current = sum(float(goal.current_amount) for goal in goals)
            overall_progress = (total_current / total_target) * 100 if total_target > 0 else 0
            total_remaining = total_target - total_current
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–ª–∏ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
            completed_goals = [g for g in goals if float(g.current_amount) >= float(g.target_amount)]
            active_goals = [g for g in goals if float(g.current_amount) < float(g.target_amount)]
            
            progress_text = "üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ü–µ–ª—è–º</b>\n\n"
            progress_text += f"üéØ <b>–í—Å–µ–≥–æ —Ü–µ–ª–µ–π:</b> {len(goals)}\n"
            progress_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {len(completed_goals)}\n"
            progress_text += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {len(active_goals)}\n\n"
            progress_text += f"üí∞ <b>–û–±—â–∞—è —Ü–µ–ª—å:</b> {total_target:,.2f} ‚ÇΩ\n"
            progress_text += f"üíµ <b>–ù–∞–∫–æ–ø–ª–µ–Ω–æ:</b> {total_current:,.2f} ‚ÇΩ\n"
            progress_text += f"üìä <b>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {overall_progress:.1f}%\n"
            progress_text += f"üéØ <b>–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å:</b> {total_remaining:,.2f} ‚ÇΩ\n\n"
            
            if active_goals:
                progress_text += "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏:</b>\n"
                for goal in active_goals[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    goal_progress = (float(goal.current_amount) / float(goal.target_amount)) * 100
                    progress_text += f"‚Ä¢ {goal.name}: {goal_progress:.1f}%\n"
                
                if len(active_goals) > 5:
                    progress_text += f"... –∏ –µ—â–µ {len(active_goals) - 5} —Ü–µ–ª–µ–π"
            
            await cb.message.edit_text(
                progress_text,
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data == "finance_categories_groups")
async def finance_categories_groups_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            from app.services.finance_analytics import get_finance_summary_by_groups, get_group_color
            
            summary = await get_finance_summary_by_groups(session, db_user.id, period_days=30)
            
            if not summary["groups"]:
                await cb.message.edit_text(
                    "üìä <b>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
                    "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            text = f"üìä <b>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∑–∞ {summary['period_days']} –¥–Ω–µ–π</b>\n\n"
            text += f"üí∞ <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> {summary['total_income']:,.2f} ‚ÇΩ\n"
            text += f"üí∏ <b>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:</b> {summary['total_expenses']:,.2f} ‚ÇΩ\n"
            text += f"‚öñÔ∏è <b>–ë–∞–ª–∞–Ω—Å:</b> {summary['balance']:,.2f} ‚ÇΩ\n\n"
            
            text += "<b>üìà –ü–æ –æ—Å–Ω–æ–≤–Ω—ã–º –≥—Ä—É–ø–ø–∞–º:</b>\n\n"
            
            for group_name, group_data in summary["groups"].items():
                group_color = get_group_color(group_name)
                group_total = group_data["total"]
                group_count = group_data["count"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–ø–ø—ã (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
                if group_total > 0:
                    group_type = "üìà –î–æ—Ö–æ–¥—ã"
                    group_amount = f"+{group_total:,.2f} ‚ÇΩ"
                else:
                    group_type = "üìâ –†–∞—Å—Ö–æ–¥—ã"
                    group_amount = f"-{abs(group_total):,.2f} ‚ÇΩ"
                
                text += f"{group_color} <b>{group_name}</b>\n"
                text += f"   {group_type}: {group_amount}\n"
                text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {group_count}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if group_data["categories"]:
                    top_categories = sorted(
                        group_data["categories"].items(),
                        key=lambda x: abs(x[1]["total"]),
                        reverse=True
                    )[:3]
                    
                    text += "   üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                    for cat_name, cat_data in top_categories:
                        if cat_data["total"] > 0:
                            cat_amount = f"+{cat_data['total']:,.2f} ‚ÇΩ"
                        else:
                            cat_amount = f"-{abs(cat_data['total']):,.2f} ‚ÇΩ"
                        text += f"      ‚Ä¢ {cat_name}: {cat_amount}\n"
                
                text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø–µ—Ä–∏–æ–¥–∞
            keyboard = [
                [
                    InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="finance_groups_period_7"),
                    InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="finance_groups_period_30"),
                    InlineKeyboardButton(text="üìÖ 90 –¥–Ω–µ–π", callback_data="finance_groups_period_90")
                ],
                [
                    InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="finance_categories_detailed")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")]
            ]
            
            await cb.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data.startswith("finance_groups_period_"))
async def finance_groups_period_handler(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ callback_data
    period_str = cb.data.replace("finance_groups_period_", "")
    try:
        period_days = int(period_str)
    except ValueError:
        period_days = 30
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            from app.services.finance_analytics import get_finance_summary_by_groups, get_group_color
            
            summary = await get_finance_summary_by_groups(session, db_user.id, period_days=period_days)
            
            if not summary["groups"]:
                await cb.message.edit_text(
                    f"üìä <b>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
                    f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {period_days} –¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            text = f"üìä <b>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∑–∞ {period_days} –¥–Ω–µ–π</b>\n\n"
            text += f"üí∞ <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> {summary['total_income']:,.2f} ‚ÇΩ\n"
            text += f"üí∏ <b>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:</b> {summary['total_expenses']:,.2f} ‚ÇΩ\n"
            text += f"‚öñÔ∏è <b>–ë–∞–ª–∞–Ω—Å:</b> {summary['balance']:,.2f} ‚ÇΩ\n\n"
            
            text += "<b>üìà –ü–æ –æ—Å–Ω–æ–≤–Ω—ã–º –≥—Ä—É–ø–ø–∞–º:</b>\n\n"
            
            for group_name, group_data in summary["groups"].items():
                group_color = get_group_color(group_name)
                group_total = group_data["total"]
                group_count = group_data["count"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–ø–ø—ã (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
                if group_total > 0:
                    group_type = "üìà –î–æ—Ö–æ–¥—ã"
                    group_amount = f"+{group_total:,.2f} ‚ÇΩ"
                else:
                    group_type = "üìâ –†–∞—Å—Ö–æ–¥—ã"
                    group_amount = f"-{abs(group_total):,.2f} ‚ÇΩ"
                
                text += f"{group_color} <b>{group_name}</b>\n"
                text += f"   {group_type}: {group_amount}\n"
                text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {group_count}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if group_data["categories"]:
                    top_categories = sorted(
                        group_data["categories"].items(),
                        key=lambda x: abs(x[1]["total"]),
                        reverse=True
                    )[:3]
                    
                    text += "   üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                    for cat_name, cat_data in top_categories:
                        if cat_data["total"] > 0:
                            cat_amount = f"+{cat_data['total']:,.2f} ‚ÇΩ"
                        else:
                            cat_amount = f"-{abs(cat_data['total']):,.2f} ‚ÇΩ"
                        text += f"      ‚Ä¢ {cat_name}: {cat_amount}\n"
                
                text += "\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –ø–µ—Ä–∏–æ–¥–∞
            keyboard = [
                [
                    InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="finance_groups_period_7"),
                    InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="finance_groups_period_30"),
                    InlineKeyboardButton(text="üìÖ 90 –¥–Ω–µ–π", callback_data="finance_groups_period_90")
                ],
                [
                    InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="finance_categories_detailed")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_finance")]
            ]
            
            await cb.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data == "finance_categories_detailed")
async def finance_categories_detailed_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    user = cb.from_user
    if not user:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            from app.services.finance_analytics import get_category_statistics, get_main_category_group, get_group_color
            
            stats = await get_category_statistics(session, db_user.id, period_days=30)
            
            if not stats["categories"]:
                await cb.message.edit_text(
                    "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n"
                    "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                await cb.answer()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            text = f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['period_days']} –¥–Ω–µ–π</b>\n\n"
            text += f"üí∞ <b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> {stats['total_income']:,.2f} ‚ÇΩ\n"
            text += f"üí∏ <b>–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:</b> {stats['total_expenses']:,.2f} ‚ÇΩ\n"
            text += f"‚öñÔ∏è <b>–ë–∞–ª–∞–Ω—Å:</b> {stats['balance']:,.2f} ‚ÇΩ\n\n"
            
            text += "<b>üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n\n"
            
            for category_name, category_data in stats["categories"].items():
                main_group = category_data["main_group"]
                group_color = get_group_color(main_group)
                category_total = category_data["total"]
                category_count = category_data["count"]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
                if category_total > 0:
                    category_type = "üìà –î–æ—Ö–æ–¥—ã"
                    category_amount = f"+{category_total:,.2f} ‚ÇΩ"
                else:
                    category_type = "üìâ –†–∞—Å—Ö–æ–¥—ã"
                    category_amount = f"-{abs(category_total):,.2f} ‚ÇΩ"
                
                text += f"{group_color} <b>{category_name}</b>\n"
                text += f"   üìÇ –ì—Ä—É–ø–ø–∞: {main_group}\n"
                text += f"   {category_type}: {category_amount}\n"
                text += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {category_count}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="finance_detailed_period_7"),
                    InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="finance_detailed_period_30"),
                    InlineKeyboardButton(text="üìÖ 90 –¥–Ω–µ–π", callback_data="finance_detailed_period_90")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="finance_categories_groups")]
            ]
            
            await cb.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.message(Command("test_finance_todo"))
async def test_finance_todo_creation(message: types.Message) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"""
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )).scalar_one()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
            await create_todo_for_financial_obligations(session, db_user.id)
            
            await message.answer(
                "‚úÖ <b>–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤</b>\n\n"
                "–ó–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª —Å–µ–≥–æ–¥–Ω—è, "
                "–±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –≤–∞—à–µ–º To-Do —Å–ø–∏—Å–∫–µ.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª To-Do –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>\n{str(e)}",
            parse_mode="HTML"
        )
