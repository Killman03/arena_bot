from __future__ import annotations

import csv
from io import StringIO
from datetime import datetime
from decimal import Decimal

from aiogram import Router, types, F
from aiogram.filters import Command
from sqlalchemy import select

from app.db.session import session_scope
from app.db.models import FinanceTransaction, User
from app.services.finance_analytics import process_bank_csv

router = Router()


@router.message(Command("finance_upload"))
async def finance_upload(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: date,amount,category,description"""
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ CSV-—Ñ–∞–π–ª –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


@router.message(lambda m: m.document and m.document.mime_type == "text/csv")
async def handle_csv_upload(message: types.Message, bot: types.Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª"""
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        content = await bot.download_file(file.file_path)
        csv_text = content.read().decode("utf-8")
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –±–∞–Ω–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
        bank_type = detect_bank_type(csv_text)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –¢-–ë–∞–Ω–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if bank_type == "–¢-–ë–∞–Ω–∫":
            csv_text = fix_tbank_csv_format(csv_text)
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å CSV —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await process_bank_csv(session, db_user.id, csv_text, bank_type)
            
            if result["processed"] > 0:
                await message.answer(
                    f"‚úÖ <b>CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                    f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                    f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result['processed']}\n"
                    f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['added']}\n"
                    f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {result['skipped']}\n"
                    f"üè¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±–∞–Ω–∫: {bank_type}",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"‚ö†Ô∏è <b>–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
                    f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                    f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result['processed']}\n"
                    f"‚ùå –û—à–∏–±–∫–∏: {len(result['errors'])}\n"
                    f"üè¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±–∞–Ω–∫: {bank_type}",
                    parse_mode="HTML"
                )
                
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:</b>\n{str(e)}", parse_mode="HTML")


def detect_bank_type(csv_content: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –±–∞–Ω–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É CSV"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π CSV –ø–∞—Ä—Å–µ—Ä
        try:
            reader = csv.DictReader(StringIO(csv_content))
            headers = reader.fieldnames or []
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            lines = csv_content.strip().split('\n')
            if lines:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
                header_line = lines[0]
                if ';' in header_line:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –Ω–∏–º
                    headers = [h.strip().strip('"') for h in header_line.split(';')]
                else:
                    # –ò–Ω–∞—á–µ –ø–æ –∑–∞–ø—è—Ç–æ–π
                    headers = [h.strip().strip('"') for h in header_line.split(',')]
            else:
                headers = []
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        headers_lower = [h.lower() if h else "" for h in headers]
        
        print(f"DEBUG: –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV: {headers}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞
        bank_identifiers = {
            "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫": [
                ["operationdate", "transactiondate", "accountname", "cardname", "merchant", "bonusvalue"],  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞
                ["operationdate", "transactiondate"]
            ],

            "–¢-–ë–∞–Ω–∫": [
                ["mcc", "–∫—ç—à–±—ç–∫", "–±–æ–Ω—É—Å—ã", "–∏–Ω–≤–µ—Å—Ç–∫–æ–ø–∏–ª–∫–∞"],  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è –¢-–ë–∞–Ω–∫–∞
                ["–¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞"]
            ],

            "MBank": [
                ["–ø–æ–ª—É—á–∞—Ç–µ–ª—å/–ø–ª–∞—Ç–µ–ª—å—â–∏–∫", "—Ä–∞—Å—Ö–æ–¥", "–ø—Ä–∏—Ö–æ–¥", "–æ–ø–µ—Ä–∞—Ü–∏—è"],  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è MBank
                ["–¥–∞—Ç–∞", "–ø–æ–ª—É—á–∞—Ç–µ–ª—å/–ø–ª–∞—Ç–µ–ª—å—â–∏–∫"]
            ],

        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–∞–Ω–∫ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
        for bank_name, identifier_groups in bank_identifiers.items():
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
            for identifier_group in identifier_groups:
                if all(any(identifier in h for h in headers_lower) for identifier in identifier_group):
                    print(f"DEBUG: –û–ø—Ä–µ–¥–µ–ª–µ–Ω –±–∞–Ω–∫ {bank_name} –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º: {identifier_group}")
                    return bank_name
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞")
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ)
        if any("date" in h for h in headers_lower) and any("amount" in h for h in headers_lower):
            return "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ä—É—Å—Å–∫–∏–µ)
        if any("–¥–∞—Ç–∞" in h for h in headers_lower) and any("—Å—É–º–º–∞" in h for h in headers_lower):
            return "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–∞—Ç–∞ –∏ —Å—É–º–º–∞ - —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º
        if any("–¥–∞—Ç–∞" in h for h in headers_lower) and any("—Å—É–º–º–∞" in h for h in headers_lower):
            return "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π"
        
        print("DEBUG: –ë–∞–Ω–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫'")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫"
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫"


def fix_tbank_csv_format(csv_content: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç CSV –¢-–ë–∞–Ω–∫–∞ (—É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π)"""
    try:
        print("DEBUG: –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¢-–ë–∞–Ω–∫–∞")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = csv_content.strip().split('\n')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if lines:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_line = lines[0]
            print(f"DEBUG: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_line}")
            
            # –ó–∞–º–µ–Ω—è–µ–º "–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏;"–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞";... –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            header_line = header_line.replace('";"', '","').replace('";', '",')
            if header_line.startswith('"'):
                header_line = header_line[1:]
            if header_line.endswith('"'):
                header_line = header_line[:-1]
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π
            headers = [h.strip().strip('"') for h in header_line.split(',')]
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            lines[0] = ','.join(headers)
            print(f"DEBUG: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0]}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        fixed_lines = [lines[0]]  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        
        for i, line in enumerate(lines[1:], 1):
            if line.strip():
                print(f"DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É {i}: {line[:100]}...")
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
                line = line.replace('";"', '","').replace('";', '",')
                if line.startswith('"'):
                    line = line[1:]
                if line.endswith('"'):
                    line = line[:-1]
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
                parts = [part.strip().strip('"') for part in line.split(',')]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
                if len(parts) == len(headers):
                    fixed_lines.append(','.join(parts))
                    print(f"DEBUG: –°—Ç—Ä–æ–∫–∞ {i} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —á–∞—Å—Ç–µ–π: {len(parts)}")
                else:
                    print(f"DEBUG: –°—Ç—Ä–æ–∫–∞ {i} –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–µ–π: {len(parts)} != {len(headers)}")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–∑–±–∏–µ–Ω–∏—è
                    if ';' in line:
                        parts_alt = [part.strip().strip('"') for part in line.split(';')]
                        if len(parts_alt) == len(headers):
                            fixed_lines.append(','.join(parts_alt))
                            print(f"DEBUG: –°—Ç—Ä–æ–∫–∞ {i} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                        else:
                            print(f"DEBUG: –°—Ç—Ä–æ–∫–∞ {i} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        result = '\n'.join(fixed_lines)
        print(f"DEBUG: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°—Ç—Ä–æ–∫: {len(fixed_lines)}")
        print(f"DEBUG: –ü—Ä–∏–º–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {fixed_lines[1] if len(fixed_lines) > 1 else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        
        return result
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¢-–ë–∞–Ω–∫–∞: {e}")
        return csv_content


# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.message(lambda m: m.document and (m.caption or "").startswith("#finance"))
async def handle_bank_csv_legacy(message: types.Message, bot: types.Bot) -> None:
    """–ü–∞—Ä—Å–∏—Ç CSV, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ caption: #finance"""
    user = message.from_user
    if not user:
        return
    file = await bot.get_file(message.document.file_id)
    content = await bot.download_file(file.file_path)
    text = content.read().decode("utf-8")
    reader = csv.DictReader(StringIO(text))
    rows = list(reader)
    count = 0
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        for r in rows:
            try:
                dt = datetime.fromisoformat(r["date"]).date()
                amount = float(r["amount"])
                category = r.get("category", "–ü—Ä–æ—á–µ–µ") or "–ü—Ä–æ—á–µ–µ"
                description = r.get("description")
            except Exception:
                continue
            session.add(
                FinanceTransaction(
                    user_id=db_user.id,
                    date=dt,
                    amount=amount,
                    category=category,
                    description=description,
                )
            )
            count += 1
    await message.answer(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø EXCEL –§–ê–ô–õ–û–í =====

@router.message(lambda m: m.document and m.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
async def handle_excel_upload(message: types.Message, bot: types.Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–º MBank
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        file = await bot.get_file(message.document.file_id)
        content = await bot.download_file(file.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            temp_file.write(content.read())
            temp_file_path = temp_file.name
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ MBank —Ñ–∞–π–ª (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 12 —Å—Ç—Ä–æ–∫)
            import pandas as pd
            df = pd.read_excel(temp_file_path, skiprows=12, engine='openpyxl')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏ MBank
            mbank_columns = ["–î–∞—Ç–∞", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ü–ª–∞—Ç–µ–ª—å—â–∏–∫", "–†–∞—Å—Ö–æ–¥", "–ü—Ä–∏—Ö–æ–¥", "–û–ø–µ—Ä–∞—Ü–∏—è"]
            if all(col in df.columns for col in mbank_columns):
                # –≠—Ç–æ —Ñ–∞–π–ª MBank –≤ XLSX —Ñ–æ—Ä–º–∞—Ç–µ
                await message.answer(
                    "üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª MBank –≤ XLSX —Ñ–æ—Ä–º–∞—Ç–µ!</b>\n\n"
                    "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∫ –≤—ã–ø–∏—Å–∫—É MBank...",
                    parse_mode="HTML"
                )
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ MBank
                csv_content = df.to_csv(index=False, sep=',')
                
                async with session_scope() as session:
                    db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ MBank CSV
                    from app.services.finance_analytics import process_bank_csv
                    
                    result = await process_bank_csv(session, db_user.id, csv_content, "MBank")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –∏–º–ø–æ—Ä—Ç–µ
                    if result["processed"] > 0:
                        await message.answer(
                            f"‚úÖ <b>XLSX —Ñ–∞–π–ª MBank –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                            f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result['processed']}\n"
                            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['added']}\n"
                            f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {result['skipped']}\n"
                            f"üè¶ –ë–∞–Ω–∫: MBank",
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            f"‚ö†Ô∏è <b>XLSX —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
                            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                            f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result['processed']}\n"
                            f"‚ùå –û—à–∏–±–∫–∏: {len(result['errors'])}\n"
                            f"üè¶ –ë–∞–Ω–∫: MBank",
                            parse_mode="HTML"
                        )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤—ã—Ö–æ–¥–∏–º
                os.unlink(temp_file_path)
                return
                
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ MBank, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Excel
            pass
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
        content.seek(0)
        
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        pass
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        content = await bot.download_file(file.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            temp_file.write(content.read())
            temp_file_path = temp_file.name
        
        try:
            async with session_scope() as session:
                db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Excel —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                from app.services.excel_importer import import_excel_data
                from pathlib import Path
                
                result = await import_excel_data(session, db_user.id, Path(temp_file_path))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –∏–º–ø–æ—Ä—Ç–µ
                if result["errors"]:
                    error_text = f"‚ö†Ô∏è <b>Excel —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏!</b>\n\n"
                    error_text += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                    error_text += f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['updated']}\n"
                    error_text += f"‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {result['created']}\n"
                    error_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['deleted']}\n"
                    error_text += f"‚ùå –û—à–∏–±–∫–∏: {len(result['errors'])}\n\n"
                    error_text += f"<b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>\n"
                    for error in result["errors"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        error_text += f"‚Ä¢ {error}\n"
                    if len(result["errors"]) > 5:
                        error_text += f"... –∏ –µ—â–µ {len(result['errors']) - 5} –æ—à–∏–±–æ–∫"
                    
                    await message.answer(error_text, parse_mode="HTML")
                else:
                    success_text = f"‚úÖ <b>Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                    success_text += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                    success_text += f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['updated']}\n"
                    success_text += f"‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {result['created']}\n"
                    success_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['deleted']}\n"
                    success_text += f"üéØ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
                    
                    await message.answer(success_text, parse_mode="HTML")
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
                
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞:</b>\n{str(e)}", 
            parse_mode="HTML"
        )


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø XLS –§–ê–ô–õ–û–í MBANK =====

@router.message(lambda m: m.document and m.document.mime_type == "application/vnd.ms-excel")
async def handle_xls_upload(message: types.Message, bot: types.Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π XLS —Ñ–∞–π–ª MBank"""
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import pandas as pd
        import xlrd
    except ImportError as e:
        if "xlrd" in str(e):
            await message.answer(
                "‚ùå <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞!</b>\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å XLS —Ñ–∞–π–ª–∞–º–∏ MBank –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É xlrd:\n\n"
                "```bash\npip install xlrd>=2.0.1\n```\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "```bash\npip install -r requirements.txt\n```\n\n"
                "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫!</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                parse_mode="HTML"
            )
        return
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        content = await bot.download_file(file.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        import os
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xls') as temp_file:
            temp_file.write(content.read())
            temp_file_path = temp_file.name
        
        try:
            # –ß–∏—Ç–∞–µ–º XLS —Ñ–∞–π–ª
            import pandas as pd
            
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 12 —Å—Ç—Ä–æ–∫ (—à–∞–ø–∫–∞ –∏ –Ω–µ–Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
                df = pd.read_excel(temp_file_path, skiprows=12, engine='xlrd')
            except ImportError:
                # –ï—Å–ª–∏ xlrd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º openpyxl
                try:
                    df = pd.read_excel(temp_file_path, skiprows=12, engine='openpyxl')
                except Exception as e:
                    await message.answer(
                        "‚ùå <b>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLS —Ñ–∞–π–ª–∞!</b>\n\n"
                        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å XLS —Ñ–∞–π–ª–∞–º–∏ MBank –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É xlrd:\n\n"
                        "```bash\npip install xlrd>=2.0.1\n```\n\n"
                        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                        "```bash\npip install -r requirements.txt\n```",
                        parse_mode="HTML"
                    )
                    return
            except Exception as e:
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLS —Ñ–∞–π–ª–∞!</b>\n\n"
                    f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.",
                    parse_mode="HTML"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ["–î–∞—Ç–∞", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ü–ª–∞—Ç–µ–ª—å—â–∏–∫", "–†–∞—Å—Ö–æ–¥", "–ü—Ä–∏—Ö–æ–¥", "–û–ø–µ—Ä–∞—Ü–∏—è"]
            if not all(col in df.columns for col in required_columns):
                await message.answer(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç XLS —Ñ–∞–π–ª–∞!</b>\n\n"
                    "–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:\n"
                    "‚Ä¢ –î–∞—Ç–∞\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å/–ü–ª–∞—Ç–µ–ª—å—â–∏–∫\n"
                    "‚Ä¢ –†–∞—Å—Ö–æ–¥\n"
                    "‚Ä¢ –ü—Ä–∏—Ö–æ–¥\n"
                    "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–∞–π–ª –æ—Ç MBank.",
                    parse_mode="HTML"
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            csv_content = df.to_csv(index=False, sep=',')
            
            async with session_scope() as session:
                db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ MBank CSV
                from app.services.finance_analytics import process_bank_csv
                
                result = await process_bank_csv(session, db_user.id, csv_content, "MBank")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –∏–º–ø–æ—Ä—Ç–µ
                if result["processed"] > 0:
                    await message.answer(
                        f"‚úÖ <b>XLS —Ñ–∞–π–ª MBank –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                        f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result['processed']}\n"
                        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['added']}\n"
                        f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {result['skipped']}\n"
                        f"üè¶ –ë–∞–Ω–∫: MBank",
                        parse_mode="HTML"
                    )
                else:
                    await message.answer(
                        f"‚ö†Ô∏è <b>XLS —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</b>\n\n"
                        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
                        f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result['processed']}\n"
                        f"‚ùå –û—à–∏–±–∫–∏: {len(result['errors'])}\n"
                        f"üè¶ –ë–∞–Ω–∫: MBank",
                        parse_mode="HTML"
                    )
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)
                
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XLS —Ñ–∞–π–ª–∞:</b>\n{str(e)}", 
            parse_mode="HTML"
        )






