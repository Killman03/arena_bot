from __future__ import annotations

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db.session import session_scope
from app.db.models import User
from sqlalchemy import select
from app.services.daily_reminders import (
    daily_reminder_keyboard, 
    perfect_day_keyboard,
    generate_perfect_day_plan,
    create_todo_from_perfect_day
)
from app.keyboards.common import back_main_menu
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()


class QuickTodoStates(StatesGroup):
    waiting_title = State()
    waiting_description = State()


class PerfectDayStates(StatesGroup):
    waiting_confirmation = State()


@router.callback_query(F.data == "quick_add_todo")
async def quick_add_todo_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await state.set_state(QuickTodoStates.waiting_title)
    await cb.message.edit_text(
        "üìù <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickTodoStates.waiting_title)
async def quick_todo_title_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–¥–∞—á–∏"""
    if len(message.text) > 500:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    await state.set_state(QuickTodoStates.waiting_description)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(QuickTodoStates.waiting_description)
async def quick_todo_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–¥–∞—á–∏"""
    desc = (message.text or "").strip()
    if desc == "-":
        desc = None
    
    data = await state.get_data()
    title = data.get("title")
    
    if not title:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )).scalar_one()
            
            from app.db.models.todo import Todo
            from datetime import date
            
            new_todo = Todo(
                user_id=db_user.id,
                title=title,
                description=desc,
                due_date=date.today(),
                priority="medium",
                is_daily=False
            )
            
            session.add(new_todo)
            await session.commit()
            
            await message.answer(
                "‚úÖ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìù <b>{title}</b>\n"
                f"üìÖ –î–∞—Ç–∞: —Å–µ–≥–æ–¥–Ω—è\n"
                f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ä–µ–¥–Ω–∏–π\n\n"
                "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à To-Do —Å–ø–∏—Å–æ–∫.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
    
    await state.clear()


@router.callback_query(F.data == "perfect_day_plan")
async def perfect_day_menu(cb: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è"""
    await cb.message.edit_text(
        "‚öîÔ∏è <b>–ü–†–ò–ö–ê–ó –õ–ê–ù–ò–°–¢–´</b>\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –≥–ª–∞–¥–∏–∞—Ç–æ—Ä?\n\n"
        "üéØ <b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:</b>\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π\n"
        "‚Ä¢ –£—á–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–Ω—è\n"
        "‚Ä¢ –í–æ–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n"
        "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –≤–æ–∏–Ω:",
        reply_markup=perfect_day_keyboard(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "create_perfect_day")
async def create_perfect_day_handler(cb: types.CallbackQuery) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await cb.answer()
    
    await cb.message.edit_text(
        "‚öîÔ∏è <b>–õ–ê–ù–ò–°–¢–ê –°–û–°–¢–ê–í–õ–Ø–ï–¢ –ü–õ–ê–ù</b>\n\n"
        "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏...\n"
        "üîç –ò–∑—É—á–∞—é —Ç–≤–æ—é –º–æ—Ç–∏–≤–∞—Ü–∏—é...\n"
        "üí™ –ì–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        parse_mode="HTML"
    )
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == cb.from_user.id)
            )).scalar_one()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan = await generate_perfect_day_plan(db_user.id, session)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω
            await cb.message.edit_text(
                plan,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ To-Do", callback_data="convert_plan_to_todos"),
                        InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="create_perfect_day")
                    ],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="perfect_day_plan")]
                ]),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "convert_plan_to_todos")
async def convert_plan_to_todos_handler(cb: types.CallbackQuery) -> None:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –≤ –∑–∞–¥–∞—á–∏ To-Do"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await cb.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        plan_text = cb.message.text
        
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == cb.from_user.id)
            )).scalar_one()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ø–ª–∞–Ω–∞
            success = await create_todo_from_perfect_day(db_user.id, plan_text, session)
            
            if success:
                await cb.message.edit_text(
                    "‚öîÔ∏è <b>–ü–õ–ê–ù –ü–†–ò–ù–Ø–¢ –ö –ò–°–ü–û–õ–ù–ï–ù–ò–Æ!</b>\n\n"
                    "–í—Å–µ –ø—É–Ω–∫—Ç—ã –ø–ª–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.\n\n"
                    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
                    "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
                    "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã\n"
                    "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª–∏ –∫ –∑–∞–¥–∞—á–∞–º\n\n"
                    "üí™ –ù–∞—á–Ω–∏ —Å —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –¥–µ–ª–∞, –≥–ª–∞–¥–∏–∞—Ç–æ—Ä!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìù –û—Ç–∫—Ä—ã—Ç—å To-Do", callback_data="menu_todo")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="perfect_day_plan")]
                    ]),
                    parse_mode="HTML"
                )
            else:
                await cb.message.edit_text(
                    "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é.",
                    reply_markup=back_main_menu(),
                    parse_mode="HTML"
                )
                
    except Exception as e:
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏: {str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "day_templates")
async def day_templates_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–Ω—è"""
    templates_text = (
        "‚öîÔ∏è <b>–®–ê–ë–õ–û–ù–´ –¢–†–ï–ù–ò–†–û–í–û–ö –ì–õ–ê–î–ò–ê–¢–û–†–ê</b>\n\n"
        "üéØ <b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ–Ω—å –≤–æ–∏–Ω–∞:</b>\n"
        "‚Ä¢ 6:00 - –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∏ —É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ 6:30 - –û–º–æ–≤–µ–Ω–∏–µ –∏ –∑–∞–≤—Ç—Ä–∞–∫\n"
        "‚Ä¢ 7:00 - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π\n"
        "‚Ä¢ 8:00 - –°–∞–º–∞—è –≤–∞–∂–Ω–∞—è –±–∏—Ç–≤–∞ –¥–Ω—è\n"
        "‚Ä¢ 10:00 - –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª\n"
        "‚Ä¢ 10:15 - –í—Ç–æ—Ä–∞—è –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
        "‚Ä¢ 12:00 - –û–±–µ–¥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏\n"
        "‚Ä¢ 13:00 - –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n"
        "‚Ä¢ 15:00 - –ü–µ—Ä–µ—Ä—ã–≤ –¥–ª—è —Å–∏–ª—ã –¥—É—Ö–∞\n"
        "‚Ä¢ 15:15 - –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ 17:00 - –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è\n"
        "‚Ä¢ 18:00 - –§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ 19:00 - –£–∂–∏–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ 20:00 - –ß—Ç–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —É–º–∞\n"
        "‚Ä¢ 21:00 - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–¥—ã—Ö—É\n"
        "‚Ä¢ 22:00 - –°–æ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª\n\n"
        "üí™ <b>–°–æ–≤–µ—Ç –ª–∞–Ω–∏—Å—Ç—ã:</b> –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ–π —Ä–∏—Ç–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É!"
    )
    
    await cb.message.edit_text(
        templates_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", callback_data="create_perfect_day")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="perfect_day_plan")]
        ]),
        parse_mode="HTML"
    )
    await cb.answer()



