from __future__ import annotations

from datetime import date

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select

from app.db.session import session_scope
from app.db.models import User, Challenge, ChallengeLog
from app.keyboards.common import (
    challenges_menu,
    challenges_list_keyboard,
    challenge_detail_keyboard,
    back_main_menu,
)

router = Router()


class ChallengeForm(StatesGroup):
    title = State()
    description = State()
    time_str = State()
    end_date = State()


@router.callback_query(F.data == "menu_challenges")
async def menu_challenges(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–ß–µ–ª–ª–µ–Ω–¥–∂–∏:", reply_markup=challenges_menu())
    await cb.answer()


@router.callback_query(F.data == "ch_list")
async def ch_list(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        items = (
            await session.execute(select(Challenge).where(Challenge.user_id == db_user.id))
        ).scalars().all()
    
    ch_items = []
    for c in items:
        end_date_text = f" –¥–æ {c.end_date.strftime('%d.%m')}" if c.end_date else ""
        ch_items.append((c.id, f"{'üü¢' if c.is_active else 'üî¥'} {c.title} ({c.time_str}){end_date_text}"))
    
    await cb.message.edit_text("–í–∞—à–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏:", reply_markup=challenges_list_keyboard(ch_items))
    await cb.answer()


@router.callback_query(F.data == "ch_add")
async def ch_add(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(ChallengeForm.title)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞:", reply_markup=back_main_menu())
    await cb.answer()


@router.message(ChallengeForm.title)
async def ch_add_title(message: types.Message, state: FSMContext) -> None:
    await state.update_data(title=(message.text or "").strip())
    await state.set_state(ChallengeForm.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")


@router.message(ChallengeForm.description)
async def ch_add_desc(message: types.Message, state: FSMContext) -> None:
    desc = (message.text or "").strip()
    await state.update_data(description=None if desc == "-" else desc)
    await state.set_state(ChallengeForm.time_str)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00):")


@router.message(ChallengeForm.time_str)
async def ch_add_time(message: types.Message, state: FSMContext) -> None:
    time_str = (message.text or "").strip()
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if len(time_str) != 5 or time_str[2] != ":":
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(time_str=time_str)
    await state.set_state(ChallengeForm.end_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '-' —á—Ç–æ–±—ã –±–µ–∑ —Å—Ä–æ–∫–∞):")

@router.message(ChallengeForm.end_date)
async def ch_add_end_date(message: types.Message, state: FSMContext) -> None:
    end_date_str = (message.text or "").strip()
    data = await state.get_data()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_date = None
    if end_date_str != "-":
        try:
            from datetime import datetime
            end_date = datetime.strptime(end_date_str, "%d.%m.%Y").date()
            if end_date <= date.today():
                await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
            return
    
    user = message.from_user
    if not user:
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        ch = Challenge(
            user_id=db_user.id,
            title=data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            description=data.get("description"),
            time_str=data.get("time_str", "07:00"),
            days_mask="1111110",  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä–æ–º–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
            end_date=end_date,
        )
        session.add(ch)
    
    await state.clear()
    end_date_text = f" –¥–æ {end_date.strftime('%d.%m.%Y')}" if end_date else ""
    await message.answer(f"–ß–µ–ª–ª–µ–Ω–¥–∂ —Å–æ–∑–¥–∞–Ω ‚úÖ{end_date_text}", reply_markup=challenges_menu())


@router.callback_query(F.data.startswith("ch_open:"))
async def ch_open(cb: types.CallbackQuery) -> None:
    ch_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        ch = await session.get(Challenge, ch_id)
    if not ch:
        await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    end_date_text = f"\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ch.end_date.strftime('%d.%m.%Y')}" if ch.end_date else "\n–ë–µ–∑ —Å—Ä–æ–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è"
    text = f"{ch.title}\n{ch.description or ''}\n–í—Ä–µ–º—è: {ch.time_str}\n–°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–µ–Ω' if ch.is_active else '–≤—ã–∫–ª—é—á–µ–Ω'}{end_date_text}"
    await cb.message.edit_text(text, reply_markup=challenge_detail_keyboard(ch_id))
    await cb.answer()


@router.callback_query(F.data.startswith("ch_done:"))
async def ch_done(cb: types.CallbackQuery) -> None:
    ch_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        ch = await session.get(Challenge, ch_id)
        if ch:
            session.add(ChallengeLog(challenge_id=ch_id, date=date.today(), completed=True))
    await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ")
    await ch_open(cb)


class ChallengeTimeForm(StatesGroup):
    waiting_time = State()


@router.callback_query(F.data.startswith("ch_time:"))
async def ch_time(cb: types.CallbackQuery, state: FSMContext) -> None:
    ch_id = int(cb.data.split(":", 1)[1])
    await state.update_data(ch_id=ch_id)
    await state.set_state(ChallengeTimeForm.waiting_time)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è HH:MM:")
    await cb.answer()


@router.message(ChallengeTimeForm.waiting_time)
async def ch_time_set(message: types.Message, state: FSMContext) -> None:
    t = (message.text or "").strip()
    data = await state.get_data()
    ch_id = int(data["ch_id"])  # type: ignore[index]
    if len(t) != 5 or t[2] != ":":
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
        return
    async with session_scope() as session:
        ch = await session.get(Challenge, ch_id)
        if ch:
            ch.time_str = t
    await state.clear()
    await message.answer("–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=challenges_menu())


class ChallengeEditForm(StatesGroup):
    waiting_text = State()
    waiting_end_date = State()


@router.callback_query(F.data.startswith("ch_edit:"))
async def ch_edit(cb: types.CallbackQuery, state: FSMContext) -> None:
    ch_id = int(cb.data.split(":", 1)[1])
    await state.update_data(ch_id=ch_id)
    await state.set_state(ChallengeEditForm.waiting_text)
    await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞:")
    await cb.answer()


@router.message(ChallengeEditForm.waiting_text)
async def ch_edit_set(message: types.Message, state: FSMContext) -> None:
    txt = (message.text or "").strip()
    data = await state.get_data()
    ch_id = int(data["ch_id"])  # type: ignore[index]
    async with session_scope() as session:
        ch = await session.get(Challenge, ch_id)
        if ch:
            ch.title = txt
    await state.clear()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–æ ‚úÖ", reply_markup=challenges_menu())


@router.callback_query(F.data.startswith("ch_edit_end_date:"))
async def ch_edit_end_date(cb: types.CallbackQuery, state: FSMContext) -> None:
    ch_id = int(cb.data.split(":", 1)[1])
    await state.update_data(ch_id=ch_id)
    await state.set_state(ChallengeEditForm.waiting_end_date)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ä–æ–∫):")
    await cb.answer()


@router.message(ChallengeEditForm.waiting_end_date)
async def ch_edit_end_date_set(message: types.Message, state: FSMContext) -> None:
    end_date_str = (message.text or "").strip()
    data = await state.get_data()
    ch_id = int(data["ch_id"])  # type: ignore[index]
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_date = None
    if end_date_str != "-":
        try:
            from datetime import datetime
            end_date = datetime.strptime(end_date_str, "%d.%m.%Y").date()
            if end_date <= date.today():
                await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
            return
    
    async with session_scope() as session:
        ch = await session.get(Challenge, ch_id)
        if ch:
            ch.end_date = end_date
    
    await state.clear()
    end_date_text = f" –¥–æ {end_date.strftime('%d.%m.%Y')}" if end_date else ""
    await message.answer(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ{end_date_text}", reply_markup=challenges_menu())


@router.callback_query(F.data.startswith("ch_toggle:"))
async def ch_toggle(cb: types.CallbackQuery) -> None:
    ch_id = int(cb.data.split(":", 1)[1])
    async with session_scope() as session:
        ch = await session.get(Challenge, ch_id)
        if ch:
            ch.is_active = not ch.is_active
    await cb.answer("–ì–æ—Ç–æ–≤–æ")
    await ch_open(cb)


