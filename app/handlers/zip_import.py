#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è –∏–∑ ZIP —Ñ–∞–π–ª–æ–≤.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç ZIP —Ñ–∞–π–ª, –±–æ—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç .db —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ.
"""

import os
import tempfile
from typing import Optional
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from app.db.session import session_scope
from app.db.models import User
from app.services.zip_importer import ZipImporterService
from app.keyboards.common import back_main_menu

router = Router()


class ZipImportFSM(StatesGroup):
    waiting_for_zip = State()


@router.message(F.text.startswith("/import_health"))
async def import_health_start(message: types.Message, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è."""
    user = message.from_user
    if not user:
        return
    
    await state.set_state(ZipImportFSM.waiting_for_zip)
    
    text = (
        "üìÅ **–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è –∏–∑ ZIP —Ñ–∞–π–ª–∞**\n\n"
        "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1. üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ ZIP\n"
        "2. üì§ –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ ZIP —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
        "3. üîç –ë–æ—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç .db —Ñ–∞–π–ª –∏–∑ ZIP\n"
        "4. üìä –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
        "‚Ä¢ ZIP —Ñ–∞–π–ª—ã —Å .db, .sqlite, .sqlite3 –≤–Ω—É—Ç—Ä–∏\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: Samsung Health –∏ –¥—Ä.\n\n"
        "**–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP —Ñ–∞–π–ª —Å–µ–π—á–∞—Å:**"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_import")],
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(ZipImportFSM.waiting_for_zip, F.document)
async def handle_zip_upload(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª."""
    user = message.from_user
    if not user:
        return
    
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ ZIP —Ñ–∞–π–ª
    if not document.file_name.lower().endswith('.zip'):
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞:** –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–¥–æ—Ä–æ–≤—å—è."
        )
        return
    
    await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é ZIP —Ñ–∞–π–ª...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_document(document)
        
        if not file_path:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        await message.answer("üîÑ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
        
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == user.id)
            )).scalar_one()
            
            if not db_user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                await state.clear()
                return
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            importer = ZipImporterService()
            result = await importer.import_health_data_from_zip(
                session, db_user.id, file_path
            )
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                text = (
                    "‚úÖ **–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!**\n\n"
                    f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:**\n"
                    f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['total_records']}\n"
                    f"‚Ä¢ –¢–∞–±–ª–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result['tables_imported'])}\n"
                    f"‚Ä¢ –¢–∞–±–ª–∏—Ü—ã: {', '.join(result['tables_imported'])}\n\n"
                    "üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–¥–æ—Ä–æ–≤—å–µ'\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã\n"
                    "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–ª–∏\n\n"
                    "üìÅ –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
                )
                
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="ü©∫ –û—Ç–∫—Ä—ã—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="menu_health"),
                            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="health_analytics")
                        ],
                        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                    ]
                )
                
                await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
                
            else:
                # –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                await message.answer(
                    f"‚ùå **–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:**\n\n"
                    f"{result['error']}\n\n"
                    "üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                    "‚Ä¢ ZIP —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                    "‚Ä¢ –í–Ω—É—Ç—Ä–∏ –Ω–µ—Ç .db —Ñ–∞–π–ª–∞\n"
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
                )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)
            
    except Exception as e:
        await message.answer(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:**\n\n"
            f"{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    finally:
        await state.clear()


@router.message(ZipImportFSM.waiting_for_zip)
async def handle_wrong_file_type(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞."""
    await message.answer(
        "‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP —Ñ–∞–π–ª!**\n\n"
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç, –Ω–æ –Ω—É–∂–µ–Ω ZIP —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–¥–æ—Ä–æ–≤—å—è.\n\n"
        "**–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.**"
    )


@router.callback_query(F.data == "cancel_import")
async def cancel_import(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞."""
    await state.clear()
    await cb.message.edit_text(
        "‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /import_health"
    )
    await cb.answer()


@router.message(F.text.startswith("/health_import_help"))
async def health_import_help(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è."""
    text = (
        "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è**\n\n"
        "**–ö–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:**\n\n"
        "üì± **Samsung Health:**\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ Samsung Health\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ –¥–∞–Ω–Ω—ã–µ\n"
        "4. –≠–∫—Å–ø–æ—Ä—Ç –≤ ZIP\n\n"

        "üí™ **–î—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
        "‚Ä¢ –ò—â–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö '–≠–∫—Å–ø–æ—Ä—Ç' –∏–ª–∏ '–°–∫–∞—á–∞—Ç—å'\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ZIP –∏–ª–∏ SQLite\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n"
        "**–ó–∞—Ç–µ–º –≤ –±–æ—Ç–µ:**\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/import_health`\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∏–º–ø–æ—Ä—Ç–∞\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        "‚Ä¢ –®–∞–≥–∏, –∫–∞–ª–æ—Ä–∏–∏, —Å–æ–Ω\n"
        "‚Ä¢ –ü—É–ª—å—Å, –≤–µ—Å, –¥–∞–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –†–µ–≥—É–ª—è—Ä–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÅ –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç", callback_data="start_import"),
                InlineKeyboardButton(text="ü©∫ –†–∞–∑–¥–µ–ª –∑–¥–æ—Ä–æ–≤—å—è", callback_data="menu_health")
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "start_import")
async def start_import_callback(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ callback."""
    await import_health_start(cb.message, state)
    await cb.answer()


async def download_document(document: types.Document) -> Optional[str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.zip')
        temp_path = temp_file.name
        temp_file.close()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await document.bot.get_file(document.file_id)
        await document.bot.download_file(file_info.file_path, temp_path)
        
        return temp_path
        
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)
        raise e
