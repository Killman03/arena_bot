from __future__ import annotations

from datetime import date

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from app.db.models import Goal, GoalScope, GoalStatus, ABAnalysis, User
from app.db.models.goal import GoalReminder
from app.db.session import session_scope
from app.services.llm import deepseek_complete
from app.utils.timezone_utils import get_user_time_info
from app.keyboards.common import back_main_menu


router = Router()


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π
class GoalFSM(StatesGroup):
    waiting_title = State()
    waiting_description = State()
    waiting_due_date = State()
    waiting_reminder_time = State()


# –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
MOTIVATION_MESSAGES = [
    "–°–µ–≥–æ–¥–Ω—è –≤–µ–ª–∏–∫–∏–π –¥–µ–Ω—å! –°–µ–≥–æ–¥–Ω—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–∏: {goal_title} üéØ‚ú®",
    "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –°–µ–≥–æ–¥–Ω—è —Ç—ã –¥–æ—Å—Ç–∏–≥–∞–µ—à—å —Ü–µ–ª–∏: {goal_title} üöÄüí™",
    "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å - –¥–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {goal_title} üåüüéâ",
    "–ü–æ–º–Ω–∏ –æ —Å–≤–æ–µ–π —Ü–µ–ª–∏: {goal_title}. –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —É—Å–ø–µ—Ö—É! üî•",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã –≤–æ–ø–ª–æ—â–∞–µ—à—å –≤ –∂–∏–∑–Ω—å —Ü–µ–ª—å: {goal_title} ‚≠êüí´",
    "–¢–≤–æ—è —Ü–µ–ª—å: {goal_title} –∂–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è! –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω! üéØüî•",
    "–°–µ–≥–æ–¥–Ω—è –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {goal_title} ‚ú®üåü",
    "–ü–æ–º–Ω–∏, —Ä–∞–¥–∏ —á–µ–≥–æ —Ç—ã –Ω–∞—á–∞–ª! –°–µ–≥–æ–¥–Ω—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–∏: {goal_title} üéØüí™",
    "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ç–≤–æ–µ–π —Ü–µ–ª–∏: {goal_title}. –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! üöÄ‚≠ê",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ! –¶–µ–ª—å: {goal_title} üåüüéØ"
]


@router.message(Command("goal_add"))
async def add_goal(message: types.Message) -> None:
    """Add a simple daily goal from text after command."""
    user = message.from_user
    if not user:
        return
    text = (message.text or "").replace("/goal_add", "").strip()
    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /goal_add –í–∞—à–∞ —Ü–µ–ª—å")
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        goal = Goal(
            user_id=db_user.id,
            scope=GoalScope.day,
            title=text,
            description=None,
            start_date=date.today(),
            status=GoalStatus.active,
        )
        session.add(goal)
            # AI: –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SMART-–æ–ø–∏—Å–∞–Ω–∏—è
    status_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SMART-–æ–ø–∏—Å–∞–Ω–∏–µ...")
    smart_prompt = f"–û—Ü–µ–Ω–∏ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ñ–æ—Ä–º–∏ SMART-–æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ: '{text}'. –í—ã–≤–µ–¥–∏ 5 –ø—É–Ω–∫—Ç–æ–≤: S,M,A,R,T."
    try:
        smart = await deepseek_complete(smart_prompt, system="–¢—ã –∫–æ—É—á –ø–æ —Ü–µ–ª—è–º. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.")

        await status_msg.edit_text("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\nSMART:\n" + smart)
    except Exception:
        await status_msg.edit_text("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")


@router.message(Command("goals"))
async def list_goals(message: types.Message) -> None:
    user = message.from_user
    if not user:
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        goals = (await session.execute(select(Goal).where(Goal.user_id == db_user.id, Goal.status == GoalStatus.active))).scalars().all()
    if not goals:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –Ω–µ—Ç")
        return
    lines = [f"[{g.scope}] {g.title}" for g in goals]
    await message.answer("–í–∞—à–∏ —Ü–µ–ª–∏:\n- " + "\n- ".join(lines))


@router.message(Command("ab"))
async def ab_analysis(message: types.Message) -> None:
    """Store quick A/B analysis: /ab —Å–µ–π—á–∞—Å | —Ö–æ—á—É."""
    user = message.from_user
    if not user:
        return
    payload = (message.text or "").replace("/ab", "", 1).strip()
    if "|" not in payload:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ab –≥–¥–µ_—è_—Å–µ–π—á–∞—Å | –≥–¥–µ_—Ö–æ—á—É_–±—ã—Ç—å")
        return
    current, desired = [p.strip() for p in payload.split("|", 1)]
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        session.add(ABAnalysis(user_id=db_user.id, current_state=current, desired_state=desired))
    # AI: –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
    status_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥–∞ A ‚Üí B...")
    try:
        plan = await deepseek_complete(
            f"–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è A='{current}' –≤ B='{desired}'. –î–∞–π 5 —à–∞–≥–æ–≤.",
            system="–ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã.",
        )
        await status_msg.edit_text("A/B –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ\n–ü–ª–∞–Ω:\n" + plan)
    except Exception:
        await status_msg.edit_text("A/B –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úÖ")


@router.message(Command("smart"))
async def smart_goal(message: types.Message) -> None:
    """–°–æ–∑–¥–∞—Ç—å SMART-—Ü–µ–ª—å: /smart scope title | description | due_date(YYYY-MM-DD)"""
    user = message.from_user
    if not user:
        return
    payload = (message.text or "").replace("/smart", "", 1).strip()
    if payload.count("|") < 1:
        await message.answer("–ü—Ä–∏–º–µ—Ä: /smart 1m –ü—Ä–æ–±–µ–∂–∞—Ç—å 10–∫–º | –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3—Ä/–Ω–µ–¥ | 2025-10-01")
        return
    head, rest = payload.split(" ", 1)
    scope_map = {"5y": GoalScope.five_years, "1y": GoalScope.year, "1m": GoalScope.month, "1d": GoalScope.day}
    scope = scope_map.get(head, GoalScope.month)
    title, desc, *maybe_due = [p.strip() for p in rest.split("|")]
    due = date.fromisoformat(maybe_due[0]) if maybe_due else None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        g = Goal(user_id=db_user.id, scope=scope, title=title, description=desc or None, start_date=date.today(), due_date=due)
        session.add(g)
    # AI: SMART-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    status_msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é SMART-–∫—Ä–∏—Ç–µ—Ä–∏–∏...")
    try:
        smart_feedback = await deepseek_complete(
            f"–ü—Ä–æ–≤–µ—Ä—å SMART —Ü–µ–ª—å: title='{title}', desc='{desc}', due='{due}'. –î–∞–π —É–ª—É—á—à–µ–Ω–∏—è –≤ 3-5 –ø—É–Ω–∫—Ç–∞—Ö.",
            system="–≠–∫—Å–ø–µ—Ä—Ç SMART",
        )
        await status_msg.edit_text("SMART —Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + smart_feedback)
    except Exception:
        await status_msg.edit_text("SMART —Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")


@router.callback_query(F.data == "goals_smart_hint")
async def goals_smart_hint(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ SMART —Ü–µ–ª—è–º."""
    text = (
        "üéØ **SMART - –º–µ—Ç–æ–¥–∏–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π:**\n\n"
        "**S - Specific (–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è)**\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–•–æ—á—É –±—ã—Ç—å –∑–¥–æ—Ä–æ–≤—ã–º'\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–ü—Ä–æ–±–µ–∂–∞—Ç—å 10 –∫–º –∑–∞ 45 –º–∏–Ω—É—Ç'\n\n"
        "**M - Measurable (–ò–∑–º–µ—Ä–∏–º–∞—è)**\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–ë–æ–ª—å—à–µ —á–∏—Ç–∞—Ç—å'\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å'\n\n"
        "**A - Achievable (–î–æ—Å—Ç–∏–∂–∏–º–∞—è)**\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–°—Ç–∞—Ç—å –æ–ª–∏–º–ø–∏–π—Å–∫–∏–º —á–µ–º–ø–∏–æ–Ω–æ–º –∑–∞ –º–µ—Å—è—Ü'\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–ü—Ä–æ–±–µ–∂–∞—Ç—å –ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤'\n\n"
        "**R - Relevant (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è)**\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–í—ã—É—á–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–π' (–µ—Å–ª–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤ –ö–∏—Ç–∞–π)\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã'\n\n"
        "**T - Time-bound (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)**\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: '–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∫—É–ø–∏—Ç—å –¥–æ–º'\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '–ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –¥–æ–º –∑–∞ 5 –ª–µ—Ç'\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã SMART —Ü–µ–ª–µ–π:**\n"
        "‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–∂–∞—Ç—å 5 –∫–º –∑–∞ 25 –º–∏–Ω—É—Ç –∫ 1 –∏—é–Ω—è 2025\n"
        "‚Ä¢ üí∞ –ù–∞–∫–æ–ø–∏—Ç—å 500,000 —Ä—É–±–ª–µ–π –Ω–∞ –æ—Ç–ø—É—Å–∫ –∫ –¥–µ–∫–∞–±—Ä—é 2025\n"
        "‚Ä¢ üìö –ü—Ä–æ—á–∏—Ç–∞—Ç—å 12 –∫–Ω–∏–≥ –ø–æ –±–∏–∑–Ω–µ—Å—É –≤ 2025 –≥–æ–¥—É\n"
        "‚Ä¢ üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–¥–Ω—è—Ç—å –∂–∏–º –ª–µ–∂–∞ 100 –∫–≥ –∫ –º–∞—Ä—Ç—É 2025\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–π:**\n"
        "‚Ä¢ `/goal_add –í–∞—à–∞ —Ü–µ–ª—å` - –ø—Ä–æ—Å—Ç–∞—è —Ü–µ–ª—å –Ω–∞ –¥–µ–Ω—å\n"
        "‚Ä¢ `/smart 1m –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | 2025-06-01` - SMART —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü"
    )
    
    await cb.message.edit_text(text, reply_markup=back_main_menu(), parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "goals_add")
async def goals_add_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏."""
    await state.set_state(GoalFSM.waiting_title)
    
    text = (
        "üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ü—Ä–æ–±–µ–∂–∞—Ç—å 10 –∫–º –∑–∞ 45 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞—Ç—å 12 –∫–Ω–∏–≥ –≤ —ç—Ç–æ–º –≥–æ–¥—É\n"
        "‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç—å 500,000 —Ä—É–±–ª–µ–π –Ω–∞ –æ—Ç–ø—É—Å–∫\n"
        "‚Ä¢ –í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–æ —É—Ä–æ–≤–Ω—è B2"
    )
    
    await cb.message.edit_text(text, reply_markup=back_main_menu(), parse_mode=None)
    await cb.answer()


@router.message(GoalFSM.waiting_title)
async def goals_add_title(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    await state.update_data(title=message.text.strip())
    await state.set_state(GoalFSM.waiting_description)
    
    text = (
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π:\n"
        "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        "‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–æ 30 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
        "‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å 20% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü\n"
        "‚Ä¢ –ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
    )
    
    await message.answer(text, reply_markup=back_main_menu(), parse_mode=None)


@router.message(GoalFSM.waiting_description)
async def goals_add_description(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    await state.update_data(description=message.text.strip())
    await state.set_state(GoalFSM.waiting_due_date)
    
    text = (
        "üìÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 31.12.2025\n"
        "‚Ä¢ 01.06.2025\n"
        "‚Ä¢ 15.03.2025\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    )
    
    await message.answer(text, reply_markup=back_main_menu(), parse_mode=None)





@router.message(GoalFSM.waiting_due_date)
async def goals_add_due_date(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–µ–ª–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç scope –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    due_date_text = message.text.strip().lower()
    
    if due_date_text == "—Å–µ–≥–æ–¥–Ω—è":
        due_date = date.today()
    else:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
            if "." in due_date_text:
                day, month, year = due_date_text.split(".")
                due_date = date(int(year), int(month), int(day))
            else:
                # –ü—Ä–æ–±—É–µ–º ISO —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ fallback
                due_date = date.fromisoformat(due_date_text)
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=back_main_menu()
            )
            return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º scope –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –¥–Ω—è—Ö
    today = date.today()
    days_diff = (due_date - today).days
    
    if days_diff <= 1:
        scope = GoalScope.day
    elif days_diff <= 7:
        scope = GoalScope.week
    elif days_diff <= 30:
        scope = GoalScope.month
    elif days_diff <= 90:
        scope = GoalScope.three_months
    elif days_diff <= 180:
        scope = GoalScope.six_months
    elif days_diff <= 365:
        scope = GoalScope.year
    else:
        scope = GoalScope.five_years
    
    await state.update_data(due_date=due_date, scope=scope)
    await state.set_state(GoalFSM.waiting_reminder_time)
    
    text = (
        "‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ü–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 09:00 - —É—Ç—Ä–æ–º\n"
        "‚Ä¢ 18:00 - –≤–µ—á–µ—Ä–æ–º\n"
        "‚Ä¢ 21:00 - –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
    )
    
    await message.answer(text, reply_markup=back_main_menu(), parse_mode=None)


@router.message(GoalFSM.waiting_reminder_time)
async def goals_add_reminder_time(message: types.Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–ª—å."""
    reminder_time = message.text.strip().lower()
    
    if reminder_time == "–Ω–µ—Ç":
        reminder_time = None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    title = data.get("title")
    description = data.get("description")
    scope = data.get("scope")
    due_date = data.get("due_date")
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å
        goal = Goal(
            user_id=db_user.id,
            scope=scope,
            title=title,
            description=description,
            start_date=date.today(),
            due_date=due_date,
            status=GoalStatus.active
        )
        session.add(goal)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–∏
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if reminder_time:
            # –õ–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time_info = get_user_time_info(db_user.timezone)
            print(f"üïê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–∏ '{title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {db_user.telegram_id}")
            print(f"   üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time_info['timezone']}")
            print(f"   üïê –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {time_info['user_local_time'].strftime('%H:%M:%S')}")
            print(f"   üåç UTC –≤—Ä–µ–º—è: {time_info['utc_time'].strftime('%H:%M:%S')}")
            print(f"   ‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_time}")
            print(f"   üìä –°–º–µ—â–µ–Ω–∏–µ: {time_info['offset_hours']:+g} —á")
            
            reminder = GoalReminder(
                user_id=db_user.id,
                goal_id=goal.id,
                reminder_time=reminder_time,
                is_active=True
            )
            session.add(reminder)
        
        await session.commit()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SMART-–æ–ø–∏—Å–∞–Ω–∏–µ
    status_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SMART-–æ–ø–∏—Å–∞–Ω–∏–µ...")
    smart_prompt = f"–û—Ü–µ–Ω–∏ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ñ–æ—Ä–º–∏ SMART-–æ–ø–∏—Å–∞–Ω–∏–µ: '{title}'. –í—ã–≤–µ–¥–∏ 5 –ø—É–Ω–∫—Ç–æ–≤ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown:\n\n**S (–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å):**\n**M (–ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å):**\n**A (–î–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å):**\n**R (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å):**\n**T (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏):**"
    
    try:
        smart = await deepseek_complete(smart_prompt, system="–¢—ã –∫–æ—É—á –ø–æ —Ü–µ–ª—è–º. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.")
        

        
        await status_msg.edit_text(
            f"üéØ –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
            f"**–°—Ä–æ–∫:** {due_date.strftime('%d.%m.%Y')}\n"
            f"**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** {'–î–∞' if reminder_time else '–ù–µ—Ç'}\n\n"
            f"**SMART-–æ–ø–∏—Å–∞–Ω–∏–µ:**\n{smart}",
            parse_mode="Markdown"
        )
    except Exception:
        await status_msg.edit_text(
            f"üéØ –¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
            f"**–°—Ä–æ–∫:** {due_date.strftime('%d.%m.%Y')}\n"
            f"**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** {'–î–∞' if reminder_time else '–ù–µ—Ç'}\n\n"
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SMART-–æ–ø–∏—Å–∞–Ω–∏–µ",
            parse_mode="Markdown"
        )
    
    await state.clear()


@router.callback_query(F.data == "goals_edit")
async def goals_edit_start(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        goals = (await session.execute(select(Goal).where(Goal.user_id == db_user.id, Goal.status == GoalStatus.active))).scalars().all()
    
    if not goals:
        await cb.message.edit_text(
            "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π:\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=back_main_menu(),
            parse_mode=None
        )
        await cb.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard_buttons = []
    for goal in goals:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {goal.title[:30]}{'...' if len(goal.title) > 30 else ''}",
                callback_data=f"goal_edit:{goal.id}"
            )
        ])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_goals")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await cb.message.edit_text(
        "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode=None
    )
    await cb.answer()


@router.callback_query(F.data.startswith("goal_edit:"))
async def goal_edit_select(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏."""
    goal_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        goal = (await session.execute(select(Goal).where(Goal.id == goal_id))).scalar_one()
        
        if not goal:
            await cb.answer("–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ü–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(editing_goal_id=goal_id)
        await state.set_state(GoalFSM.waiting_title)
        
        text = (
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {goal.title}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:"
        )
        
        await cb.message.edit_text(text, reply_markup=back_main_menu(), parse_mode=None)
        await cb.answer()


@router.callback_query(F.data == "goals_reminders")
async def goals_reminders(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ü–µ–ª–µ–π."""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        reminders = (
            await session.execute(
                select(Goal, GoalReminder)
                .join(GoalReminder, Goal.id == GoalReminder.goal_id)
                .where(Goal.user_id == db_user.id, Goal.status == GoalStatus.active)
            )
        ).all()
        
        if not reminders:
            await cb.message.edit_text(
                "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º:\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ü–µ–ª—è–º.\n\n"
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏.",
                reply_markup=back_main_menu(),
                parse_mode=None
            )
            await cb.answer()
            return
        
        text = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º:\n\n"
        
        for goal, reminder in reminders:
            text += f"üéØ {goal.title}\n"
            text += f"‚è∞ –í—Ä–µ–º—è: {reminder.reminder_time}\n"
            text += f"üìÖ –°—Ä–æ–∫: {goal.due_date.strftime('%d.%m.%Y') if goal.due_date else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        
        text += "üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!"
        
        await cb.message.edit_text(text, reply_markup=back_main_menu(), parse_mode=None)
        await cb.answer()


@router.message(Command("test_reminder"))
async def test_reminder(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    user = message.from_user
    if not user:
        return
    
    try:
        from app.services.goal_reminders import send_test_reminder
        
        await message.answer("üß™ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ...")
        await send_test_reminder(user.id, "–¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å", message.bot)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")


