from __future__ import annotations

from datetime import date, datetime, timedelta
from typing import Optional

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, and_, or_
from sqlalchemy.orm import selectinload

from app.db.models import Todo, User
from app.db.session import session_scope
from app.keyboards.common import (
    todo_menu, todo_priority_menu, todo_edit_menu, 
    todo_list_keyboard, todo_view_keyboard, todo_daily_reminder_keyboard,
    todo_type_menu, back_main_menu
)

router = Router()


class TodoStates(StatesGroup):
    waiting_title = State()
    waiting_description = State()
    waiting_date = State()
    waiting_priority = State()
    edit_title = State()
    edit_description = State()
    edit_date = State()
    edit_priority = State()


@router.callback_query(F.data == "menu_todo")
async def todo_main_menu(cb: types.CallbackQuery) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é To-Do —Ä–∞–∑–¥–µ–ª–∞"""
    await cb.message.edit_text(
        "üìù <b>To-Do —Ä–∞–∑–¥–µ–ª</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏.",
        reply_markup=todo_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_add")
async def todo_add_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞"""
    await cb.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=todo_type_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_type_single")
async def todo_type_single_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä —Ä–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    await state.update_data(is_daily=False)
    await state.set_state(TodoStates.waiting_title)
    await cb.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_type_daily")
async def todo_type_daily_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    await state.update_data(is_daily=True)
    await state.set_state(TodoStates.waiting_title)
    await cb.message.edit_text(
        "üîÑ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(TodoStates.waiting_title)
async def todo_title_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if len(message.text) > 500:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π
    data = await state.get_data()
    if data.get("is_daily", False):
        # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç—É, —Å—Ä–∞–∑—É –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        await state.set_state(TodoStates.waiting_priority)
        await message.answer(
            "üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
            reply_markup=todo_priority_menu()
        )
    else:
        # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        await state.set_state(TodoStates.waiting_description)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )


@router.message(TodoStates.waiting_description)
async def todo_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    description = message.text if message.text != "-" else None
    await state.update_data(description=description)
    await state.set_state(TodoStates.waiting_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é':"
    )


@router.message(TodoStates.waiting_date)
async def todo_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏"""
    date_text = message.text.lower().strip()
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    if date_text == "—Å–µ–≥–æ–¥–Ω—è":
        due_date = date.today()
    elif date_text == "–∑–∞–≤—Ç—Ä–∞":
        due_date = date.today() + timedelta(days=1)
    elif date_text == "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é":
        due_date = date.today() + timedelta(days=7)
    else:
        try:
            due_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
    
    await state.update_data(due_date=due_date)
    await state.set_state(TodoStates.waiting_priority)
    await message.answer(
        "üî¥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=todo_priority_menu()
    )


@router.callback_query(F.data.startswith("todo_priority_"))
async def todo_priority_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    priority = cb.data.replace("todo_priority_", "")
    
    if priority not in ["high", "medium", "low"]:
        await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    todo_id = data.get("todo_id")
    
    if todo_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
        async with session_scope() as session:
            user = await session.execute(
                select(User).where(User.telegram_id == cb.from_user.id)
            )
            db_user = user.scalar_one()
            
            todo = await session.execute(
                select(Todo).where(
                    and_(
                        Todo.id == todo_id,
                        Todo.user_id == db_user.id
                    )
                )
            )
            todo_obj = todo.scalar_one()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            todo_obj.priority = priority
            await session.commit()
            
            await cb.answer("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            await cb.message.edit_text(
                f"üìù <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {todo_obj.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"<b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
                f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority}\n"
                f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è:</b> {'–î–∞' if todo_obj.is_daily else '–ù–µ—Ç'}",
                reply_markup=todo_edit_menu(todo_id),
                parse_mode="HTML"
            )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await state.update_data(priority=priority)
        
        async with session_scope() as session:
            user = await session.execute(
                select(User).where(User.telegram_id == cb.from_user.id)
            )
            db_user = user.scalar_one()
            
            # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É, –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö - —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            due_date = date.today() if data.get("is_daily", False) else data["due_date"]
            description = data.get("description") if not data.get("is_daily", False) else None
            
            todo = Todo(
                user_id=db_user.id,
                title=data["title"],
                description=description,
                due_date=due_date,
                priority=priority,
                is_daily=data.get("is_daily", False)
            )
            session.add(todo)
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        priority_text = {"high": "–í—ã—Å–æ–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "low": "–ù–∏–∑–∫–∏–π"}
        task_type = "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è" if data.get("is_daily", False) else "üìÖ –†–∞–∑–æ–≤–∞—è"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if data.get("is_daily", False):
            message_text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
                f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_icons[priority]} {priority_text[priority]}\n"
                f"üîÑ <b>–¢–∏–ø:</b> {task_type}\n"
                f"üìÖ <b>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b>"
            )
        else:
            message_text = (
                f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {data['due_date'].strftime('%d.%m.%Y')}\n"
                f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_icons[priority]} {priority_text[priority]}\n"
                f"üîÑ <b>–¢–∏–ø:</b> {task_type}"
            )
            
            if data["description"]:
                message_text += f"\nüìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}"
        
        await cb.message.edit_text(
            message_text,
            reply_markup=todo_menu(),
            parse_mode="HTML"
        )
        await state.clear()
    
    await cb.answer()


@router.callback_query(F.data == "todo_list")
async def todo_list_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        todos = await session.execute(
            select(Todo).where(Todo.user_id == db_user.id).order_by(Todo.due_date, Todo.priority)
        )
        todos_list = todos.scalars().all()
    
    if not todos_list:
        await cb.message.edit_text(
            "üìù <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!",
            reply_markup=todo_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    message_text = "üìù <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    
    current_date = None
    for todo in todos_list:
        if todo.due_date != current_date:
            current_date = todo.due_date
            date_str = "–°–µ–≥–æ–¥–Ω—è" if todo.due_date == date.today() else \
                      "–ó–∞–≤—Ç—Ä–∞" if todo.due_date == date.today() + timedelta(days=1) else \
                      todo.due_date.strftime("%d.%m.%Y")
            message_text += f"\nüìÖ <b>{date_str}:</b>\n"
        
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        status_icon = "‚úÖ" if todo.is_completed else "‚≠ï"
        message_text += f"{status_icon} {priority_icons[todo.priority]} {todo.title}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞
    todos_data = [(todo.id, todo.title, todo.is_completed) for todo in todos_list]
    keyboard = todo_list_keyboard(todos_data)
    
    await cb.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_view:"))
async def todo_view_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        todo = await session.execute(
            select(Todo).where(Todo.id == todo_id)
        )
        todo_obj = todo.scalar_one_or_none()
        
        if not todo_obj:
            await cb.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        if todo_obj.user_id != db_user.id:
            await cb.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        priority_text = {"high": "–í—ã—Å–æ–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "low": "–ù–∏–∑–∫–∏–π"}
        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if todo_obj.is_completed else "‚≠ï –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        daily_text = "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è" if todo_obj.is_daily else "üìÖ –†–∞–∑–æ–≤–∞—è"
        
        message_text = (
            f"üìù <b>–ó–∞–¥–∞—á–∞ #{todo_obj.id}</b>\n\n"
            f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
            f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_icons[todo_obj.priority]} {priority_text[todo_obj.priority]}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"üîÑ <b>–¢–∏–ø:</b> {daily_text}\n"
            f"‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {todo_obj.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        if todo_obj.description:
            message_text += f"\n\nüìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{todo_obj.description}"
    
    await cb.message.edit_text(
        message_text,
        reply_markup=todo_view_keyboard(todo_id),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_mark_complete:"))
async def todo_mark_complete_handler(cb: types.CallbackQuery) -> None:
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    todo_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        todo = await session.execute(
            select(Todo).where(Todo.id == todo_id)
        )
        todo_obj = todo.scalar_one_or_none()
        
        if not todo_obj:
            await cb.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        if todo_obj.user_id != db_user.id:
            await cb.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        todo_obj.is_completed = not todo_obj.is_completed
        await session.commit()
        
        status_text = "‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if todo_obj.is_completed else "‚≠ï –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        await cb.answer(f"–ó–∞–¥–∞—á–∞ {status_text}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await todo_view_handler(cb)


@router.callback_query(F.data.startswith("todo_delete_confirm:"))
async def todo_delete_confirm_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    
    await cb.message.edit_text(
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{todo_id}</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"todo_delete:{todo_id}"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"todo_view:{todo_id}")
                ]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_delete:"))
async def todo_delete_handler(cb: types.CallbackQuery) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        todo = await session.execute(
            select(Todo).where(Todo.id == todo_id)
        )
        todo_obj = todo.scalar_one_or_none()
        
        if not todo_obj:
            await cb.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        if todo_obj.user_id != db_user.id:
            await cb.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        await session.delete(todo_obj)
        await session.commit()
        
        await cb.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    await todo_list_handler(cb)





@router.callback_query(F.data == "todo_edit")
async def todo_edit_start(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
        todos = await session.execute(
            select(Todo).where(Todo.user_id == db_user.id).order_by(Todo.due_date)
        )
        todos_list = todos.scalars().all()
    
    if not todos_list:
        await cb.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=todo_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞
    message_text = "‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
    
    for todo in todos_list:
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        status_icon = "‚úÖ" if todo.is_completed else "‚≠ï"
        message_text += f"{status_icon} {priority_icons[todo.priority]} {todo.title}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    todos_data = [(todo.id, todo.title, todo.is_completed) for todo in todos_list]
    keyboard = todo_list_keyboard(todos_data)
    
    await cb.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_delete")
async def todo_delete_start(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
        todos = await session.execute(
            select(Todo).where(Todo.user_id == db_user.id).order_by(Todo.due_date)
        )
        todos_list = todos.scalars().all()
    
    if not todos_list:
        await cb.message.edit_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=todo_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞
    message_text = "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    
    for todo in todos_list:
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        status_icon = "‚úÖ" if todo.is_completed else "‚≠ï"
        message_text += f"{status_icon} {priority_icons[todo.priority]} {todo.title}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    todos_data = [(todo.id, todo.title, todo.is_completed) for todo in todos_list]
    keyboard = todo_list_keyboard(todos_data)
    
    await cb.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_complete")
async def todo_complete_start(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞–ª–æ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        todos = await session.execute(
            select(Todo).where(
                and_(
                    Todo.user_id == db_user.id,
                    Todo.is_completed == False
                )
            ).order_by(Todo.due_date)
        )
        todos_list = todos.scalars().all()
    
    if not todos_list:
        await cb.message.edit_text(
            "‚úÖ <b>–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=todo_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±–æ—Ä–∞
    message_text = "‚úÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:</b>\n\n"
    
    for todo in todos_list:
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        message_text += f"‚≠ï {priority_icons[todo.priority]} {todo.title}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    todos_data = [(todo.id, todo.title, todo.is_completed) for todo in todos_list]
    keyboard = todo_list_keyboard(todos_data)
    
    await cb.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_daily")
async def todo_daily_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        todos = await session.execute(
            select(Todo).where(
                and_(
                    Todo.user_id == db_user.id,
                    Todo.is_daily == True
                )
            ).order_by(Todo.priority)
        )
        todos_list = todos.scalars().all()
    
    if not todos_list:
        await cb.message.edit_text(
            "üîÑ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=todo_menu(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    message_text = "üîÑ <b>–í–∞—à–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
    
    for todo in todos_list:
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        status_icon = "‚úÖ" if todo.is_completed else "‚≠ï"
        message_text += f"{status_icon} {priority_icons[todo.priority]} {todo.title}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞
    todos_data = [(todo.id, todo.title, todo.is_completed) for todo in todos_list]
    keyboard = todo_list_keyboard(todos_data)
    
    await cb.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router.callback_query(F.data == "todo_add_tomorrow")
async def todo_add_tomorrow_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–∑ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await cb.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=todo_type_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_view_tomorrow")
async def todo_view_tomorrow_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = date.today() + timedelta(days=1)
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow_todos = await session.execute(
            select(Todo).where(
                and_(
                    Todo.user_id == db_user.id,
                    Todo.due_date == tomorrow
                )
            ).order_by(Todo.priority)
        )
        tomorrow_list = tomorrow_todos.scalars().all()
    
    if not tomorrow_list:
        await cb.message.edit_text(
            f"üìÖ <b>–ó–∞–¥–∞—á–∏ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')}</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",
            reply_markup=todo_daily_reminder_keyboard(),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    message_text = f"üìÖ <b>–ó–∞–¥–∞—á–∏ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')}:</b>\n\n"
    
    for todo in tomorrow_list:
        priority_icons = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}
        status_icon = "‚úÖ" if todo.is_completed else "‚≠ï"
        message_text += f"{status_icon} {priority_icons[todo.priority]} {todo.title}\n"
    
    await cb.message.edit_text(
        message_text,
        reply_markup=todo_daily_reminder_keyboard(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_copy_today")
async def todo_copy_today_handler(cb: types.CallbackQuery) -> None:
    """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    today = date.today()
    tomorrow = date.today() + timedelta(days=1)
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–¥–∞—á–∏
        today_todos = await session.execute(
            select(Todo).where(
                and_(
                    Todo.user_id == db_user.id,
                    Todo.due_date == today
                )
            )
        )
        today_list = today_todos.scalars().all()
    
    if not today_list:
        await cb.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        return
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    copied_count = 0
    for todo in today_list:
        new_todo = Todo(
            user_id=db_user.id,
            title=todo.title,
            description=todo.description,
            due_date=tomorrow,
            priority=todo.priority,
            is_daily=todo.is_daily
        )
        session.add(new_todo)
        copied_count += 1
    
    await session.commit()
    
    await cb.answer(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied_count} –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    await todo_view_tomorrow_handler(cb)


@router.callback_query(F.data == "todo_remind_later")
async def todo_remind_later_handler(cb: types.CallbackQuery) -> None:
    """–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ –æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ To-Do"""
    await cb.message.edit_text(
        "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ</b>\n\n"
        "–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ To-Do —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å.",
        reply_markup=todo_daily_reminder_keyboard(),
        parse_mode="HTML"
    )
    await cb.answer()
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å


@router.callback_query(F.data == "todo_menu")
async def todo_menu_handler(cb: types.CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é To-Do —Ä–∞–∑–¥–µ–ª–∞"""
    await cb.message.edit_text(
        "üìù <b>To-Do —Ä–∞–∑–¥–µ–ª</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏.",
        reply_markup=todo_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "todo_priority_high")
async def todo_priority_high_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(priority="high")
    await todo_priority_handler(cb, state)


@router.callback_query(F.data == "todo_priority_medium")
async def todo_priority_medium_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(priority="medium")
    await todo_priority_handler(cb, state)


@router.callback_query(F.data == "todo_priority_low")
async def todo_priority_low_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    await state.update_data(priority="low")
    await todo_priority_handler(cb, state)


@router.callback_query(F.data.startswith("todo_edit_title:"))
async def todo_edit_title_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    await state.set_state(TodoStates.edit_title)
    await state.update_data(todo_id=todo_id)
    await cb.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_edit_description:"))
async def todo_edit_description_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    await state.set_state(TodoStates.edit_description)
    await state.update_data(todo_id=todo_id)
    await cb.message.edit_text(
        "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_edit_date:"))
async def todo_edit_date_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    await state.set_state(TodoStates.edit_date)
    await state.update_data(todo_id=todo_id)
    await cb.message.edit_text(
        "üìÖ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é':",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_edit_priority:"))
async def todo_edit_priority_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    await state.update_data(todo_id=todo_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    await cb.message.edit_text(
        "üî¥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</b>",
        reply_markup=todo_priority_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data.startswith("todo_toggle_daily:"))
async def todo_toggle_daily_handler(cb: types.CallbackQuery) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        todo = await session.execute(
            select(Todo).where(
                and_(
                    Todo.id == todo_id,
                    Todo.user_id == db_user.id
                )
            )
        )
        todo_obj = todo.scalar_one()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        todo_obj.is_daily = not todo_obj.is_daily
        await session.commit()
        
        status = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π" if todo_obj.is_daily else "–æ–±—ã—á–Ω–æ–π"
        await cb.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–¥–µ–ª–∞–Ω–∞ {status}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await cb.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {todo_obj.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {todo_obj.priority}\n"
            f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è:</b> {'–î–∞' if todo_obj.is_daily else '–ù–µ—Ç'}",
            reply_markup=todo_edit_menu(todo_id),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("todo_edit_menu:"))
async def todo_edit_menu_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    todo_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == cb.from_user.id)
        )
        db_user = user.scalar_one()
        
        todo = await session.execute(
            select(Todo).where(
                and_(
                    Todo.id == todo_id,
                    Todo.user_id == db_user.id
                )
            )
        )
        todo_obj = todo.scalar_one()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await cb.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {todo_obj.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {todo_obj.priority}\n"
            f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è:</b> {'–î–∞' if todo_obj.is_daily else '–ù–µ—Ç'}",
            reply_markup=todo_edit_menu(todo_id),
            parse_mode="HTML"
        )
    
    await cb.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(TodoStates.edit_title)
async def todo_edit_title_message_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if len(message.text) > 500:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    data = await state.get_data()
    todo_id = data.get("todo_id")
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        db_user = user.scalar_one()
        
        todo = await session.execute(
            select(Todo).where(
                and_(
                    Todo.id == todo_id,
                    Todo.user_id == db_user.id
                )
            )
        )
        todo_obj = todo.scalar_one()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        todo_obj.title = message.text
        await session.commit()
        
        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        await message.answer(
            f"üìù <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {todo_obj.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {todo_obj.priority}\n"
            f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è:</b> {'–î–∞' if todo_obj.is_daily else '–ù–µ—Ç'}",
            reply_markup=todo_edit_menu(todo_id),
            parse_mode="HTML"
        )
    
    await state.clear()


@router.message(TodoStates.edit_description)
async def todo_edit_description_message_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    description = message.text if message.text != "-" else None
    
    data = await state.get_data()
    todo_id = data.get("todo_id")
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        db_user = user.scalar_one()
        
        todo = await session.execute(
            select(Todo).where(
                and_(
                    Todo.id == todo_id,
                    Todo.user_id == db_user.id
                )
            )
        )
        todo_obj = todo.scalar_one()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        todo_obj.description = description
        await session.commit()
        
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        await message.answer(
            f"üìù <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {todo_obj.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {todo_obj.priority}\n"
            f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è:</b> {'–î–∞' if todo_obj.is_daily else '–ù–µ—Ç'}",
            reply_markup=todo_edit_menu(todo_id),
            parse_mode="HTML"
        )
    
    await state.clear()


@router.message(TodoStates.edit_date)
async def todo_edit_date_message_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏"""
    date_text = message.text.lower().strip()
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    if date_text == "—Å–µ–≥–æ–¥–Ω—è":
        due_date = date.today()
    elif date_text == "–∑–∞–≤—Ç—Ä–∞":
        due_date = date.today() + timedelta(days=1)
    elif date_text == "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é":
        due_date = date.today() + timedelta(days=7)
    else:
        try:
            due_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'"
            )
            return
    
    data = await state.get_data()
    todo_id = data.get("todo_id")
    
    async with session_scope() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        db_user = user.scalar_one()
        
        todo = await session.execute(
            select(Todo).where(
                and_(
                    Todo.id == todo_id,
                    Todo.user_id == db_user.id
                )
            )
        )
        todo_obj = todo.scalar_one()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        todo_obj.due_date = due_date
        await session.commit()
        
        await message.answer("‚úÖ –î–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        await message.answer(
            f"üìù <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {todo_obj.title}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {todo_obj.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–î–∞—Ç–∞:</b> {todo_obj.due_date.strftime('%d.%m.%Y')}\n"
            f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {todo_obj.priority}\n"
            f"<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è:</b> {'–î–∞' if todo_obj.is_daily else '–ù–µ—Ç'}",
            reply_markup=todo_edit_menu(todo_id),
            parse_mode="HTML"
        )
    
    await state.clear()
