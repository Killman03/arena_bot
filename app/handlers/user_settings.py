from __future__ import annotations

import asyncio
from typing import Optional
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State

from sqlalchemy import select
from app.db.session import session_scope
from app.db.models import User
from app.utils.timezone_utils import COMMON_TIMEZONES, validate_timezone, get_timezone_display_name
from app.keyboards.common import settings_menu

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
SELECTING_TIMEZONE = "selecting_timezone"


@router.message(F.text == "/timezone")
async def timezone_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await message.answer(
        "üåç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=create_timezone_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("timezone_"))
async def timezone_selection(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezone_str = cb.data.replace("timezone_", "")
    
    if timezone_str == "custom":
        from app.keyboards.common import back_main_menu
        print(f"DEBUG: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECTING_TIMEZONE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
        
        await cb.message.edit_text(
            "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ <code>Europe/Moscow</code>\n"
            "‚Ä¢ <code>America/New_York</code>\n"
            "‚Ä¢ <code>Asia/Tokyo</code>\n"
            "‚Ä¢ <code>UTC+3</code>\n"
            "‚Ä¢ <code>UTC-5</code>\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        
        await state.set_state(SELECTING_TIMEZONE)
        print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {await state.get_state()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        final_state = await state.get_state()
        print(f"DEBUG: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {final_state}")
        
        await cb.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    await save_user_timezone(cb.from_user.id, timezone_str)
    
    display_name = get_timezone_display_name(timezone_str)
    await cb.message.edit_text(
        f"‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"üåç <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—è—Å:</b> {display_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º –º–µ—Å—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º.",
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(lambda message: True)
async def process_custom_timezone(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    current_state = await state.get_state()
    print(f"DEBUG: üéØ FSM –û–±—Ä–∞–±–æ—Ç—á–∏–∫ process_custom_timezone –≤—ã–∑–≤–∞–Ω!")
    print(f"DEBUG: üéØ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    print(f"DEBUG: üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    print(f"DEBUG: üéØ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message.text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if current_state != SELECTING_TIMEZONE:
        print(f"DEBUG: üéØ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {SELECTING_TIMEZONE}")
        return
    
    print(f"DEBUG: üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞")
    
    timezone_input = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: '{timezone_input}'")
    print(f"DEBUG: –í–∞–ª–∏–¥–∞—Ü–∏—è UTC —Ñ–æ—Ä–º–∞—Ç–∞: {timezone_input.startswith('UTC')}")
    
    if timezone_input.startswith("UTC"):
        offset = parse_utc_offset(timezone_input)
        print(f"DEBUG: UTC —Å–º–µ—â–µ–Ω–∏–µ: {offset}")
        is_valid = offset is not None
    else:
        try:
            import pytz
            pytz.timezone(timezone_input)
            is_valid = True
            print(f"DEBUG: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤–∞–ª–∏–¥–µ–Ω")
        except Exception as e:
            is_valid = False
            print(f"DEBUG: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    print(f"DEBUG: –ò—Ç–æ–≥–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {is_valid}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    if is_valid:
        try:
            await save_user_timezone(message.from_user.id, timezone_input)
            print(f"DEBUG: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            
            await message.answer(
                f"‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üåç <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—è—Å:</b> {timezone_input}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º –º–µ—Å—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º.",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
            f"–í—ã –≤–≤–µ–ª–∏: <code>{timezone_input}</code>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ <code>Europe/Moscow</code>\n"
            "‚Ä¢ <code>UTC+3</code>\n"
            "‚Ä¢ <code>UTC-5</code>\n"
            "‚Ä¢ <code>America/New_York</code>\n"
            "‚Ä¢ <code>Asia/Tokyo</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /timezone",
            parse_mode="HTML"
        )
    
    await state.clear()


@router.message(F.text == "/mytimezone")
async def show_current_timezone(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with session_scope() as session:
        user = (await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )).scalar_one()
        
        if user.timezone:
            display_name = get_timezone_display_name(user.timezone)
            await message.answer(
                f"üåç <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b>\n\n"
                f"üìç {display_name}\n\n"
                f"–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /timezone",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π /timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                parse_mode="HTML"
            )


def create_timezone_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    keyboard = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    regions = {
        "üá∑üá∫ –†–æ—Å—Å–∏—è –∏ –°–ù–ì": ["Europe/Moscow", "Asia/Almaty", "Asia/Tashkent"],
        "üá™üá∫ –ï–≤—Ä–æ–ø–∞": ["Europe/London", "Europe/Berlin", "Europe/Paris"],
        "üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞": ["America/New_York", "America/Los_Angeles", "America/Chicago"],
        "üåè –ê–∑–∏—è": ["Asia/Tokyo", "Asia/Shanghai", "Asia/Dubai"],
        "üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è": ["Australia/Sydney", "Australia/Perth"]
    }
    
    for region_name, timezones in regions.items():
        keyboard.append([InlineKeyboardButton(text=region_name, callback_data="noop")])
        row = []
        for tz in timezones:
            display_name = get_timezone_display_name(tz)
            row.append(InlineKeyboardButton(text=display_name, callback_data=f"timezone_{tz}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    keyboard.append([InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="timezone_custom")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def save_user_timezone(telegram_id: int, timezone_str: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    async with session_scope() as session:
        user = (await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )).scalar_one()
        
        user.timezone = timezone_str
        await session.commit()


def parse_utc_offset(timezone_str: str) -> Optional[int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ UTC+3, UTC-5 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö.
    
    Args:
        timezone_str: –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC+3, UTC-5, UTC+3:30 –∏ —Ç.–¥.
    
    Returns:
        –°–º–µ—â–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä–æ–±–Ω—ã–º –¥–ª—è UTC+3:30)
    """
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è UTC+3, UTC-5, UTC+3:30
    pattern = r'^UTC([+-])(\d{1,2})(?::(\d{2}))?$'
    match = re.match(pattern, timezone_str)
    
    if match:
        sign = match.group(1)
        hours = int(match.group(2))
        minutes = int(match.group(3)) if match.group(3) else 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã
        total_hours = hours + (minutes / 60)
        
        if sign == '-':
            total_hours = -total_hours
        
        return int(total_hours)
    
    return None


@router.callback_query(F.data == "menu_settings")
async def settings_menu_handler(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await cb.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=settings_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "settings_timezone")
async def settings_timezone_handler(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í—ã–±—Ä–∞—Ç—å —Ç–∞–π–º–∑–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    await cb.message.edit_text(
        "üåç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=create_timezone_keyboard(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "noop")
async def noop_handler(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    await cb.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ")


# –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å FSM


@router.callback_query(F.data == "back_main")
async def back_main_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()
    print(f"DEBUG: –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    if current_state == SELECTING_TIMEZONE:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        await state.clear()
        print(f"DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
        
        await cb.message.edit_text(
            "üåç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
            reply_markup=create_timezone_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from app.keyboards.common import main_menu
        await cb.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()
