from __future__ import annotations

from datetime import date, timedelta
from typing import Optional

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, desc
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.db.session import session_scope
from app.db.models import User, HealthMetric, HealthGoal, HealthDailyReminder, GoogleFitToken
from app.keyboards.common import health_menu, health_track_keyboard, back_main_menu
from app.services.llm import deepseek_complete
from app.services.google_drive import GoogleDriveService


router = Router()


@router.message(F.text.startswith("/google_fit_auth"))
async def google_fit_auth_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Fit."""
    user = message.from_user
    if not user:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /google_fit_auth –ö–û–î\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∞–≤ 'Google Fit (–ø—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)' –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
        )
        return
    
    auth_code = parts[1]
    
    try:
        from app.services.google_fit import GoogleFitService
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            google_service = GoogleFitService()
            tokens = google_service.exchange_code_for_tokens(auth_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É
            google_token = GoogleFitToken(
                user_id=db_user.id,
                integration_type="google_fit",
                access_token=tokens['token'],
                refresh_token=tokens.get('refresh_token'),
                token_uri=tokens['token_uri'],
                client_id=tokens['client_id'],
                client_secret=tokens['client_secret'],
                scopes=','.join(tokens['scopes'])
            )
            session.add(google_token)
            await session.commit()
            
            await message.answer(
                "‚úÖ Google Fit —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Fit: {str(e)}")


@router.message(F.text.startswith("/health_help"))
async def health_help_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é."""
    text = (
        "ü©∫ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ó–¥–æ—Ä–æ–≤—å–µ:**\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "‚Ä¢ üìà –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π - –∑–∞–ø–∏—Å—å —à–∞–≥–æ–≤, —Å–Ω–∞, –≤–µ—Å–∞ –∏ –¥—Ä.\n"
        "‚Ä¢ üéØ –¶–µ–ª–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π (8000 —à–∞–≥–æ–≤/–¥–µ–Ω—å)\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤\n"
        "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ üìÅ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∑–∫–∞ ZIP —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
        "**–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**\n"
        "‚Ä¢ üì± –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è (Samsung Health, Google Fit)\n"
        "‚Ä¢ üì¶ ZIP —Ñ–∞–π–ª—ã —Å .db –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –∏–º–ø–æ—Ä—Ç\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/import_health` - –Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ `/health_import_help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É\n"
        "‚Ä¢ `/track` - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `/goal` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏\n\n"
        "üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÅ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'\n\n"
        "**–ù–æ–≤–∏–Ω–∫–∞:** üìÅ **–ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç ZIP —Ñ–∞–π–ª–æ–≤** - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="ü©∫ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="menu_health"),
                InlineKeyboardButton(text="üìÅ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="start_import"),
                InlineKeyboardButton(text="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É", callback_data="health_import_help")
            ],
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(F.text.startswith("/health_connect_sync"))
async def health_connect_sync_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Health Connect."""
    user = message.from_user
    if not user:
        return
    
    await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —Å Health Connect...")
    
    try:
        from app.services.health_connect import HealthConnectService
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            google_token = (
                await session.execute(
                    select(GoogleFitToken).where(
                        GoogleFitToken.user_id == db_user.id,
                        GoogleFitToken.integration_type == "health_connect"
                    )
                )
            ).scalar_one_or_none()
            
            if not google_token:
                await message.answer(
                    "‚ùå Health Connect –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Health Connect –∫–æ–º–∞–Ω–¥–æ–π:\n"
                    "`/health_connect_auth –ö–û–î`\n\n"
                    "–ò–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é: –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí üì± Health Connect"
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å
            credentials_dict = {
                'token': google_token.access_token,
                'refresh_token': google_token.refresh_token,
                'token_uri': google_token.token_uri,
                'client_id': google_token.client_id,
                'client_secret': google_token.client_secret,
                'scopes': google_token.scopes.split(',')
            }
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            health_service = HealthConnectService()
            result = await health_service.sync_health_data(session, db_user.id, credentials_dict)
            
            if 'error' in result:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result['error']}")
            else:
                text = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Health Connect!\n\n"
                text += f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: Health Connect\n\n"
                
                summary = result.get('data_summary', {})
                if summary.get('steps'):
                    text += f"üö∂ –®–∞–≥–∏: {summary['steps']}\n"
                if summary.get('calories'):
                    text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {summary['calories']}\n"
                if summary.get('sleep_minutes'):
                    text += f"üò¥ –°–æ–Ω: {summary['sleep_minutes']} –º–∏–Ω\n"
                if summary.get('heart_rate'):
                    text += f"‚ù§Ô∏è –ü—É–ª—å—Å: {summary['heart_rate']} —É–¥/–º–∏–Ω\n"
                if summary.get('weight_kg'):
                    text += f"‚öñÔ∏è –í–µ—Å: {summary['weight_kg']} –∫–≥\n"
                if summary.get('systolic') and summary.get('diastolic'):
                    text += f"ü©∏ –î–∞–≤–ª–µ–Ω–∏–µ: {summary['systolic']}/{summary['diastolic']}\n"
                
                await message.answer(text)
                
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")


@router.message(F.text.startswith("/health_connect_auth"))
async def health_connect_auth_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Health Connect."""
    user = message.from_user
    if not user:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /health_connect_auth –ö–û–î\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∞–≤ 'Health Connect' –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
            "üì± **Health Connect** - –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Google –¥–ª—è Android 14+\n"
            "‚Ä¢ –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ —á–µ–º Google Fit\n"
            "‚Ä¢ –õ—É—á—à–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å"
        )
        return
    
    auth_code = parts[1]
    
    try:
        from app.services.health_connect import HealthConnectService
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            health_service = HealthConnectService()
            tokens = health_service.exchange_code_for_tokens(auth_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É
            google_token = GoogleFitToken(
                user_id=db_user.id,
                integration_type="health_connect",
                access_token=tokens['token'],
                refresh_token=tokens.get('refresh_token'),
                token_uri=tokens['token_uri'],
                client_id=tokens['client_id'],
                client_secret=tokens['client_secret'],
                scopes=','.join(tokens['scopes'])
            )
            session.add(google_token)
            await session.commit()
            
            await message.answer(
                "‚úÖ Health Connect —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "üì± **Health Connect** - –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Google\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Health Connect\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (Fitbit, Samsung Health –∏ –¥—Ä.)\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'!"
            )
            
    except Exception as e:
        error_message = str(e)
        if "invalid_grant" in error_message.lower():
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
                "‚Ä¢ –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç)\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ–¥\n\n"
                "üîÑ –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'"
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Health Connect: {str(e)}")


@router.message(F.text.startswith("/google_drive_auth"))
async def google_drive_auth_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Drive."""
    user = message.from_user
    if not user:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /google_drive_auth –ö–û–î\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∞–≤ 'Google Drive (—á–µ—Ä–µ–∑ Health Sync)' –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
            "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –Ω–∞–∂–º–∏—Ç–µ 'üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Google Drive' –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
        )
        return
    
    auth_code = parts[1]
    
    try:
        from app.services.google_drive import GoogleDriveService
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            google_service = GoogleDriveService()
            tokens = google_service.exchange_code_for_tokens(auth_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É
            google_token = GoogleFitToken(
                user_id=db_user.id,
                integration_type="google_drive",
                access_token=tokens['token'],
                refresh_token=tokens.get('refresh_token'),
                token_uri=tokens['token_uri'],
                client_id=tokens['client_id'],
                client_secret=tokens['client_secret'],
                scopes=','.join(tokens['scopes'])
            )
            session.add(google_token)
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            try:
                credentials_dict = {
                    'token': tokens['token'],
                    'refresh_token': tokens.get('refresh_token'),
                    'token_uri': tokens['token_uri'],
                    'client_id': tokens['client_id'],
                    'client_secret': tokens['client_secret'],
                    'scopes': tokens['scopes']
                }
                
                files = await google_service.find_health_files(session, db_user.id, credentials_dict)
                
                if files:
                    await message.answer(
                        "‚úÖ Google Drive —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                        f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(files)}\n"
                        f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {files[0]['name']}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ Health Sync\n"
                        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n"
                        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ\n\n"
                        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'!"
                    )
                else:
                    await message.answer(
                        "‚úÖ Google Drive —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                        "‚Ä¢ Health Sync —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
                        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Google Drive –≤–∫–ª—é—á–µ–Ω\n"
                        "‚Ä¢ –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
                        "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –Ω–∞–∂–º–∏—Ç–µ 'üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Google Drive' –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
                    )
                    
            except Exception as check_error:
                await message.answer(
                    "‚úÖ Google Drive —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ Health Sync\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                    "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'!"
                )
            
    except Exception as e:
        error_message = str(e)
        if "invalid_grant" in error_message.lower():
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n"
                "‚Ä¢ –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª (–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç)\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–æ–¥\n\n"
                "üîÑ –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'"
            )
        elif "access_denied" in error_message.lower():
            await message.answer(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ Google Drive\n"
                "‚Ä¢ –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'"
            )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Drive: {error_message}\n\n"
                "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –Ω–∞–∂–º–∏—Ç–µ 'üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Google Drive' –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
            )


@router.callback_query(F.data == "health_track_menu")
async def health_track_menu(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=health_track_keyboard())
    await cb.answer()


class TrackFSM(StatesGroup):
    waiting_value = State()
    metric = State()


@router.callback_query(F.data.startswith("health_track:"))
async def health_track_select(cb: types.CallbackQuery, state: FSMContext) -> None:
    metric = cb.data.split(":", 1)[1]
    await state.update_data(metric=metric)
    prompt = {
        "steps": "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—á–∏—Å–ª–æ):",
        "calories": "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—á–∏—Å–ª–æ):",
        "sleep": "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (—á–∏—Å–ª–æ):",
        "hr": "–í–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å –ø–æ–∫–æ—è (—á–∏—Å–ª–æ):",
        "weight": "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 82.5):",
        "bp": "–í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ/–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 120/80:",
    }.get(metric, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(TrackFSM.waiting_value)
    await cb.message.edit_text(prompt, reply_markup=back_main_menu())
    await cb.answer()


@router.message(TrackFSM.waiting_value)
async def health_track_store(message: types.Message, state: FSMContext) -> None:
    user = message.from_user
    if not user:
        return
    data = await state.get_data()
    metric = data.get("metric")
    text = (message.text or "").strip()
    steps = calories = sleep = hr = syst = diast = None
    weight = None
    try:
        if metric == "steps":
            steps = int(text)
        elif metric == "calories":
            calories = int(text)
        elif metric == "sleep":
            sleep = int(text)
        elif metric == "hr":
            hr = int(text)
        elif metric == "weight":
            weight = float(text.replace(",", "."))
        elif metric == "bp":
            s, d = text.split("/", 1)
            syst = int(s.strip()); diast = int(d.strip())
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        rec = (
            await session.execute(
                select(HealthMetric).where(HealthMetric.user_id == db_user.id, HealthMetric.day == date.today())
            )
        ).scalar_one_or_none()
        if not rec:
            rec = HealthMetric(user_id=db_user.id, day=date.today())
            session.add(rec)
        if steps is not None: rec.steps = steps
        if calories is not None: rec.calories = calories
        if sleep is not None: rec.sleep_minutes = sleep
        if hr is not None: rec.heart_rate_resting = hr
        if weight is not None: rec.weight_kg = weight
        if syst is not None: rec.systolic = syst
        if diast is not None: rec.diastolic = diast
    await state.clear()
    await message.answer("–ó–∞–ø–∏—Å–∞–Ω–æ ‚úÖ", reply_markup=back_main_menu())


class GoalFSM(StatesGroup):
    waiting_metric = State()
    waiting_target = State()


@router.callback_query(F.data == "health_goals")
async def health_goals_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(GoalFSM.waiting_metric)
    await cb.message.edit_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å. –ü—Ä–∏–º–µ—Ä: steps 8000 –ò–õ–ò sleep 420",
        reply_markup=back_main_menu(),
    )
    await cb.answer()


@router.message(GoalFSM.waiting_metric)
async def health_goals_set(message: types.Message, state: FSMContext) -> None:
    user = message.from_user
    if not user:
        return
    payload = (message.text or "").lower().split()
    if len(payload) < 2:
        await message.answer("–ü—Ä–∏–º–µ—Ä: steps 8000")
        return
    metric, target_str = payload[0], payload[1]
    try:
        target = float(target_str)
    except Exception:
        await message.answer("–ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –æ–∂–∏–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –º–µ—Ç—Ä–∏–∫–∏.")
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        session.add(HealthGoal(user_id=db_user.id, metric=metric, target_value=target, period="daily"))
    await state.clear()
    await message.answer("–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=back_main_menu())


@router.callback_query(F.data == "health_analytics")
async def health_analytics(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer(); return
    await cb.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...", show_alert=False)
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        metrics = (
            await session.execute(
                select(HealthMetric).where(HealthMetric.user_id == db_user.id).order_by(desc(HealthMetric.day)).limit(30)
            )
        ).scalars().all()
    if not metrics:
        await cb.message.edit_text("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –≤–Ω–µ—Å–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –¢—Ä–µ–∫–∏–Ω–≥–µ.", reply_markup=health_menu())
        return
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
    context_lines = []
    for m in metrics:
        context_lines.append(
            f"{m.day}: steps={m.steps}, cal={m.calories}, sleep={m.sleep_minutes}, hr={m.heart_rate_resting}, weight={m.weight_kg}, bp={m.systolic}/{m.diastolic}"
        )
    context = "\n".join(context_lines)
    system = (
        "–¢—ã –º–µ–Ω—Ç–æ—Ä-–∫–æ—É—á –¥–ª—è –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è (—à–∞–≥–∏, –∫–∞–ª–æ—Ä–∏–∏, —Å–æ–Ω, –ø—É–ª—å—Å, –≤–µ—Å, –¥–∞–≤–ª–µ–Ω–∏–µ) –∑–∞ 2-4 –Ω–µ–¥–µ–ª–∏,"
        " –æ—Ç–º–µ—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, —Ä–∏—Å–∫–∏ –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —á—Ç–æ —É—Å–∏–ª–∏—Ç—å, —á—Ç–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, 5-7 –ø—É–Ω–∫—Ç–æ–≤."
    )
    try:
        text = await deepseek_complete(
            prompt=f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n{context}\n\n–î–∞–π –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
            system=system,
            max_tokens=700,
        )
    except Exception as e:
        await cb.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É: {e}")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await cb.message.edit_text("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:", reply_markup=back_main_menu(), parse_mode=None)
    parts = _split_into_two_messages(text)
    if parts:
        await cb.message.answer(parts[0], parse_mode=None)
    if len(parts) > 1:
        await cb.message.answer(parts[1], parse_mode=None)


class RemindFSM(StatesGroup):
    waiting_time = State()


@router.callback_query(F.data == "health_reminders")
async def health_reminders(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(RemindFSM.waiting_time)
    await cb.message.edit_text(
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 21:00:",
        reply_markup=back_main_menu(),
    )
    await cb.answer()


@router.message(RemindFSM.waiting_time)
async def health_reminders_set(message: types.Message, state: FSMContext) -> None:
    user = message.from_user
    if not user:
        return
    t = (message.text or "").strip()
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        rec = (
            await session.execute(select(HealthDailyReminder).where(HealthDailyReminder.user_id == db_user.id))
        ).scalar_one_or_none()
        if not rec:
            rec = HealthDailyReminder(user_id=db_user.id)
            session.add(rec)
        rec.time_str = t
        rec.is_active = True
    await state.clear()
    await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {t} ‚úÖ", reply_markup=back_main_menu())


@router.callback_query(F.data == "health_integrations")
async def health_integrations(cb: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∑–¥–æ—Ä–æ–≤—å—è - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç ZIP —Ñ–∞–π–ª–æ–≤."""
    text = (
        "üìÅ **–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è**\n\n"
        "**–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
        "‚Ä¢ üì± –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è\n"
        "‚Ä¢ üì¶ –ü–æ–ª—É—á–∏—Ç–µ ZIP —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –≤ –±–æ—Ç–∞\n"
        "‚Ä¢ ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
        "‚Ä¢ Samsung Health\n"
        "‚Ä¢ Google Fit\n"
        "‚Ä¢ Apple Health\n"
        "‚Ä¢ Fitbit\n"
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ\n\n"
        "**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        "‚Ä¢ üöÄ –ë—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ\n"
        "‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ (—Ñ–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è)\n"
        "‚Ä¢ üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üíæ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÅ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ZIP", callback_data="start_import"),
                InlineKeyboardButton(text="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É", callback_data="health_import_help")
            ],
            [
                InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", callback_data="health_analytics"),
                InlineKeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="health_goals")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_health")],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "google_integration_help")
async def google_integration_help(cb: types.CallbackQuery) -> None:
    text = (
        "üì± **–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n\n"
        "üì± **Health Connect (Android 14+):**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üì± Health Connect (Android 14+)'\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å—è\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "   `/health_connect_auth –ö–û–î`\n\n"
        "üîó **Google Fit (–ø—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è):**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'Google Fit (–ø—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)'\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ñ–∏—Ç–Ω–µ—Å–∞\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "   `/google_fit_auth –ö–û–î`\n\n"
        "üìÅ **Google Drive (—á–µ—Ä–µ–∑ Health Sync):**\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Health Sync\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Google Drive\n"
        "3. –ù–∞–∂–º–∏—Ç–µ 'Google Drive (—á–µ—Ä–µ–∑ Health Sync)'\n"
        "4. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google\n"
        "5. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Drive\n"
        "6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "7. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "   `/google_drive_auth –ö–û–î`\n\n"
        "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        "‚Ä¢ **Health Connect** - –¥–ª—è Android 14+ (–ª—É—á—à–∏–π –≤—ã–±–æ—Ä)\n"
        "‚Ä¢ **Google Drive** - –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Å—Ç–∞–±–∏–ª—å–Ω–æ)\n"
        "‚Ä¢ **Google Fit** - –¥–ª—è –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud", callback_data="google_cloud_setup"),
                InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="google_integration_faq")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "google_drive_instructions")
async def google_drive_instructions(cb: types.CallbackQuery) -> None:
    text = (
        "üìÅ **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Google Drive:**\n\n"
        "**–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Health Sync**\n"
        "‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ [Health Sync](https://play.google.com/store/apps/details?id=com.urbandroid.healthsync) –∏–∑ Google Play\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å—è\n\n"
        "**–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n"
        "‚Ä¢ –í Health Sync –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'Export' ‚Üí 'Google Drive'\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'Add Export'\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 'Google Drive' –∫–∞–∫ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: 'Daily' (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n"
        "  ‚úÖ Steps (—à–∞–≥–∏)\n"
        "  ‚úÖ Sleep (—Å–æ–Ω)\n"
        "  ‚úÖ Heart Rate (–ø—É–ª—å—Å)\n"
        "  ‚úÖ Weight (–≤–µ—Å)\n"
        "  ‚úÖ Calories (–∫–∞–ª–æ—Ä–∏–∏)\n\n"
        "**–®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–æ—Ç–µ**\n"
        "‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 'Google Drive (—á–µ—Ä–µ–∑ Health Sync)'\n"
        "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/google_drive_auth –ö–û–î`\n\n"
        "**–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Health Sync —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ Google Drive –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–∞!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÅ –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Drive", callback_data="setup_google_drive"),
                InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="google_drive_faq"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")
            ],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "health_connect_instructions")
async def health_connect_instructions(cb: types.CallbackQuery) -> None:
    text = (
        "üì± **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é Health Connect:**\n\n"
        "**–ß—Ç–æ —Ç–∞–∫–æ–µ Health Connect?**\n"
        "Health Connect - —ç—Ç–æ –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Google –¥–ª—è Android 14+, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
        "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ Android 14 –∏–ª–∏ –Ω–æ–≤–µ–µ\n"
        "‚Ä¢ Google Play Services\n"
        "‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ Health Connect\n\n"
        "**–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ó–¥–æ—Ä–æ–≤—å–µ\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ Health Connect - –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç\n"
        "‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Fit –∏–ª–∏ Google Drive\n\n"
        "**–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Health Connect**\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Health Connect –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å—è\n"
        "‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Fitbit, Samsung Health –∏ –¥—Ä.)\n\n"
        "**–®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–æ—Ç–µ**\n"
        "‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ 'üì± Health Connect (Android 14+)'\n"
        "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/health_connect_auth –ö–û–î`\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
        "‚Ä¢ Fitbit, Samsung Health, MyFitnessPal\n"
        "‚Ä¢ Strava, Nike Run Club, Garmin Connect\n"
        "‚Ä¢ Google Fit, Apple Health (—á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)\n\n"
        "**–í–∞–∂–Ω–æ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Health Connect –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–∞!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å Health Connect", callback_data="setup_health_connect"),
                InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="health_connect_faq"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")
            ],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "health_connect_faq")
async def health_connect_faq(cb: types.CallbackQuery) -> None:
    text = (
        "‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ Health Connect:**\n\n"
        "**Q: –ü–æ—á–µ–º—É –Ω–µ –≤–∏–∂—É Health Connect –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö?**\n"
        "A: Health Connect –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ Android 14+. –ù–∞ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Fit –∏–ª–∏ Google Drive.\n\n"
        "**Q: –ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç Health Connect?**\n"
        "A: Fitbit, Samsung Health, MyFitnessPal, Strava, Nike Run Club, Garmin Connect –∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ.\n\n"
        "**Q: –ö–∞–∫ —á–∞—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ?**\n"
        "A: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.\n\n"
        "**Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ Google Cloud Console –≤–∫–ª—é—á–µ–Ω Google Fit API –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ OAuth credentials.\n\n"
        "**Q: –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤?**\n"
        "A: –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω Health Connect –∞–∫–∫–∞—É–Ω—Ç.\n\n"
        "**Q: –ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?**\n"
        "A: –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
        "**Q: –í —á–µ–º –æ—Ç–ª–∏—á–∏–µ –æ—Ç Google Fit?**\n"
        "A: Health Connect - –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å Health Connect", callback_data="setup_health_connect"),
                InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="health_connect_instructions"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")
            ],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "google_drive_faq")
async def google_drive_faq(cb: types.CallbackQuery) -> None:
    text = (
        "‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ Google Drive:**\n\n"
        "**Q: –ü–æ—á–µ–º—É –±–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã?**\n"
        "A: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Health Sync —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –Ω–∞ Google Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'HealthSync' –≤ –≤–∞—à–µ–º Google Drive.\n\n"
        "**Q: –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?**\n"
        "A: CSV, Excel (.xlsx, .xls), JSON. Health Sync –æ–±—ã—á–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ CSV.\n\n"
        "**Q: –ö–∞–∫ —á–∞—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ?**\n"
        "A: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.\n\n"
        "**Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ Google Cloud Console –≤–∫–ª—é—á–µ–Ω Google Drive API –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ OAuth credentials.\n\n"
        "**Q: –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤?**\n"
        "A: –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω Google Drive –∞–∫–∫–∞—É–Ω—Ç.\n\n"
        "**Q: –ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?**\n"
        "A: –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º."
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÅ –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Drive", callback_data="setup_google_drive"),
                InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="google_drive_instructions"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")
            ],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "setup_google_fit")
async def setup_google_fit(cb: types.CallbackQuery) -> None:
    from app.services.google_fit import GoogleFitService
    
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        google_service = GoogleFitService()
        auth_url = google_service.get_authorization_url(db_user.id)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Fit", url=auth_url),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")
                ],
            ]
        )
        text = (
            "üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Fit:**\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Fit'\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google\n"
            "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ñ–∏—Ç–Ω–µ—Å–∞\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "   `/google_fit_auth –ö–û–î`\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "setup_health_connect")
async def setup_health_connect(cb: types.CallbackQuery) -> None:
    from app.services.health_connect import HealthConnectService
    
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        health_service = HealthConnectService()
        auth_url = health_service.get_authorization_url(db_user.id)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å Health Connect", url=auth_url),
                    InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="health_connect_instructions")
                ],
                [
                    InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="health_connect_faq"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")
                ],
            ]
        )
        text = (
            "üì± **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Health Connect:**\n\n"
            "**Health Connect** - –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Google –¥–ª—è Android 14+\n\n"
            "**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
            "‚Ä¢ üîó –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ üì± –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Android 14+\n"
            "‚Ä¢ üöÄ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ —á–µ–º Google Fit\n"
            "‚Ä¢ üîí –õ—É—á—à–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n\n"
            "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
            "‚Ä¢ Fitbit, Samsung Health, MyFitnessPal\n"
            "‚Ä¢ Strava, Nike Run Club, Garmin Connect\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ\n\n"
            "**–®–∞–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å Health Connect'\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google\n"
            "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å—è\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "   `/health_connect_auth –ö–û–î`\n\n"
            "**–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"
        )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "setup_google_drive")
async def setup_google_drive(cb: types.CallbackQuery) -> None:
    from app.services.google_drive import GoogleDriveService
    
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        google_service = GoogleDriveService()
        auth_url = google_service.get_authorization_url(db_user.id)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÅ –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Drive", url=auth_url),
                    InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="google_drive_instructions"),
                    InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="google_drive_faq")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")],
            ]
        )
        text = (
            "üìÅ **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Drive:**\n\n"
            "**–ü–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —É–±–µ–¥–∏—Ç–µ—Å—å:**\n"
            "‚úÖ Health Sync —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ Google Drive\n"
            "‚úÖ –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
            "**–®–∞–≥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üìÅ –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Drive'\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google\n"
            "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Drive\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "   `/google_drive_auth –ö–û–î`\n\n"
            "**–ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"
        )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "google_fit_sync")
async def google_fit_sync(cb: types.CallbackQuery) -> None:
    from app.services.google_fit import GoogleFitService
    
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    await cb.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...", show_alert=False)
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        google_token = (
            await session.execute(
                select(GoogleFitToken).where(
                    GoogleFitToken.user_id == db_user.id,
                    GoogleFitToken.integration_type == "google_fit"
                )
            )
        ).scalar_one_or_none()
        
        if not google_token:
            await cb.message.edit_text("Google Fit –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=back_main_menu())
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å
        credentials_dict = {
            'token': google_token.access_token,
            'refresh_token': google_token.refresh_token,
            'token_uri': google_token.token_uri,
            'client_id': google_token.client_id,
            'client_secret': google_token.client_secret,
            'scopes': google_token.scopes.split(',')
        }
        
        google_service = GoogleFitService()
        result = await google_service.sync_health_data(session, db_user.id, credentials_dict)
        
        if 'error' in result:
            await cb.message.edit_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result['error']}", reply_markup=back_main_menu())
        else:
            text = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            if result.get('steps'):
                text += f"üö∂ –®–∞–≥–∏: {result['steps']}\n"
            if result.get('calories'):
                text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {result['calories']}\n"
            if result.get('sleep_minutes'):
                text += f"üò¥ –°–æ–Ω: {result['sleep_minutes']} –º–∏–Ω\n"
            if result.get('heart_rate'):
                text += f"‚ù§Ô∏è –ü—É–ª—å—Å: {result['heart_rate']} —É–¥/–º–∏–Ω\n"
            if result.get('weight'):
                text += f"‚öñÔ∏è –í–µ—Å: {result['weight']} –∫–≥\n"
            
            await cb.message.edit_text(text, reply_markup=back_main_menu())


@router.callback_query(F.data == "health_connect_sync")
async def health_connect_sync(cb: types.CallbackQuery) -> None:
    from app.services.health_connect import HealthConnectService
    
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    await cb.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —Å Health Connect...", show_alert=False)
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        google_token = (
            await session.execute(
                select(GoogleFitToken).where(
                    GoogleFitToken.user_id == db_user.id,
                    GoogleFitToken.integration_type == "health_connect"
                )
            )
        ).scalar_one_or_none()
        
        if not google_token:
            await cb.message.edit_text("Health Connect –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=back_main_menu())
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å
        credentials_dict = {
            'token': google_token.access_token,
            'refresh_token': google_token.refresh_token,
            'token_uri': google_token.token_uri,
            'client_id': google_token.client_id,
            'client_secret': google_token.client_secret,
            'scopes': google_token.scopes.split(',')
        }
        
        health_service = HealthConnectService()
        result = await health_service.sync_health_data(session, db_user.id, credentials_dict)
        
        if 'error' in result:
            await cb.message.edit_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result['error']}", reply_markup=back_main_menu())
        else:
            text = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Health Connect!\n\n"
            text += f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: Health Connect\n\n"
            
            summary = result.get('data_summary', {})
            if summary.get('steps'):
                text += f"üö∂ –®–∞–≥–∏: {summary['steps']}\n"
            if summary.get('calories'):
                text += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {summary['calories']}\n"
            if summary.get('sleep_minutes'):
                text += f"üò¥ –°–æ–Ω: {summary['sleep_minutes']} –º–∏–Ω\n"
            if summary.get('heart_rate'):
                text += f"‚ù§Ô∏è –ü—É–ª—å—Å: {summary['heart_rate']} —É–¥/–º–∏–Ω\n"
            if summary.get('weight_kg'):
                text += f"‚öñÔ∏è –í–µ—Å: {summary['weight_kg']} –∫–≥\n"
            if summary.get('systolic') and summary.get('diastolic'):
                text += f"ü©∏ –î–∞–≤–ª–µ–Ω–∏–µ: {summary['systolic']}/{summary['diastolic']}\n"
            
            await cb.message.edit_text(text, reply_markup=back_main_menu())


@router.callback_query(F.data == "google_drive_sync")
async def google_drive_sync(cb: types.CallbackQuery) -> None:
    from app.services.google_drive import GoogleDriveService
    
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    await cb.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —Å Google Drive...", show_alert=False)
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        google_token = (
            await session.execute(
                select(GoogleFitToken).where(
                    GoogleFitToken.user_id == db_user.id,
                    GoogleFitToken.integration_type == "google_drive"
                )
            )
        ).scalar_one_or_none()
        
        if not google_token:
            await cb.message.edit_text("Google Drive –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!", reply_markup=back_main_menu())
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä—å
        credentials_dict = {
            'token': google_token.access_token,
            'refresh_token': google_token.refresh_token,
            'token_uri': google_token.token_uri,
            'client_id': google_token.client_id,
            'client_secret': google_token.client_secret,
            'scopes': google_token.scopes.split(',')
        }
        
        google_service = GoogleDriveService()
        result = await google_service.sync_health_data_from_drive(session, db_user.id, credentials_dict)
        
        if 'error' in result:
            await cb.message.edit_text(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result['error']}", reply_markup=back_main_menu())
        else:
            text = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Google Drive!\n\n"
            text += f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {result['file_processed']}\n\n"
            
            summary = result.get('data_summary', {})
            if summary.get('steps_entries'):
                text += f"üö∂ –ó–∞–ø–∏—Å–µ–π —à–∞–≥–æ–≤: {summary['steps_entries']}\n"
            if summary.get('calories_entries'):
                text += f"üî• –ó–∞–ø–∏—Å–µ–π –∫–∞–ª–æ—Ä–∏–π: {summary['calories_entries']}\n"
            if summary.get('sleep_entries'):
                text += f"üò¥ –ó–∞–ø–∏—Å–µ–π —Å–Ω–∞: {summary['sleep_entries']}\n"
            if summary.get('heart_rate_entries'):
                text += f"‚ù§Ô∏è –ó–∞–ø–∏—Å–µ–π –ø—É–ª—å—Å–∞: {summary['heart_rate_entries']}\n"
            if summary.get('weight_entries'):
                text += f"‚öñÔ∏è –ó–∞–ø–∏—Å–µ–π –≤–µ—Å–∞: {summary['weight_entries']}\n"
            if summary.get('blood_pressure_entries'):
                text += f"ü©∏ –ó–∞–ø–∏—Å–µ–π –¥–∞–≤–ª–µ–Ω–∏—è: {summary['blood_pressure_entries']}\n"
            
            await cb.message.edit_text(text, reply_markup=back_main_menu())


@router.callback_query(F.data == "google_fit_disconnect")
async def google_fit_disconnect(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        google_token = (
            await session.execute(
                select(GoogleFitToken).where(
                    GoogleFitToken.user_id == db_user.id,
                    GoogleFitToken.integration_type == "google_fit"
                )
            )
        ).scalar_one_or_none()
        
        if google_token:
            await session.delete(google_token)
            await session.commit()
            await cb.answer("Google Fit –æ—Ç–∫–ª—é—á–µ–Ω!", show_alert=True)
        else:
            await cb.answer("Google Fit –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)
    
    await health_integrations(cb)


@router.callback_query(F.data == "health_connect_disconnect")
async def health_connect_disconnect(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        google_token = (
            await session.execute(
                select(GoogleFitToken).where(
                    GoogleFitToken.user_id == db_user.id,
                    GoogleFitToken.integration_type == "health_connect"
                )
            )
        ).scalar_one_or_none()
        
        if google_token:
            await session.delete(google_token)
            await session.commit()
            await cb.answer("Health Connect –æ—Ç–∫–ª—é—á–µ–Ω!", show_alert=True)
        else:
            await cb.answer("Health Connect –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)
    
    await health_integrations(cb)


@router.callback_query(F.data == "google_drive_disconnect")
async def google_drive_disconnect(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        google_token = (
            await session.execute(
                select(GoogleFitToken).where(
                    GoogleFitToken.user_id == db_user.id,
                    GoogleFitToken.integration_type == "google_drive"
                )
            )
        ).scalar_one_or_none()
        
        if google_token:
            await session.delete(google_token)
            await session.commit()
            await cb.answer("Google Drive –æ—Ç–∫–ª—é—á–µ–Ω!", show_alert=True)
        else:
            await cb.answer("Google Drive –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)
    
    await health_integrations(cb)


@router.callback_query(F.data == "google_cloud_setup")
async def google_cloud_setup(cb: types.CallbackQuery) -> None:
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Cloud Console."""
    text = (
        "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud Console –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:**\n\n"
        "**–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞**\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ [Google Cloud Console](https://console.cloud.google.com/)\n"
        "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
        "3. –ó–∞–ø–æ–º–Ω–∏—Ç–µ **Project ID**\n\n"
        "**–®–∞–≥ 2: –í–∫–ª—é—á–µ–Ω–∏–µ API**\n"
        "–í —Ä–∞–∑–¥–µ–ª–µ **'APIs & Services' ‚Üí 'Library'** –≤–∫–ª—é—á–∏—Ç–µ:\n"
        "‚Ä¢ ‚úÖ **Google Fit API** (–¥–ª—è Health Connect –∏ Google Fit)\n"
        "‚Ä¢ ‚úÖ **Google Drive API** (–¥–ª—è Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)\n"
        "‚Ä¢ ‚úÖ **Google+ API** (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n\n"
        "**–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ OAuth 2.0 credentials**\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ **'APIs & Services' ‚Üí 'Credentials'**\n"
        "2. –ù–∞–∂–º–∏—Ç–µ **'Create Credentials' ‚Üí 'OAuth 2.0 Client IDs'**\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø: **'Web application'**\n"
        "4. –î–æ–±–∞–≤—å—Ç–µ **Authorized redirect URIs**:\n"
        "   ```\n"
        "   http://localhost:8000/auth/google/callback\n"
        "   https://yourdomain.com/auth/google/callback  # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω\n"
        "   ```\n"
        "5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ **Client ID** –∏ **Client Secret**\n\n"
        "**–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è**\n"
        "–í —Ñ–∞–π–ª–µ `.env` –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:\n"
        "```env\n"
        "GOOGLE_CLIENT_ID=your_actual_client_id_here\n"
        "GOOGLE_CLIENT_SECRET=your_actual_client_secret_here\n"
        "GOOGLE_REDIRECT_URI=http://localhost:8000/auth/google/callback\n"
        "```\n\n"
        "**–®–∞–≥ 5: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n"
        "–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è `.env` **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞!\n\n"
        "**üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n"
        "‚Ä¢ [Google Cloud Console](https://console.cloud.google.com/)\n"
        "‚Ä¢ [APIs & Services ‚Üí Library](https://console.cloud.google.com/apis/library)\n"
        "‚Ä¢ [APIs & Services ‚Üí Credentials](https://console.cloud.google.com/apis/credentials)\n\n"
        "**‚ö†Ô∏è –í–∞–∂–Ω–æ:** –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="check_google_config"),
                InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏", callback_data="google_cloud_errors")
            ],
            [
                InlineKeyboardButton(text="üì± Health Connect", callback_data="setup_health_connect"),
                InlineKeyboardButton(text="üîó Google Fit", callback_data="setup_google_fit")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="google_integration_help")],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "google_cloud_errors")
async def google_cloud_errors(cb: types.CallbackQuery) -> None:
    """–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Cloud Console."""
    text = (
        "‚ùå **–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Google Cloud Console:**\n\n"
        "**üö® –û—à–∏–±–∫–∞ 1: '–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'**\n"
        "**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Google credentials\n"
        "**–†–µ—à–µ–Ω–∏–µ:**\n"
        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `.env`\n"
        "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GOOGLE_CLIENT_ID –∏ GOOGLE_CLIENT_SECRET –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
        "**üö® –û—à–∏–±–∫–∞ 2: 'Invalid client_id'**\n"
        "**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Client ID\n"
        "**–†–µ—à–µ–Ω–∏–µ:**\n"
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏–∑ Google Cloud Console –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
        "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
        "**üö® –û—à–∏–±–∫–∞ 3: 'Redirect URI mismatch'**\n"
        "**–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–≤–µ—Ä–Ω—ã–π redirect URI\n"
        "**–†–µ—à–µ–Ω–∏–µ:**\n"
        "1. –í Google Cloud Console –¥–æ–±–∞–≤—å—Ç–µ: `http://localhost:8000/auth/google/callback`\n"
        "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URI –≤ `.env` —Å–æ–≤–ø–∞–¥–∞–µ—Ç\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
        "**üö® –û—à–∏–±–∫–∞ 4: 'API not enabled'**\n"
        "**–ü—Ä–∏—á–∏–Ω–∞:** API –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã\n"
        "**–†–µ—à–µ–Ω–∏–µ:**\n"
        "1. –í–∫–ª—é—á–∏—Ç–µ Google Fit API –∏ Google Drive API\n"
        "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è\n"
        "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n\n"
        "**üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:**\n"
        "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python check_config.py`\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Google Cloud Console –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        "**üí° –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:**\n"
        "‚Ä¢ –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è `.env`\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è credentials\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ redirect URI"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud", callback_data="google_cloud_setup"),
                InlineKeyboardButton(text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="check_google_config")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="google_cloud_setup")],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "check_google_config")
async def check_google_config(cb: types.CallbackQuery) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google credentials."""
    text = (
        "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google credentials:**\n\n"
        "**–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:**\n\n"
        "**1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env**\n"
        "```bash\n"
        "python check_config.py\n"
        "```\n\n"
        "**2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è**\n"
        "```bash\n"
        "python -c \"from app.config import settings; print('Client ID:', settings.google_client_id); print('Client Secret:', 'SET' if settings.google_client_secret else 'NOT SET')\"\n"
        "```\n\n"
        "**3. –¢–µ—Å—Ç Health Connect —Å–µ—Ä–≤–∏—Å–∞**\n"
        "```bash\n"
        "python test_health_connect.py\n"
        "```\n\n"
        "**üìã –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ .env:**\n"
        "```env\n"
        "GOOGLE_CLIENT_ID=123456789-abcdefghijklmnop.apps.googleusercontent.com\n"
        "GOOGLE_CLIENT_SECRET=GOCSPX-abcdefghijklmnopqrstuvwxyz\n"
        "GOOGLE_REDIRECT_URI=http://localhost:8000/auth/google/callback\n"
        "```\n\n"
        "**‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ Client ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç `.apps.googleusercontent.com`\n"
        "‚Ä¢ Client Secret –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å `GOCSPX-`\n"
        "‚Ä¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫\n"
        "‚Ä¢ –í –º–µ–Ω—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤–∏–¥–Ω–æ Health Connect\n\n"
        "**‚ùå –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        "‚Ä¢ Client ID = `your_google_client_id`\n"
        "‚Ä¢ Client Secret = `your_google_client_secret`\n"
        "‚Ä¢ –û—à–∏–±–∫–∞ '–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏\n"
        "‚Ä¢ –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud", callback_data="google_cloud_setup"),
                InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏", callback_data="google_cloud_errors")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="google_cloud_setup")],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "google_integration_faq")
async def google_integration_faq(cb: types.CallbackQuery) -> None:
    """FAQ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º Google."""
    text = (
        "‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º Google:**\n\n"
        "**Q: –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Health Connect?**\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
        "‚Ä¢ Android 14+ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Google Cloud Console\n"
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω .env —Ñ–∞–π–ª\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n"
        "**Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ '–¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'?**\n"
        "A: –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Google credentials:\n"
        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Cloud Console\n"
        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
        "**Q: –ö–∞–∫ —á–∞—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ?**\n"
        "A: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.\n\n"
        "**Q: –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤?**\n"
        "A: –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç Google.\n\n"
        "**Q: –ë–µ–∑–æ–ø–∞—Å–Ω—ã –ª–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?**\n"
        "A: –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
        "**Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?**\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Cloud Console –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –≤–∫–ª—é—á–µ–Ω—ã."
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud", callback_data="google_cloud_setup"),
                InlineKeyboardButton(text="üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="check_google_config")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="google_integration_help")],
        ]
    )
    
    await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await cb.answer()


@router.callback_query(F.data == "start_import")
async def start_import_from_menu(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è."""
    from app.handlers.zip_import import import_health_start
    await import_health_start(cb.message, state)
    await cb.answer()


@router.callback_query(F.data == "health_import_help")
async def health_import_help_from_menu(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏–º–ø–æ—Ä—Ç—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    from app.handlers.zip_import import health_import_help
    await health_import_help(cb.message)
    await cb.answer()


def _split_into_two_messages(text: str, max_len: int = 2000) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
    if not text:
        return []
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º
    if len(text) <= max_len:
        return [text]
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π (>4000), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 3 —á–∞—Å—Ç–∏
    if len(text) > 4000:
        print(f"DEBUG: –¢–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ 3 —á–∞—Å—Ç–∏")
        part_size = len(text) // 3
        
        # –ò—â–µ–º —Ö–æ—Ä–æ—à–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
        split1 = part_size
        split2 = part_size * 2
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã
        for i in range(part_size - 100, part_size + 100):
            if i < 0 or i >= len(text):
                continue
            if text[i] == '\n' or text[i] == ' ':
                split1 = i + 1
                break
        
        for i in range(part_size * 2 - 100, part_size * 2 + 100):
            if i < 0 or i >= len(text):
                continue
            if text[i] == '\n' or text[i] == ' ':
                split2 = i + 1
                break
        
        part1 = text[:split1].strip()
        part2 = text[split1:split2].strip()
        part3 = text[split2:].strip()
        
        if part1 and part2 and part3:
            return [part1, part2, part3]
        elif part1 and part2:
            return [part1, part2]
        else:
            return [text]
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å—Ç–∏
    paragraphs = text.split("\n\n")
    total_len = len(text)
    target = total_len // 2
    part1 = []
    len1 = 0
    
    for p in paragraphs:
        block = p + "\n\n"
        if len1 + len(block) <= max_len and (len1 + len(block) <= target or len1 == 0):
            part1.append(block)
            len1 += len(block)
        else:
            break
    
    p1 = "".join(part1).rstrip()
    rest = text[len(p1):].lstrip()
    
    if not p1:
        p1 = text[:max_len]
        rest = text[max_len:]
    
    if len(rest) <= max_len:
        return [p1, rest] if rest else [p1]
    
    # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë —Ç–æ–∂–µ
    if len(rest) > max_len:
        print(f"DEBUG: –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(rest)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –µ—ë")
        mid_point = len(rest) // 2
        for i in range(mid_point - 100, mid_point + 100):
            if i < 0 or i >= len(rest):
                continue
            if rest[i] == '\n' or rest[i] == ' ':
                mid_point = i + 1
                break
        
        part2 = rest[:mid_point].strip()
        part3 = rest[mid_point:].strip()
        
        if part2 and part3:
            return [p1, part2, part3]
        else:
            return [p1, rest[:max_len - 1] + "‚Ä¶"]
    
    return [p1, rest]


