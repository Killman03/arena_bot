from __future__ import annotations

from datetime import date, timedelta
from typing import Optional

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, desc
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.db.session import session_scope
from app.db.models import User, HealthMetric, HealthGoal, HealthDailyReminder
from app.keyboards.common import health_menu, health_track_keyboard, back_main_menu
from app.services.llm import deepseek_complete

router = Router()


@router.message(F.text.startswith("/health_help"))
async def health_help_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é."""
    text = (
        "ü©∫ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ó–¥–æ—Ä–æ–≤—å–µ:**\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "‚Ä¢ üìà –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π - –∑–∞–ø–∏—Å—å —à–∞–≥–æ–≤, —Å–Ω–∞, –≤–µ—Å–∞ –∏ –¥—Ä.\n"
        "‚Ä¢ üéØ –¶–µ–ª–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π (8000 —à–∞–≥–æ–≤/–¥–µ–Ω—å)\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤\n"
        "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ üìÅ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∑–∫–∞ ZIP —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
        "**–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**\n"
        "‚Ä¢ üì± –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è (Samsung Health)\n"
        "‚Ä¢ üì¶ ZIP —Ñ–∞–π–ª—ã —Å .db –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –∏–º–ø–æ—Ä—Ç\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/import_health` - –Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ `/health_import_help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É\n"
        "‚Ä¢ `/track` - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `/goal` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏\n\n"
        "üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÅ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'\n\n"
        "**–ù–æ–≤–∏–Ω–∫–∞:** üìÅ **–ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç ZIP —Ñ–∞–π–ª–æ–≤** - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="ü©∫ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="menu_health"),
                InlineKeyboardButton(text="üìÅ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="start_import"),
                InlineKeyboardButton(text="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É", callback_data="health_import_help")
            ],
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "menu_health")
async def health_menu_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è."""
    await cb.message.edit_text(
        "ü©∫ <b>–†–∞–∑–¥–µ–ª –ó–¥–æ—Ä–æ–≤—å–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=health_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_track_menu")
async def health_track_menu_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π."""
    await cb.message.edit_text(
        "üìà <b>–¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=health_track_keyboard(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_goals")
async def health_goals_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ü–µ–ª–µ–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é."""
    await cb.message.edit_text(
        "üéØ <b>–¶–µ–ª–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="health_goal_add"),
                    InlineKeyboardButton(text="üìã –ú–æ–∏ —Ü–µ–ª–∏", callback_data="health_goals_list")
                ],
                [
                    InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="health_goals_progress")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_health")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_analytics")
async def health_analytics_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è."""
    await cb.message.edit_text(
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        "–ò–ò –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", callback_data="health_ai_analysis"),
                    InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="health_ai_recommendations")
                ],
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="health_stats")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_health")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_reminders")
async def health_reminders_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await cb.message.edit_text(
        "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ</b>\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="health_reminder_time"),
                    InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å", callback_data="health_reminder_toggle")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_health")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_integrations")
async def health_integrations_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
    await cb.message.edit_text(
        "üîó <b>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÅ –ò–º–ø–æ—Ä—Ç ZIP", callback_data="start_import"),
                    InlineKeyboardButton(text="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É", callback_data="health_import_help")
                ],
                [
                    InlineKeyboardButton(text="üì± Health Connect", callback_data="health_connect_setup")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_health")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_help")
async def health_help_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–¥–æ—Ä–æ–≤—å—é."""
    await cb.message.edit_text(
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª—É –ó–¥–æ—Ä–æ–≤—å–µ</b>\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        "‚Ä¢ üìà –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π - –∑–∞–ø–∏—Å—å —à–∞–≥–æ–≤, —Å–Ω–∞, –≤–µ—Å–∞ –∏ –¥—Ä.\n"
        "‚Ä¢ üéØ –¶–µ–ª–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π (8000 —à–∞–≥–æ–≤/–¥–µ–Ω—å)\n"
        "‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤\n"
        "‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ üìÅ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∑–∫–∞ ZIP —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏\n\n"
        "**–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**\n"
        "‚Ä¢ üì± –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è (Samsung Health)\n"
        "‚Ä¢ üì¶ ZIP —Ñ–∞–π–ª—ã —Å .db –¥–∞–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –∏–º–ø–æ—Ä—Ç\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/import_health` - –Ω–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ `/health_import_help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É\n"
        "‚Ä¢ `/track` - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `/goal` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏\n\n"
        "üìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÅ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'\n\n"
        "**–ù–æ–≤–∏–Ω–∫–∞:** üìÅ **–ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç ZIP —Ñ–∞–π–ª–æ–≤** - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_health")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_connect_setup")
async def health_connect_setup_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É Health Connect."""
    await cb.message.edit_text(
        "üì± <b>Health Connect - –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è Android 14+</b>\n\n"
        "**–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ:**\n"
        "Health Connect - —ç—Ç–æ –Ω–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Google –¥–ª—è Android 14+, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
        "**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
        "‚Ä¢ üöÄ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ —á–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ üîí –õ—É—á—à–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üì± –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Android\n"
        "‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n\n"
        "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
        "‚Ä¢ Android 14+\n"
        "‚Ä¢ Google Play Services\n"
        "‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Health Connect\n\n"
        "**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**\n"
        "‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç ZIP —Ñ–∞–π–ª–æ–≤\n\n"
        "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –Ω–∞–∂–º–∏—Ç–µ 'üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="health_connect_instructions"),
                    InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="health_connect_auth")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_connect_instructions")
async def health_connect_instructions_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ Health Connect."""
    await cb.message.edit_text(
        "üìñ <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Health Connect:</b>\n\n"
        "**–®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞**\n"
        "‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ Health Connect –∏–∑ Google Play\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å—è\n\n"
        "**–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞**\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é\n\n"
        "**–®–∞–≥ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–æ—Ç–µ**\n"
        "‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å'\n"
        "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        "‚Ä¢ –®–∞–≥–∏, –∫–∞–ª–æ—Ä–∏–∏, —Å–æ–Ω\n"
        "‚Ä¢ –ü—É–ª—å—Å, –≤–µ—Å, –¥–∞–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Health Connect —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –±–æ—Ç–∞!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="health_connect_auth"),
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_connect_setup")
                ]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_connect_auth")
async def health_connect_auth_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Health Connect."""
    await cb.message.edit_text(
        "üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Health Connect:</b>\n\n"
        "**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:**\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ Health Connect\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –†–∞–∑—Ä–µ—à–µ–Ω–∏—è\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ 'Voit Bot'\n"
        "5. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º\n"
        "6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥\n\n"
        "**–ó–∞—Ç–µ–º –≤ –±–æ—Ç–µ:**\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/health_connect_auth –ö–û–î`\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "`/health_connect_auth 4/0AX4XfWh...`\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç, –ø–æ—ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –±—ã—Å—Ç—Ä–æ!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_connect_setup")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(F.text.startswith("/health_connect_auth"))
async def health_connect_auth_command(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Health Connect."""
    user = message.from_user
    if not user:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /health_connect_auth –ö–û–î\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∞–≤ 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å' –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí üì± Health Connect"
        )
        return
    
    auth_code = parts[1]
    
    try:
        from app.services.health_connect import HealthConnectService
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
            health_service = HealthConnectService()
            tokens = health_service.exchange_code_for_tokens(auth_code)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º HealthDailyReminder –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è Health Connect
            
            await message.answer(
                "‚úÖ Health Connect —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ\n\n"
                "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "`/health_connect_sync`"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Health Connect: {str(e)}")


@router.message(F.text.startswith("/health_connect_sync"))
async def health_connect_sync_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Health Connect."""
    user = message.from_user
    if not user:
        return
    
    await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —Å Health Connect...")
    
    try:
        from app.services.health_connect import HealthConnectService
        
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Health Connect
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            await message.answer(
                "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–¥–æ—Ä–æ–≤—å–µ.\n\n"
                "ü©∫ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìà –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π'"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")


@router.callback_query(F.data == "start_import")
async def start_import_handler(cb: types.CallbackQuery) -> None:
    """–ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è."""
    await cb.message.edit_text(
        "üìÅ <b>–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
        "‚Ä¢ ZIP —Ñ–∞–π–ª—ã —Å .db, .sqlite, .sqlite3 –≤–Ω—É—Ç—Ä–∏\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: Samsung Health –∏ –¥—Ä.\n\n"
        "**–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP —Ñ–∞–π–ª —Å–µ–π—á–∞—Å:**",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "health_import_help")
async def health_import_help_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏–º–ø–æ—Ä—Ç—É."""
    await cb.message.edit_text(
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–º–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n"
        "**–ö–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:**\n\n"
        "üì± **Samsung Health:**\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ Samsung Health\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ –¥–∞–Ω–Ω—ã–µ\n"
        "4. –≠–∫—Å–ø–æ—Ä—Ç –≤ ZIP\n\n"
        "üí™ **–î—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**\n"
        "‚Ä¢ –ò—â–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö '–≠–∫—Å–ø–æ—Ä—Ç' –∏–ª–∏ '–°–∫–∞—á–∞—Ç—å'\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ZIP –∏–ª–∏ SQLite\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞\n\n"
        "**–ó–∞—Ç–µ–º –≤ –±–æ—Ç–µ:**\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/import_health`\n"
        "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∏–º–ø–æ—Ä—Ç–∞\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        "‚Ä¢ –®–∞–≥–∏, –∫–∞–ª–æ—Ä–∏–∏, —Å–æ–Ω\n"
        "‚Ä¢ –ü—É–ª—å—Å, –≤–µ—Å, –¥–∞–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –†–µ–≥—É–ª—è—Ä–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÅ –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç", callback_data="start_import"),
                    InlineKeyboardButton(text="ü©∫ –†–∞–∑–¥–µ–ª –∑–¥–æ—Ä–æ–≤—å—è", callback_data="menu_health")
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="health_integrations")]
            ]
        ),
        parse_mode="HTML"
    )
    await cb.answer()


