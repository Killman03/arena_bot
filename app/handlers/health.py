from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StateMachine
from sqlalchemy import select
from datetime import datetime

from app.db.session import session_scope
from app.db.models import User, HealthMetric, HealthGoal, HealthReminder

router = Router()


class HealthStates(StateMachine):
    waiting_for_metric_type = State()
    waiting_for_metric_value = State()
    waiting_for_metric_unit = State()
    waiting_for_goal_type = State()
    waiting_for_goal_target = State()
    waiting_for_reminder_type = State()
    waiting_for_reminder_message = State()


@router.message(Command("health"))
async def health_menu(message: types.Message) -> None:
    """Show health menu"""
    health_text = """
üè• **–ú–µ–Ω—é –∑–¥–æ—Ä–æ–≤—å—è**

üìä **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è**:
‚Ä¢ /health_metric - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ /health_goal - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
‚Ä¢ /health_reminder - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ /health_stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üí° **–ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç—Ä–∏–∫**: –≤–µ—Å, —à–∞–≥–∏, –ø—É–ª—å—Å, –¥–∞–≤–ª–µ–Ω–∏–µ
"""
    await message.answer(health_text)


@router.message(Command("health_metric"))
async def start_health_metric(message: types.Message, state: FSMContext) -> None:
    """Start adding health metric"""
    await state.set_state(HealthStates.waiting_for_metric_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å, —à–∞–≥–∏, –ø—É–ª—å—Å):")


@router.message(HealthStates.waiting_for_metric_type)
async def get_metric_type(message: types.Message, state: FSMContext) -> None:
    """Get metric type and ask for value"""
    await state.update_data(metric_type=message.text)
    await state.set_state(HealthStates.waiting_for_metric_value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")


@router.message(HealthStates.waiting_for_metric_value)
async def get_metric_value(message: types.Message, state: FSMContext) -> None:
    """Get metric value and ask for unit"""
    try:
        value = float(message.text)
        await state.update_data(metric_value=value)
        await state.set_state(HealthStates.waiting_for_metric_unit)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–≥, —à–∞–≥–∏, —É–¥/–º–∏–Ω) –∏–ª–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


@router.message(HealthStates.waiting_for_metric_unit)
async def save_health_metric(message: types.Message, state: FSMContext) -> None:
    """Save health metric to database"""
    user = message.from_user
    if not user:
        return

    data = await state.get_data()
    metric_type = data.get("metric_type")
    metric_value = data.get("metric_value")
    unit = message.text if message.text.lower() != "–Ω–µ—Ç" else None

    async with session_scope() as session:
        # Get user from database
        db_user = await session.execute(
            select(User).where(User.telegram_id == user.id)
        )
        db_user = db_user.scalar_one_or_none()
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            await state.clear()
            return

        # Create health metric
        health_metric = HealthMetric(
            user_id=db_user.id,
            metric_type=metric_type,
            value=metric_value,
            unit=unit
        )
        session.add(health_metric)
        await session.commit()

    await message.answer(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ '{metric_type}' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º {metric_value} {unit or ''} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await state.clear()


@router.message(Command("health_stats"))
async def show_health_stats(message: types.Message) -> None:
    """Show health statistics"""
    user = message.from_user
    if not user:
        return

    async with session_scope() as session:
        # Get user from database
        db_user = await session.execute(
            select(User).where(User.telegram_id == user.id)
        )
        db_user = db_user.scalar_one_or_none()
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        # Get health metrics count
        metrics_count = await session.execute(
            select(HealthMetric).where(HealthMetric.user_id == db_user.id)
        )
        metrics = metrics_count.scalars().all()

        if not metrics:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health_metric –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return

        # Group metrics by type
        metrics_by_type = {}
        for metric in metrics:
            if metric.metric_type not in metrics_by_type:
                metrics_by_type[metric.metric_type] = []
            metrics_by_type[metric.metric_type].append(metric)

        stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è**\n\n"
        
        for metric_type, type_metrics in metrics_by_type.items():
            latest_metric = max(type_metrics, key=lambda x: x.recorded_at)
            stats_text += f"**{metric_type}**: {latest_metric.value} {latest_metric.unit or ''}\n"
            stats_text += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {latest_metric.recorded_at.strftime('%d.%m.%Y %H:%M')}\n\n"

        await message.answer(stats_text)


@router.message(Command("health_goal"))
async def start_health_goal(message: types.Message, state: FSMContext) -> None:
    """Start setting health goal"""
    await state.set_state(HealthStates.waiting_for_goal_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã):")


@router.message(HealthStates.waiting_for_goal_type)
async def get_goal_type(message: types.Message, state: FSMContext) -> None:
    """Get goal type and ask for target value"""
    await state.update_data(goal_type=message.text)
    await state.set_state(HealthStates.waiting_for_goal_target)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75 –¥–ª—è –≤–µ—Å–∞ –≤ –∫–≥):")


@router.message(HealthStates.waiting_for_goal_target)
async def save_health_goal(message: types.Message, state: FSMContext) -> None:
    """Save health goal to database"""
    user = message.from_user
    if not user:
        return

    try:
        target_value = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    goal_type = data.get("goal_type")

    async with session_scope() as session:
        # Get user from database
        db_user = await session.execute(
            select(User).where(User.telegram_id == user.id)
        )
        db_user = db_user.scalar_one_or_none()
        
        if not db_user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            await state.clear()
            return

        # Create health goal
        health_goal = HealthGoal(
            user_id=db_user.id,
            goal_type=goal_type,
            target_value=target_value
        )
        session.add(health_goal)
        await session.commit()

    await message.answer(f"‚úÖ –¶–µ–ª—å '{goal_type}' —Å —Ü–µ–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º {target_value} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()
