from __future__ import annotations

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.db.session import session_scope
from app.db.models import User
from app.keyboards.common import quick_actions_menu, back_main_menu
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

router = Router()


class QuickQuoteStates(StatesGroup):
    waiting_quote = State()
    waiting_author = State()


class QuickGoalStates(StatesGroup):
    waiting_title = State()
    waiting_description = State()


class QuickThoughtStates(StatesGroup):
    waiting_thought = State()


class QuickTodoStates(StatesGroup):
    waiting_title = State()
    waiting_description = State()


class QuickExpenseStates(StatesGroup):
    waiting_amount = State()
    waiting_category = State()


class QuickReminderStates(StatesGroup):
    waiting_text = State()
    waiting_time = State()
    waiting_custom_time = State()


@router.callback_query(F.data == "quick_actions")
async def quick_actions_menu_handler(cb: types.CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    await cb.message.edit_text(
        "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä–æ:",
        reply_markup=quick_actions_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "quick_add_quote")
async def quick_add_quote_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã"""
    await state.set_state(QuickQuoteStates.waiting_quote)
    await cb.message.edit_text(
        "üìù <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickQuoteStates.waiting_quote)
async def quick_quote_text_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ü–∏—Ç–∞—Ç—ã"""
    if len(message.text) > 1000:
        await message.answer("‚ùå –¶–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(quote=message.text)
    await state.set_state(QuickQuoteStates.waiting_author)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(QuickQuoteStates.waiting_author)
async def quick_quote_author_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã"""
    author = (message.text or "").strip()
    if author == "-":
        author = None
    
    data = await state.get_data()
    quote = data.get("quote")
    
    if not quote:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )).scalar_one()
            
            from app.db.models.book import BookQuote
            from datetime import datetime
            
            new_quote = BookQuote(
                user_id=db_user.id,
                quote=quote,
                author=author,
                created_at=datetime.now()
            )
            
            session.add(new_quote)
            await session.commit()
            
            await message.answer(
                "‚úÖ <b>–¶–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìù <b>–¶–∏—Ç–∞—Ç–∞:</b>\n{quote}\n\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                "–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {str(e)}")
    
    await state.clear()


@router.callback_query(F.data == "quick_add_goal")
async def quick_add_goal_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏"""
    await state.set_state(QuickGoalStates.waiting_title)
    await cb.message.edit_text(
        "üéØ <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickGoalStates.waiting_title)
async def quick_goal_title_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏"""
    if len(message.text) > 500:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    await state.set_state(QuickGoalStates.waiting_description)
    
    await message.answer(
        "üéØ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(QuickGoalStates.waiting_description)
async def quick_goal_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏"""
    desc = (message.text or "").strip()
    if desc == "-":
        desc = None
    
    data = await state.get_data()
    title = data.get("title")
    
    if not title:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )).scalar_one()
            
            from app.db.models.goal import Goal, GoalStatus, GoalScope
            from datetime import date
            
            new_goal = Goal(
                user_id=db_user.id,
                title=title,
                description=desc,
                status=GoalStatus.active,
                scope=GoalScope.personal,
                created_at=date.today()
            )
            
            session.add(new_goal)
            await session.commit()
            
            await message.answer(
                "‚úÖ <b>–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üéØ <b>{title}</b>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {date.today().strftime('%d.%m.%Y')}\n\n"
                "–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏: {str(e)}")
    
    await state.clear()


@router.callback_query(F.data == "quick_add_thought")
async def quick_add_thought_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏"""
    await state.set_state(QuickThoughtStates.waiting_thought)
    await cb.message.edit_text(
        "üìö <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—ã—Å–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å –∏–ª–∏ –∏–¥–µ—é:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickThoughtStates.waiting_thought)
async def quick_thought_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º—ã—Å–ª–∏"""
    if len(message.text) > 2000:
        await message.answer("‚ùå –ú—ã—Å–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    thought = message.text
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )).scalar_one()
            
            from app.db.models.book import BookThought
            from datetime import datetime
            
            new_thought = BookThought(
                user_id=db_user.id,
                thought=thought,
                created_at=datetime.now()
            )
            
            session.add(new_thought)
            await session.commit()
            
            await message.answer(
                "‚úÖ <b>–ú—ã—Å–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìö <b>–í–∞—à–∞ –º—ã—Å–ª—å:</b>\n{thought}\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                "–ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º—ã—Å–ª–∏: {str(e)}")
    
    await state.clear()


@router.callback_query(F.data == "quick_add_expense")
async def quick_add_expense_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
    await state.set_state(QuickExpenseStates.waiting_amount)
    await cb.message.edit_text(
        "üí∞ <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickExpenseStates.waiting_amount)
async def quick_expense_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        
        await state.update_data(amount=amount)
        await state.set_state(QuickExpenseStates.waiting_category)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∏", callback_data="quick_expense_category_purchases"),
                    InlineKeyboardButton(text="üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ", callback_data="quick_expense_category_food")
                ],
                [
                    InlineKeyboardButton(text="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data="quick_expense_category_transport"),
                    InlineKeyboardButton(text="üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", callback_data="quick_expense_category_utilities")
                ],
                [
                    InlineKeyboardButton(text="üíä –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="quick_expense_category_health"),
                    InlineKeyboardButton(text="üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="quick_expense_category_entertainment")
                ],
                [
                    InlineKeyboardButton(text="üì± –°–≤—è–∑—å", callback_data="quick_expense_category_communication"),
                    InlineKeyboardButton(text="üëï –û–¥–µ–∂–¥–∞", callback_data="quick_expense_category_clothing")
                ],
                [
                    InlineKeyboardButton(text="üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="quick_expense_category_education"),
                    InlineKeyboardButton(text="üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ", callback_data="quick_expense_category_banking")
                ],
                [
                    InlineKeyboardButton(text="üîß –ü—Ä–æ—á–µ–µ", callback_data="quick_expense_category_other")
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
                ]
            ]
        )
        
        await message.answer(
            f"üí∞ <b>–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞:</b> {amount:,.2f} ‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=categories_keyboard,
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50)")


@router.callback_query(F.data.startswith("quick_expense_category_"))
async def quick_expense_category_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    category = cb.data.replace("quick_expense_category_", "")
    
    data = await state.get_data()
    amount = data.get("amount")
    
    if not amount:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == cb.from_user.id)
            )).scalar_one()
            
            from app.db.models.finance import FinanceTransaction
            from datetime import datetime
            
            new_expense = FinanceTransaction(
                user_id=db_user.id,
                amount=-amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
                category=category,
                date=datetime.now().date(),
                description=f"–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—Ö–æ–¥ - {category}"
            )
            
            session.add(new_expense)
            await session.commit()
            
            category_names = {
                "purchases": "üõí –ü–æ–∫—É–ø–∫–∏",
                "food": "üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ",
                "transport": "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                "utilities": "üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ",
                "health": "üíä –ó–¥–æ—Ä–æ–≤—å–µ",
                "entertainment": "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                "communication": "üì± –°–≤—è–∑—å",
                "clothing": "üëï –û–¥–µ–∂–¥–∞",
                "education": "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                "banking": "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ",
                "other": "üîß –ü—Ä–æ—á–µ–µ"
            }
            
            category_display = category_names.get(category, category)
            
            await cb.message.edit_text(
                "‚úÖ <b>–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
                f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_display}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}\n\n"
                "–†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω –≤ –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {str(e)}")
    
    await state.clear()
    await cb.answer()


@router.callback_query(F.data == "quick_add_reminder")
async def quick_add_reminder_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await state.set_state(QuickReminderStates.waiting_text)
    await cb.message.edit_text(
        "‚è∞ <b>–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickReminderStates.waiting_text)
async def quick_reminder_text_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if len(message.text) > 500:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(text=message.text)
    await state.set_state(QuickReminderStates.waiting_time)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–∏
    time_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="reminder_time_1h"),
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data="reminder_time_3h")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤", callback_data="reminder_time_6h"),
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤", callback_data="reminder_time_12h")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", callback_data="reminder_time_tomorrow"),
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="reminder_time_week")
            ],
            [
                InlineKeyboardButton(text="üïê –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="reminder_time_custom")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            ]
        ]
    )
    
    await message.answer(
        "‚è∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b> {message.text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=time_keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("reminder_time_"))
async def quick_reminder_time_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    time_option = cb.data.replace("reminder_time_", "")
    
    data = await state.get_data()
    text = data.get("text")
    
    if not text:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Å–≤–æ–µ –≤—Ä–µ–º—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É
    if time_option == "custom":
        await state.set_state(QuickReminderStates.waiting_custom_time)
        await cb.message.edit_text(
            "üïê <b>–í–≤–æ–¥ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "‚Ä¢ <b>–ß–µ—Ä–µ–∑ X —á–∞—Å–æ–≤</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)\n"
            "‚Ä¢ <b>–ß–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç)\n"
            "‚Ä¢ <b>–í HH:MM</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30)\n"
            "‚Ä¢ <b>–ó–∞–≤—Ç—Ä–∞ –≤ HH:MM</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 9:00)\n"
            "‚Ä¢ <b>–ß–µ—Ä–µ–∑ X –¥–Ω–µ–π</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 3 –¥–Ω—è)\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="reminder_back_to_time")]
                ]
            ),
            parse_mode="HTML"
        )
        await cb.answer()
        return
    
    try:
        from datetime import datetime, timedelta
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        now = datetime.now()
        if time_option == "1h":
            reminder_time = now + timedelta(hours=1)
            time_display = "—á–µ—Ä–µ–∑ 1 —á–∞—Å"
        elif time_option == "3h":
            reminder_time = now + timedelta(hours=3)
            time_display = "—á–µ—Ä–µ–∑ 3 —á–∞—Å–∞"
        elif time_option == "6h":
            reminder_time = now + timedelta(hours=6)
            time_display = "—á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤"
        elif time_option == "12h":
            reminder_time = now + timedelta(hours=12)
            time_display = "—á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤"
        elif time_option == "tomorrow":
            reminder_time = now.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
            time_display = "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≤ 9:00"
        elif time_option == "week":
            reminder_time = now + timedelta(weeks=1)
            time_display = "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
        else:
            reminder_time = now + timedelta(hours=1)
            time_display = "—á–µ—Ä–µ–∑ 1 —á–∞—Å"
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        
        await cb.message.edit_text(
            "‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"‚è∞ <b>–¢–µ–∫—Å—Ç:</b> {text}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {time_display}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {reminder_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await cb.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")
    
    await state.clear()
    await cb.answer()


@router.callback_query(F.data == "reminder_back_to_time")
async def reminder_back_to_time_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    data = await state.get_data()
    text = data.get("text")
    
    if not text:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–∏
    time_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="reminder_time_1h"),
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞", callback_data="reminder_time_3h")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤", callback_data="reminder_time_6h"),
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤", callback_data="reminder_time_12h")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º", callback_data="reminder_time_tomorrow"),
                InlineKeyboardButton(text="‚è∞ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="reminder_time_week")
            ],
            [
                InlineKeyboardButton(text="üïê –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="reminder_time_custom")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            ]
        ]
    )
    
    await cb.message.edit_text(
        "‚è∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=time_keyboard,
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickReminderStates.waiting_custom_time)
async def quick_reminder_custom_time_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    data = await state.get_data()
    text = data.get("text")
    
    if not text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    try:
        from datetime import datetime, timedelta
        import re
        
        user_input = message.text.strip().lower()
        now = datetime.now()
        reminder_time = None
        time_display = ""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        patterns = [
            # –ß–µ—Ä–µ–∑ X —á–∞—Å–æ–≤
            (r'—á–µ—Ä–µ–∑ (\d+) —á–∞—Å(?:–∞|–æ–≤)?', lambda m: now + timedelta(hours=int(m.group(1))), 
             lambda m: f"—á–µ—Ä–µ–∑ {m.group(1)} —á–∞—Å(–∞/–æ–≤)"),
            
            # –ß–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç
            (r'—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω—É—Ç(?:—É|—ã)?', lambda m: now + timedelta(minutes=int(m.group(1))), 
             lambda m: f"—á–µ—Ä–µ–∑ {m.group(1)} –º–∏–Ω—É—Ç(—É/—ã)"),
            
            # –í HH:MM (—Å–µ–≥–æ–¥–Ω—è)
            (r'–≤ (\d{1,2}):(\d{2})', lambda m: now.replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0), 
             lambda m: f"–≤ {m.group(1)}:{m.group(2)}"),
            
            # –ó–∞–≤—Ç—Ä–∞ –≤ HH:MM
            (r'–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2})', lambda m: (now + timedelta(days=1)).replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0), 
             lambda m: f"–∑–∞–≤—Ç—Ä–∞ –≤ {m.group(1)}:{m.group(2)}"),
            
            # –ß–µ—Ä–µ–∑ X –¥–Ω–µ–π
            (r'—á–µ—Ä–µ–∑ (\d+) –¥–Ω(?:–µ–Ω—å|—è|–µ–π)?', lambda m: now + timedelta(days=int(m.group(1))), 
             lambda m: f"—á–µ—Ä–µ–∑ {m.group(1)} –¥–Ω(–µ–Ω—å/—è/–µ–π)"),
            
            # –í X —á–∞—Å–æ–≤ (—Å–µ–≥–æ–¥–Ω—è)
            (r'–≤ (\d{1,2}) —á–∞—Å(?:–∞|–æ–≤)?', lambda m: now.replace(hour=int(m.group(1)), minute=0, second=0, microsecond=0), 
             lambda m: f"–≤ {m.group(1)}:00"),
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern, time_func, display_func in patterns:
            match = re.match(pattern, user_input)
            if match:
                reminder_time = time_func(match)
                time_display = display_func(match)
                break
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
        if reminder_time and reminder_time <= now:
            if "–∑–∞–≤—Ç—Ä–∞" not in user_input:
                reminder_time += timedelta(days=1)
                time_display = time_display.replace("–≤ ", "–∑–∞–≤—Ç—Ä–∞ –≤ ")
        
        if not reminder_time:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
                "‚Ä¢ <b>–ß–µ—Ä–µ–∑ X —á–∞—Å–æ–≤</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)\n"
                "‚Ä¢ <b>–ß–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç)\n"
                "‚Ä¢ <b>–í HH:MM</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30)\n"
                "‚Ä¢ <b>–ó–∞–≤—Ç—Ä–∞ –≤ HH:MM</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 9:00)\n"
                "‚Ä¢ <b>–ß–µ—Ä–µ–∑ X –¥–Ω–µ–π</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 3 –¥–Ω—è)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="reminder_back_to_time")]
                    ]
                ),
                parse_mode="HTML"
            )
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        
        await message.answer(
            "‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"‚è∞ <b>–¢–µ–∫—Å—Ç:</b> {text}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {time_display}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {reminder_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="reminder_back_to_time")]
                ]
            ),
            parse_mode="HTML"
        )
        return
    
    await state.clear()


@router.callback_query(F.data == "quick_add_todo")
async def quick_add_todo_handler(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ To-Do"""
    await state.set_state(QuickTodoStates.waiting_title)
    await cb.message.edit_text(
        "üìã <b>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ To-Do</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )
    await cb.answer()


@router.message(QuickTodoStates.waiting_title)
async def quick_todo_title_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if len(message.text) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    await state.set_state(QuickTodoStates.waiting_description)
    
    await message.answer(
        "üìã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=back_main_menu(),
        parse_mode="HTML"
    )


@router.message(QuickTodoStates.waiting_description)
async def quick_todo_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    desc = (message.text or "").strip()
    if desc == "-":
        desc = None
    
    data = await state.get_data()
    title = data.get("title")
    
    if not title:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )).scalar_one()
            
            from app.db.models.todo import Todo
            from datetime import date
            
            new_todo = Todo(
                user_id=db_user.id,
                title=title,
                description=desc,
                due_date=date.today(),
                priority="medium",
                is_completed=False,
                is_daily=False
            )
            
            session.add(new_todo)
            await session.commit()
            
            await message.answer(
                "‚úÖ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìã <b>{title}</b>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {date.today().strftime('%d.%m.%Y')}\n"
                f"üî¥ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> –°—Ä–µ–¥–Ω–∏–π\n\n"
                "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
    
    await state.clear()
