from __future__ import annotations

from datetime import date

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, desc

from app.db.models import MealPlan, MealType, User, CookingSession, NutritionReminder
from app.db.session import session_scope
from app.keyboards.common import back_main_menu
from app.services.llm import deepseek_complete

router = Router()


@router.message(Command("meal"))
async def plan_meal(message: types.Message) -> None:
    """Plan a meal: /meal breakfast –û–º–ª–µ—Ç [YYYY-MM-DD]."""
    user = message.from_user
    if not user:
        return
    payload = (message.text or "").replace("/meal", "", 1).strip()
    if not payload:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /meal breakfast –ù–∞–∑–≤–∞–Ω–∏–µ [YYYY-MM-DD]")
        return
    parts = payload.split()
    meal_type = MealType(parts[0])
    title = " ".join(parts[1:-1]) if len(parts) > 2 else (parts[1] if len(parts) > 1 else "")
    d = parts[-1]
    try:
        plan_date = date.fromisoformat(d)
    except Exception:
        plan_date = date.today()
        title = " ".join(parts[1:])

    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        session.add(MealPlan(user_id=db_user.id, date=plan_date, type=meal_type, title=title))
    await message.answer("–ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω ‚úÖ")


class NutritionTimeFSM(StatesGroup):
    waiting_days = State()
    waiting_cook_time = State()
    waiting_remind_time = State()
    waiting_shop_time = State()
    waiting_calories = State()
    waiting_goal = State()


@router.callback_query(F.data == "nutrition_cooking_now")
async def nutrition_cooking_now(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –∏—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç Telegram
    try:
        await cb.answer("–ì–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω...", show_alert=False)
    except Exception:
        pass
    # –ë—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        await cb.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏...", reply_markup=back_main_menu())
    except Exception:
        pass
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        plan_text = await _generate_cooking_plan()
        session.add(CookingSession(user_id=db_user.id, cooking_date=date.today(), instructions=plan_text))
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–∞—Ç–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
    await cb.message.edit_text("üë®‚Äçüç≥ –ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ 3 –¥–Ω—è:", reply_markup=back_main_menu(), parse_mode=None)
    parts = _split_into_two_messages(plan_text)
    if parts:
        await cb.message.answer(parts[0], parse_mode=None)
    if len(parts) > 1:
        await cb.message.answer(parts[1], parse_mode=None)


@router.callback_query(F.data == "nutrition_body_recomp")
async def nutrition_body_recomp(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        reminder = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == db_user.id))
        ).scalar_one_or_none()
    text = (
        (f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: goal={reminder.body_goal if reminder else '-'}, "
         f"calories={reminder.target_calories if reminder else '-'}\n\n")
        if reminder else ""
    )
    text += (
        "üí™ –†–µ–∂–∏–º —Ç–µ–ª–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: cut (—Å—É—à–∫–∞) / bulk (–º–∞—Å—Å–∞) / maintain (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ).\n"
        "–ò, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2400.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "goal calories\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "cut 2100\n"
        "bulk 3000\n"
        "maintain 2500\n"
    )
    await cb.message.edit_text(text)
    await cb.answer()


@router.message(F.text.regexp(r"^(cut|bulk|maintain)(\s+\d{3,5})?$"))
async def nutrition_body_recomp_set(message: types.Message) -> None:
    user = message.from_user
    if not user:
        return
    parts = message.text.split()
    goal = parts[0]
    calories = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        reminder = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == db_user.id))
        ).scalar_one_or_none()
        if not reminder:
            reminder = NutritionReminder(user_id=db_user.id)
            session.add(reminder)
        reminder.body_goal = goal
        reminder.target_calories = calories
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ", reply_markup=back_main_menu())


@router.callback_query(F.data == "nutrition_time_settings")
async def nutrition_time_settings(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(NutritionTimeFSM.waiting_days)
    await cb.message.edit_text(
        "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: sunday,wednesday):",
        reply_markup=back_main_menu(),
    )
    await cb.answer()


@router.message(NutritionTimeFSM.waiting_days)
async def set_days(message: types.Message, state: FSMContext) -> None:
    await state.update_data(days=message.text.lower())
    await state.set_state(NutritionTimeFSM.waiting_cook_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 18:00:")


@router.message(NutritionTimeFSM.waiting_cook_time)
async def set_cook_time(message: types.Message, state: FSMContext) -> None:
    await state.update_data(cook_time=message.text)
    await state.set_state(NutritionTimeFSM.waiting_remind_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 17:00:")


@router.message(NutritionTimeFSM.waiting_remind_time)
async def set_remind_time(message: types.Message, state: FSMContext) -> None:
    await state.update_data(remind_time=message.text)
    await state.set_state(NutritionTimeFSM.waiting_shop_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö –∑–∞ –¥–µ–Ω—å –¥–æ –≥–æ—Ç–æ–≤–∫–∏ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 16:00:")


@router.message(NutritionTimeFSM.waiting_shop_time)
async def set_shop_time(message: types.Message, state: FSMContext) -> None:
    await state.update_data(shop_time=message.text)
    await state.set_state(NutritionTimeFSM.waiting_calories)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å (—á–∏—Å–ª–æ) –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")


@router.message(NutritionTimeFSM.waiting_calories)
async def set_calories(message: types.Message, state: FSMContext) -> None:
    calories_text = (message.text or "").strip()
    calories = int(calories_text) if calories_text.isdigit() else None
    await state.update_data(calories=calories)
    await state.set_state(NutritionTimeFSM.waiting_goal)
    await message.answer("–¶–µ–ª—å: cut/bulk/maintain –∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")


@router.message(NutritionTimeFSM.waiting_goal)
async def set_goal(message: types.Message, state: FSMContext) -> None:
    goal_text = (message.text or "").strip().lower()
    goal = goal_text if goal_text in {"cut", "bulk", "maintain"} else None
    data = await state.get_data()
    user = message.from_user
    if not user:
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        reminder = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == db_user.id))
        ).scalar_one_or_none()
        if not reminder:
            reminder = NutritionReminder(user_id=db_user.id)
            session.add(reminder)
        reminder.cooking_days = data["days"]
        reminder.cooking_time = data["cook_time"]
        reminder.reminder_time = data["remind_time"]
        reminder.shopping_reminder_time = data["shop_time"]
        reminder.target_calories = data.get("calories")
        reminder.body_goal = goal
    await state.clear()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ", reply_markup=back_main_menu())


@router.callback_query(F.data == "nutrition_history")
async def nutrition_history(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        sessions = (
            await session.execute(
                select(CookingSession)
                .where(CookingSession.user_id == db_user.id)
                .order_by(desc(CookingSession.cooking_date))
                .limit(5)
            )
        ).scalars().all()
    if not sessions:
        await cb.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=back_main_menu())
        await cb.answer()
        return
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ç–æ–≤–∫–∏:\n\n"
    for s in sessions:
        text += f"- {s.cooking_date.isoformat()} ‚Äî {('–µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' if s.instructions else '–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π')}\n"
    await cb.message.edit_text(text, reply_markup=back_main_menu())
    await cb.answer()


async def _generate_cooking_plan() -> str:
    system = (
        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –∫—É–ª–∏–Ω–∞—Ä. –°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ 3 –¥–Ω—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, "
        "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ. –î–∞–π: —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ –¥–µ–Ω—å –∏ –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    )
    prompt = "–°–¥–µ–ª–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ 3 –¥–Ω—è. –§–æ—Ä–º–∞—Ç: –ü–æ–∫—É–ø–∫–∏, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ö–∞–ª–æ—Ä–∏–∏/–¥–µ–Ω—å."
    try:
        return await deepseek_complete(prompt, system=system, max_tokens=700)
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –æ—Ç –ò–ò: {e}"


def _split_into_two_messages(text: str, max_len: int = 3800) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±–∞ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ max_len.
    –ï—Å–ª–∏ –æ–±—â–∏–π —Ç–µ–∫—Å—Ç > 2*max_len, –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –±—É–¥–µ—Ç —É—Å–µ—á–µ–Ω–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º.
    """
    if not text:
        return []
    if len(text) <= max_len:
        return [text]
    # –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞ ‚Äî –±–ª–∏–∑–∫–æ –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split("\n\n")
    total_len = len(text)
    target = total_len // 2
    part1 = []
    len1 = 0
    for p in paragraphs:
        block = p + "\n\n"
        if len1 + len(block) <= max_len and (len1 + len(block) <= target or len1 == 0):
            part1.append(block)
            len1 += len(block)
        else:
            break
    part1_text = "".join(part1).rstrip()
    rest = text[len(part1_text):].lstrip()
    if not part1_text:
        # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –æ–≥—Ä–æ–º–Ω—ã–π, —Ä–µ–∂–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º/—Å–∏–º–≤–æ–ª–∞–º
        part1_text = text[:max_len]
        rest = text[max_len:]
    # –û–±–µ—Å–ø–µ—á–∏–º –ª–∏–º–∏—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
    if len(rest) <= max_len:
        return [part1_text, rest] if rest else [part1_text]
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî —É—Å–µ—á–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
    part2_text = rest[:max_len - 1] + "‚Ä¶"
    return [part1_text, part2_text]






