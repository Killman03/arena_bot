from __future__ import annotations

from datetime import date

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, desc

from app.db.models import MealPlan, MealType, User, CookingSession, NutritionReminder
from app.db.session import session_scope
from app.keyboards.common import back_main_menu
from app.services.llm import deepseek_complete
from app.handlers.nutrition_budget import get_user_food_budget
from app.utils.timezone_utils import get_user_time_info

router = Router()


@router.message(Command("meal"))
async def plan_meal(message: types.Message) -> None:
    """Plan a meal: /meal breakfast –û–º–ª–µ—Ç [YYYY-MM-DD]."""
    user = message.from_user
    if not user:
        return
    payload = (message.text or "").replace("/meal", "", 1).strip()
    if not payload:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /meal breakfast –ù–∞–∑–≤–∞–Ω–∏–µ [YYYY-MM-DD]")
        return
    parts = payload.split()
    meal_type = MealType(parts[0])
    title = " ".join(parts[1:-1]) if len(parts) > 2 else (parts[1] if len(parts) > 1 else "")
    d = parts[-1]
    try:
        plan_date = date.fromisoformat(d)
    except Exception:
        plan_date = date.today()
        title = " ".join(parts[1:])

    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        session.add(MealPlan(user_id=db_user.id, date=plan_date, type=meal_type, title=title))
    await message.answer("–ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω ‚úÖ")


class NutritionTimeFSM(StatesGroup):
    waiting_days = State()
    waiting_cook_time = State()
    waiting_remind_time = State()
    waiting_shop_time = State()


@router.callback_query(F.data == "nutrition_cooking_now")
async def nutrition_cooking_now(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –∏—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç Telegram
    try:
        await cb.answer("–ì–æ—Ç–æ–≤–ª—é –ø–ª–∞–Ω...", show_alert=False)
    except Exception:
        pass
    # –ë—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    try:
        await cb.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏...", reply_markup=back_main_menu())
    except Exception:
        pass
        
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—é–¥–∂–µ—Ç–µ –ø–∏—Ç–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        budget_info = await get_user_food_budget(session, db_user.id)
        print(f"DEBUG: budget_info = {budget_info}")  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            await cb.message.edit_text("ü§ñ –û–±—Ä–∞—â–∞—é—Å—å –∫ –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞...", reply_markup=back_main_menu())
        except Exception:
            pass
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        try:
            from app.services.nutrition_plan_generator import generate_cooking_plan, generate_fallback_plan
            plan_text = await generate_cooking_plan(budget_info)
            if not plan_text or len(plan_text.strip()) < 10:
                plan_text = generate_fallback_plan(budget_info, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –≤ generate_cooking_plan: {e}")
            plan_text = generate_fallback_plan(budget_info, str(e))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        session.add(CookingSession(user_id=db_user.id, cooking_date=date.today(), instructions=plan_text))
        await session.commit()
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—é–¥–∂–µ—Ç–µ, –∑–∞—Ç–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–≤—É–º—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    budget_text = f" (–±—é–¥–∂–µ—Ç: {budget_info['description']})" if budget_info and budget_info["type"] else ""
    header_text = f"üë®‚Äçüç≥ –ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ 2 –¥–Ω—è{budget_text}:"
    await cb.message.edit_text(header_text, reply_markup=back_main_menu(), parse_mode="HTML")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    plan_text_html = _convert_markdown_to_html(plan_text)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    print(f"DEBUG: –î–ª–∏–Ω–∞ –ø–ª–∞–Ω–∞ –ø–æ—Å–ª–µ HTML –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {len(plan_text_html)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ HTML –ø–ª–∞–Ω–∞: {plan_text_html[:200]}...")
    print(f"DEBUG: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ HTML –ø–ª–∞–Ω–∞: ...{plan_text_html[-200:]}")
    
    parts = _split_into_multiple_messages(plan_text_html)
    print(f"DEBUG: –ü–ª–∞–Ω —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    for i, part in enumerate(parts):
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—å {i+1} –¥–ª–∏–Ω–æ–π {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Å—Ç–∏ {i+1}:")
        print("-" * 40)
        print(part)
        print("-" * 40)
        await cb.message.answer(part, parse_mode="HTML")


@router.callback_query(F.data == "nutrition_body_recomp")
async def nutrition_body_recomp(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        reminder = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == db_user.id))
        ).scalar_one_or_none()
    text = (
        (f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: goal={reminder.body_goal if reminder else '-'}, "
         f"calories={reminder.target_calories if reminder else '-'}\n\n")
        if reminder else ""
    )
    text += (
        "üí™ –†–µ–∂–∏–º —Ç–µ–ª–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: cut (—Å—É—à–∫–∞) / bulk (–º–∞—Å—Å–∞) / maintain (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ).\n"
        "–ò, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2400.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "goal calories\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "cut 2100\n"
        "bulk 3000\n"
        "maintain 2500\n"
    )
    await cb.message.edit_text(text)
    await cb.answer()


@router.message(F.text.regexp(r"^(cut|bulk|maintain)(\s+\d{3,5})?$"))
async def nutrition_body_recomp_set(message: types.Message) -> None:
    user = message.from_user
    if not user:
        return
    parts = message.text.split()
    goal = parts[0]
    calories = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        reminder = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == db_user.id))
        ).scalar_one_or_none()
        if not reminder:
            reminder = NutritionReminder(user_id=db_user.id)
            session.add(reminder)
        reminder.body_goal = goal
        reminder.target_calories = calories
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ", reply_markup=back_main_menu())


@router.callback_query(F.data == "nutrition_time_settings")
async def nutrition_time_settings(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(NutritionTimeFSM.waiting_days)
    await cb.message.edit_text(
        "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: sunday,wednesday):",
        reply_markup=back_main_menu(),
    )
    await cb.answer()


@router.message(NutritionTimeFSM.waiting_days)
async def set_days(message: types.Message, state: FSMContext) -> None:
    await state.update_data(days=message.text.lower())
    await state.set_state(NutritionTimeFSM.waiting_cook_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 18:00:")


@router.message(NutritionTimeFSM.waiting_cook_time)
async def set_cook_time(message: types.Message, state: FSMContext) -> None:
    await state.update_data(cook_time=message.text)
    await state.set_state(NutritionTimeFSM.waiting_remind_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 17:00:")


@router.message(NutritionTimeFSM.waiting_remind_time)
async def set_remind_time(message: types.Message, state: FSMContext) -> None:
    await state.update_data(remind_time=message.text)
    await state.set_state(NutritionTimeFSM.waiting_shop_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö –∑–∞ –¥–µ–Ω—å –¥–æ –≥–æ—Ç–æ–≤–∫–∏ (HH:MM), –Ω–∞–ø—Ä–∏–º–µ—Ä 16:00:")


@router.message(NutritionTimeFSM.waiting_shop_time)
async def set_shop_time(message: types.Message, state: FSMContext) -> None:
    await state.update_data(shop_time=message.text)
    data = await state.get_data()
    user = message.from_user
    if not user:
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        reminder = (
            await session.execute(select(NutritionReminder).where(NutritionReminder.user_id == db_user.id))
        ).scalar_one_or_none()
        if not reminder:
            reminder = NutritionReminder(user_id=db_user.id)
            session.add(reminder)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        time_info = get_user_time_info(db_user.timezone)
        print(f"üïê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {db_user.telegram_id}")
        print(f"   üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time_info['timezone']}")
        print(f"   üïê –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {time_info['user_local_time'].strftime('%H:%M:%S')}")
        print(f"   üåç UTC –≤—Ä–µ–º—è: {time_info['utc_time'].strftime('%H:%M:%S')}")
        print(f"   ‚è∞ –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {data['cook_time']}")
        print(f"   ‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {data['remind_time']}")
        print(f"   üõí –í—Ä–µ–º—è –ø–æ–∫—É–ø–æ–∫: {data['shop_time']}")
        print(f"   üìä –°–º–µ—â–µ–Ω–∏–µ: {time_info['offset_hours']:+g} —á")
        
        reminder.cooking_days = data["days"]
        reminder.cooking_time = data["cook_time"]
        reminder.reminder_time = data["remind_time"]
        reminder.shopping_reminder_time = data["shop_time"]
        # –ù–µ –∏–∑–º–µ–Ω—è–µ–º target_calories –∏ body_goal - –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    await state.clear()
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ", reply_markup=back_main_menu())





@router.callback_query(F.data == "nutrition_history")
async def nutrition_history(cb: types.CallbackQuery) -> None:
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    async with session_scope() as session:
        db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
        sessions = (
            await session.execute(
                select(CookingSession)
                .where(CookingSession.user_id == db_user.id)
                .order_by(desc(CookingSession.cooking_date))
                .limit(5)
            )
        ).scalars().all()
    if not sessions:
        await cb.message.edit_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=back_main_menu())
        await cb.answer()
        return
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ—Ç–æ–≤–∫–∏:\n\n"
    for s in sessions:
        text += f"- {s.cooking_date.isoformat()} ‚Äî {('–µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' if s.instructions else '–±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π')}\n"
    await cb.message.edit_text(text, reply_markup=back_main_menu())
    await cb.answer()


async def _generate_cooking_plan(budget_info: dict = None) -> str:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞
    budget_context = ""
    if budget_info and budget_info["type"]:
        daily_budget = budget_info["amount"] / 30  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç
        budget_context = f"–í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π –±—é–¥–∂–µ—Ç –ø–∏—Ç–∞–Ω–∏—è {budget_info['description']}. –ü—Ä–∏–º–µ—Ä–Ω–æ {daily_budget:.0f} ‚ÇΩ –≤ –¥–µ–Ω—å. "
        
        if daily_budget < 300:
            budget_context += "–í—ã–±–∏—Ä–∞–π —Å–∞–º—ã–µ —ç–∫–æ–Ω–æ–º–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: –∫—Ä—É–ø—ã, –º–∞–∫–∞—Ä–æ–Ω—ã, —è–π—Ü–∞, —Å–µ–∑–æ–Ω–Ω—ã–µ –æ–≤–æ—â–∏, –∫—É—Ä–∏—Ü–∞."
        elif daily_budget < 500:
            budget_context += "–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: –º—è—Å–æ –∫—É—Ä–∏—Ü—ã/—Å–≤–∏–Ω–∏–Ω—ã, —Ä—ã–±–∞ –Ω–µ–¥–æ—Ä–æ–≥–∞—è, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã –ø–æ —Å–µ–∑–æ–Ω—É."
        elif daily_budget < 700:
            budget_context += "–ú–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—è—Å–æ, —Ä—ã–±—É, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã."
        else:
            budget_context += "–ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ã, —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã."
    
    system = (
        f"–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –∫—É–ª–∏–Ω–∞—Ä. {budget_context}"
        "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ 2 –¥–Ω—è —Å–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª–µ–∑–Ω—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º. "
        "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –í–°–ï —Ä–∞–∑–¥–µ–ª—ã:\n"
        "1. üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —Ü–µ–Ω–∞–º–∏)\n"
        "2. üë®‚Äçüç≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º\n"
        "3. üî• –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ –¥–µ–Ω—å\n"
        "4. üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
        "–ë—É–¥—å –î–ï–¢–ê–õ–¨–ù–´–ú –∏ –ü–û–õ–ù–´–ú. –ù–µ –æ–±—Ä–µ–∑–∞–π –æ—Ç–≤–µ—Ç. "
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ. "
        "–ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."
    )
    
    prompt_parts = ["–°–¥–µ–ª–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ 2 –¥–Ω—è."]
    if budget_info and budget_info["type"]:
        prompt_parts.append(f"–ë—é–¥–∂–µ—Ç: {budget_info['description']}.")
    prompt_parts.append("–§–æ—Ä–º–∞—Ç: –ü–æ–∫—É–ø–∫–∏ —Å —Ü–µ–Ω–∞–º–∏, –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ö–∞–ª–æ—Ä–∏–∏/–¥–µ–Ω—å.")
    
    prompt = " ".join(prompt_parts)
    
    try:
        print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —Å prompt='{prompt[:100]}...' –∏ system='{system[:100]}...'")
        print(f"DEBUG: –ò—Å–ø–æ–ª—å–∑—É—é max_tokens=5000 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
        
        # –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        result = await deepseek_complete(prompt, system=system, max_tokens=5000)
        
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –¥–ª–∏–Ω–æ–π {len(result) if result else 0}")
        
        if result and len(result.strip()) > 100:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
            quality_score = _check_response_quality(result)
            print(f"DEBUG: –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: {quality_score}/100")
            
            if quality_score >= 70:
                print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –æ—Ç –ò–ò")
                print(f"DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {result[:200]}...")
                print(f"DEBUG: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: ...{result[-200:]}")
                print(f"DEBUG: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò:")
                print("=" * 80)
                print(result)
                print("=" * 80)
                return result
            else:
                print(f"DEBUG: –û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π (–∫–∞—á–µ—Å—Ç–≤–æ {quality_score}/100), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω")
                return _generate_fallback_plan(budget_info, "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò –Ω–µ–ø–æ–ª–Ω—ã–π")
        else:
            print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
            return _generate_fallback_plan(budget_info, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
            
    except Exception as e:
        error_msg = str(e)
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {error_msg}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "timeout" in error_msg.lower() or "timed out" in error_msg.lower():
            print(f"DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–º–∞—É—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω")
            return _generate_fallback_plan(budget_info, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò")
        elif "rate limit" in error_msg.lower() or "429" in error_msg:
            print(f"DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω rate limit, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω")
            return _generate_fallback_plan(budget_info, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò")
        else:
            print(f"DEBUG: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω")
            return _generate_fallback_plan(budget_info, f"–û—à–∏–±–∫–∞ –ò–ò: {error_msg}")


def _check_response_quality(text: str) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò (0-100)"""
    if not text:
        return 0
    
    score = 0
    text_lower = text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    required_sections = [
        ('—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', 20),
        ('–ø–æ–∫—É–ø–∫–∏', 20),
        ('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', 20),
        ('–≥–æ—Ç–æ–≤–∫', 20),
        ('–∫–∞–ª–æ—Ä–∏–∏', 15),
        ('—Å—Ç–æ–∏–º–æ—Å—Ç—å', 15),
        ('—Ü–µ–Ω–∞', 10),
        ('–¥–µ–Ω—å 1', 15),
        ('–¥–µ–Ω—å 2', 15)
    ]
    
    for section, points in required_sections:
        if section in text_lower:
            score += points
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
    if len(text) > 1000:
        score += 20
    elif len(text) > 500:
        score += 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (–Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π)
    if 'üìã' in text or 'üõí' in text or 'üë®‚Äçüç≥' in text or 'üî•' in text or 'üíµ' in text:
        score += 15
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if any(char.isdigit() for char in text):  # –ï—Å—Ç—å —á–∏—Å–ª–∞ (—Ü–µ–Ω—ã, –∫–∞–ª–æ—Ä–∏–∏)
        score += 10
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
    return min(score, 100)


def _generate_fallback_plan(budget_info: dict = None, error_msg: str = "") -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –ò–ò"""
    budget_text = ""
    daily_budget = 0
    
    if budget_info and budget_info["type"]:
        daily_budget = budget_info["amount"] / 30
        budget_text = f"\n\nüí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {budget_info['description']} (~{daily_budget:.0f} ‚ÇΩ/–¥–µ–Ω—å)"
    
    error_info = f"\n\n‚ö†Ô∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ü–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_msg})"
    
    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–æ–¥ –±—é–¥–∂–µ—Ç
    if daily_budget > 0:
        if daily_budget < 200:  # –û—á–µ–Ω—å —ç–∫–æ–Ω–æ–º–Ω—ã–π
            products = """‚Ä¢ –ì—Ä–µ—á–∫–∞ - 1 –∫–≥ (120-180 ‚ÇΩ)
‚Ä¢ –†–∏—Å - 500 –≥ (80-120 ‚ÇΩ)
‚Ä¢ –ú–∞–∫–∞—Ä–æ–Ω—ã - 1 –∫–≥ (120-180 ‚ÇΩ)
‚Ä¢ –Ø–π—Ü–∞ - 15 —à—Ç (120-180 ‚ÇΩ)
‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 3 –∫–≥ (180-300 ‚ÇΩ)
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 –∫–≥ (60-100 ‚ÇΩ)
‚Ä¢ –õ—É–∫ - 1 –∫–≥ (40-80 ‚ÇΩ)
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 2 –≥–æ–ª–æ–≤–∫–∏ (40-80 ‚ÇΩ)
‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 200 –≥ (60-100 ‚ÇΩ)
‚Ä¢ –ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ - 500 –º–ª (80-120 ‚ÇΩ)
‚Ä¢ –°–æ–ª—å, —Å–ø–µ—Ü–∏–∏ - (50-100 ‚ÇΩ)"""
            total_cost = "800-1200 ‚ÇΩ"
        elif daily_budget < 400:  # –≠–∫–æ–Ω–æ–º–Ω—ã–π
            products = """‚Ä¢ –ö—É—Ä–∏—Ü–∞ –≥—Ä—É–¥–∫–∞ - 1 –∫–≥ (400-600 ‚ÇΩ)
‚Ä¢ –†–∏—Å - 500 –≥ (80-120 ‚ÇΩ)
‚Ä¢ –ì—Ä–µ—á–∫–∞ - 500 –≥ (100-150 ‚ÇΩ)
‚Ä¢ –ú–∞–∫–∞—Ä–æ–Ω—ã - 500 –≥ (60-100 ‚ÇΩ)
‚Ä¢ –Ø–π—Ü–∞ - 10 —à—Ç (80-120 ‚ÇΩ)
‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 2 –∫–≥ (120-200 ‚ÇΩ)
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 –∫–≥ (60-100 ‚ÇΩ)
‚Ä¢ –õ—É–∫ - 1 –∫–≥ (40-80 ‚ÇΩ)
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 2 –≥–æ–ª–æ–≤–∫–∏ (40-80 ‚ÇΩ)
‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 200 –≥ (60-100 ‚ÇΩ)
‚Ä¢ –ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ - 500 –º–ª (80-120 ‚ÇΩ)
‚Ä¢ –°–æ–ª—å, —Å–ø–µ—Ü–∏–∏ - (50-100 ‚ÇΩ)"""
            total_cost = "1200-1800 ‚ÇΩ"
        else:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            products = """‚Ä¢ –ö—É—Ä–∏—Ü–∞ –≥—Ä—É–¥–∫–∞ - 1.5 –∫–≥ (600-900 ‚ÇΩ)
‚Ä¢ –°–≤–∏–Ω–∏–Ω–∞ - 500 –≥ (300-450 ‚ÇΩ)
‚Ä¢ –†–∏—Å - 1 –∫–≥ (160-240 ‚ÇΩ)
‚Ä¢ –ì—Ä–µ—á–∫–∞ - 500 –≥ (100-150 ‚ÇΩ)
‚Ä¢ –ú–∞–∫–∞—Ä–æ–Ω—ã - 500 –≥ (60-100 ‚ÇΩ)
‚Ä¢ –Ø–π—Ü–∞ - 15 —à—Ç (120-180 ‚ÇΩ)
‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 2 –∫–≥ (120-200 ‚ÇΩ)
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 –∫–≥ (60-100 ‚ÇΩ)
‚Ä¢ –õ—É–∫ - 1 –∫–≥ (40-80 ‚ÇΩ)
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 2 –≥–æ–ª–æ–≤–∫–∏ (40-80 ‚ÇΩ)
‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 300 –≥ (90-150 ‚ÇΩ)
‚Ä¢ –ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ - 500 –º–ª (80-120 ‚ÇΩ)
‚Ä¢ –°–æ–ª—å, —Å–ø–µ—Ü–∏–∏ - (50-100 ‚ÇΩ)"""
            total_cost = "1800-2500 ‚ÇΩ"
    else:
        # –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω
        products = """‚Ä¢ –ö—É—Ä–∏—Ü–∞ –≥—Ä—É–¥–∫–∞ - 1 –∫–≥ (400-600 ‚ÇΩ)
‚Ä¢ –†–∏—Å - 500 –≥ (80-120 ‚ÇΩ)
‚Ä¢ –ì—Ä–µ—á–∫–∞ - 500 –≥ (100-150 ‚ÇΩ)
‚Ä¢ –ú–∞–∫–∞—Ä–æ–Ω—ã - 500 –≥ (60-100 ‚ÇΩ)
‚Ä¢ –Ø–π—Ü–∞ - 10 —à—Ç (80-120 ‚ÇΩ)
‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 2 –∫–≥ (120-200 ‚ÇΩ)
‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 –∫–≥ (60-100 ‚ÇΩ)
‚Ä¢ –õ—É–∫ - 1 –∫–≥ (40-80 ‚ÇΩ)
‚Ä¢ –ß–µ—Å–Ω–æ–∫ - 2 –≥–æ–ª–æ–≤–∫–∏ (40-80 ‚ÇΩ)
‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 200 –≥ (60-100 ‚ÇΩ)
‚Ä¢ –ú–∞—Å–ª–æ –ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–æ–µ - 500 –º–ª (80-120 ‚ÇΩ)
‚Ä¢ –°–æ–ª—å, —Å–ø–µ—Ü–∏–∏ - (50-100 ‚ÇΩ)"""
        total_cost = "1200-1800 ‚ÇΩ"
    
    return f"""üçΩÔ∏è <b>–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 2 –¥–Ω—è</b>{budget_text}

üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>
{products}

üë®‚Äçüç≥ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤–∫–∏:</b>

<b>–î–µ–Ω—å 1 - –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏:</b>
‚Ä¢ –û–±–∂–∞—Ä—å—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º –æ–≥–Ω–µ 15-20 –º–∏–Ω—É—Ç
‚Ä¢ –û—Ç–≤–∞—Ä–∏—Ç–µ —Ä–∏—Å (1 —Å—Ç–∞–∫–∞–Ω –Ω–∞ 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã)
‚Ä¢ –ù–∞—Ä–µ–∂—å—Ç–µ –æ–≤–æ—â–∏ –∏ –æ–±–∂–∞—Ä—å—Ç–µ –∏—Ö 5-7 –º–∏–Ω—É—Ç
‚Ä¢ –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å –≥–∞—Ä–Ω–∏—Ä–æ–º

<b>–î–µ–Ω—å 2 - –ì—Ä–µ—á–∫–∞ —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å–∞–ª–∞—Ç–æ–º:</b>
‚Ä¢ –û—Ç–≤–∞—Ä–∏—Ç–µ –≥—Ä–µ—á–∫—É (1 —Å—Ç–∞–∫–∞–Ω –Ω–∞ 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã)
‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–π—Ç–µ –∫—É—Ä–∏–Ω—É—é –≥—Ä—É–¥–∫—É
‚Ä¢ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π
‚Ä¢ –ó–∞–ø—Ä–∞–≤—å—Ç–µ —Å–∞–ª–∞—Ç –º–∞—Å–ª–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º

üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> 1800-2200 –∫–∫–∞–ª/–¥–µ–Ω—å
üíµ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost}

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ì–æ—Ç–æ–≤—å—Ç–µ –Ω–∞ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –±–ª—é–¥
‚Ä¢ –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞{error_info}"""


def _split_into_multiple_messages(text: str, max_len: int = 3000) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç DeepSeek.
    """
    if not text:
        return []
    
    print(f"DEBUG: _split_into_multiple_messages –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"DEBUG: max_len = {max_len}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª–∏–Ω–Ω–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    force_split_threshold = 1500
    
    if len(text) <= force_split_threshold:
        print(f"DEBUG: –ü–ª–∞–Ω –∫–æ—Ä–æ—á–µ {force_split_threshold} —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º")
        return [text]
    
    # –î–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏—â–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
    lines = text.split('\n')
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    section_indicators = [
        'üìã', 'üõí', 'üìù', 'üë®‚Äçüç≥', 'üî•', 'üíµ', 'üí∞', 'üçΩÔ∏è', 'ü•ó', 'ü•©',
        '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:', '–ü–æ–∫—É–ø–∫–∏:', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', '–†–µ—Ü–µ–ø—Ç—ã:', 
        '–ö–∞–ª–æ—Ä–∏–∏:', '–°—Ç–æ–∏–º–æ—Å—Ç—å:', '–ë—é–¥–∂–µ—Ç:', '–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
        '–î–µ–Ω—å 1:', '–î–µ–Ω—å 2:', '–ó–∞–≤—Ç—Ä–∞–∫:', '–û–±–µ–¥:', '–£–∂–∏–Ω:', '–ü–µ—Ä–µ–∫—É—Å:'
    ]
    
    print(f"DEBUG: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–∑ {len(lines)} —Å—Ç—Ä–æ–∫")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–µ–∫—Ü–∏—è–º
    parts = []
    current_part = []
    current_length = 0
    
    for i, line in enumerate(lines):
        line_length = len(line) + 1  # +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Å–µ–∫—Ü–∏–∏
        is_section_break = any(indicator in line for indicator in section_indicators)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π –∏–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–µ–∫—Ü–∏–∏
        if (current_length + line_length > max_len and current_part) or (is_section_break and current_part and current_length > max_len * 0.3):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            part_text = '\n'.join(current_part).strip()
            if part_text:
                parts.append(part_text)
                print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(part_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            current_part = [line]
            current_length = line_length
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            current_part.append(line)
            current_length += line_length
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        part_text = '\n'.join(current_part).strip()
        if part_text:
            parts.append(part_text)
            print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(part_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"DEBUG: –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ {len(parts)} —á–∞—Å—Ç–µ–π")
    
    # –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∏–ª–∏ –¥–∞–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    if len(parts) == 1 or len(parts) > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —á–∞—Å—Ç–µ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        print(f"DEBUG: –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ {len(parts)} —á–∞—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")
        # –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ —Ç–æ–ª—å–∫–æ 1 —á–∞—Å—Ç—å, –Ω–æ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, 
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
        if len(parts) == 1 and len(text) > 1500:
            print(f"DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞—é –¥–ª–∏–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π")
            return _split_into_parts_standard(text, max_len)
        return _split_into_parts_standard(text, max_len)
    
    print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∏–ª –Ω–∞ {len(parts)} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π")
    return parts


def _split_into_parts_standard(text: str, max_len: int = 3000) -> list[str]:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ"""
    print(f"DEBUG: _split_into_parts_standard –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"DEBUG: max_len = {max_len}")
    
    if len(text) <= max_len:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_len, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (>1500), 
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if len(text) > 1500:
            print(f"DEBUG: –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ 2 —á–∞—Å—Ç–∏")
            mid_point = len(text) // 2
            # –ò—â–µ–º —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –æ–∫–æ–ª–æ —Å–µ—Ä–µ–¥–∏–Ω—ã
            for i in range(mid_point - 100, mid_point + 100):
                if i < 0 or i >= len(text):
                    continue
                if text[i] == '\n':
                    mid_point = i + 1
                    break
                elif text[i] == ' ':
                    mid_point = i + 1
                    break
            
            part1 = text[:mid_point].strip()
            part2 = text[mid_point:].strip()
            
            if part1 and part2:
                print(f"DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: —á–∞—Å—Ç—å 1 –¥–ª–∏–Ω–æ–π {len(part1)}, —á–∞—Å—Ç—å 2 –¥–ª–∏–Ω–æ–π {len(part2)}")
                return [part1, part2]
        
        print(f"DEBUG: –¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_len, –≤–æ–∑–≤—Ä–∞—â–∞—é –∫–∞–∫ –µ—Å—Ç—å")
        return [text]
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏
    optimal_part_size = min(max_len, 2500) if len(text) > 4000 else max_len
    print(f"DEBUG: optimal_part_size = {optimal_part_size}")
    
    parts = []
    remaining_text = text
    
    while len(remaining_text) > optimal_part_size:
        # –ò—â–µ–º —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º
        split_point = optimal_part_size
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
        for i in range(optimal_part_size - 100, optimal_part_size):  # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–∏–º–≤–æ–ª–∞—Ö
            if i < 0:
                break
            if remaining_text[i] == '\n':
                split_point = i + 1
                break
            elif remaining_text[i] == ' ':
                split_point = i + 1
                break
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        part = remaining_text[:split_point].strip()
        parts.append(part)
        print(f"DEBUG: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        remaining_text = remaining_text[split_point:].strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if remaining_text:
        parts.append(remaining_text)
        print(f"DEBUG: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –¥–ª–∏–Ω–æ–π {len(remaining_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"DEBUG: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–∏–ª–æ—Å—å {len(parts)} —á–∞—Å—Ç–µ–π")
    return parts


def _convert_markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Markdown —Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML —Ç–µ–≥–∏ –¥–ª—è Telegram"""
    if not text:
        return text
    
    print(f"DEBUG: _convert_markdown_to_html –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **—Ç–µ–∫—Å—Ç** –≤ <b>—Ç–µ–∫—Å—Ç</b>
    import re
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º *—Ç–µ–∫—Å—Ç* –≤ <i>—Ç–µ–∫—Å—Ç</i> (–∫—É—Ä—Å–∏–≤)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `—Ç–µ–∫—Å—Ç` –≤ <code>—Ç–µ–∫—Å—Ç</code> (–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    text = re.sub(r'^##\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    text = re.sub(r'^#\s+(.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º - –ø—É–Ω–∫—Ç –≤ ‚Ä¢ –ø—É–Ω–∫—Ç (–¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    text = re.sub(r'^\s*-\s+', r'‚Ä¢ ', text, flags=re.MULTILINE)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º * –ø—É–Ω–∫—Ç –≤ ‚Ä¢ –ø—É–Ω–∫—Ç (–¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    text = re.sub(r'^\s*\*\s+', r'‚Ä¢ ', text, flags=re.MULTILINE)
    
    print(f"DEBUG: –ü–æ—Å–ª–µ HTML –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return text


@router.message(Command("test_nutrition_settings"))
async def test_nutrition_settings(message: types.Message) -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–Ω–∏."""
    user = message.from_user
    if not user:
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
            reminder = (await session.execute(
                select(NutritionReminder).where(NutritionReminder.user_id == db_user.id)
            )).scalar_one_or_none()
            
            if not reminder:
                await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.utils.timezone_utils import get_user_time_info
            time_info = get_user_time_info(db_user.timezone)
            
            # –ü–∞—Ä—Å–∏—Ä—É–µ–º –¥–Ω–∏
            days = [d.strip().lower() for d in (reminder.cooking_days or "").split(",") if d.strip()]
            weekday_names = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
            current_day_name = weekday_names[time_info['user_local_time'].weekday()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–Ω–µ–º –≥–æ—Ç–æ–≤–∫–∏
            from app.services.nutrition_reminders import _weekday_str_to_int
            is_cooking_day = time_info['user_local_time'].weekday() in [
                _weekday_str_to_int(d) for d in days if d in {"sunday", "wednesday", "monday", "tuesday", "thursday", "friday", "saturday"}
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–≤—Ç—Ä–∞ –¥–Ω–µ–º –≥–æ—Ç–æ–≤–∫–∏ (–¥–ª—è –ø–æ–∫—É–ø–æ–∫)
            tomorrow_weekday = (time_info['user_local_time'].weekday() + 1) % 7
            tomorrow_day_name = weekday_names[tomorrow_weekday]
            is_shopping_day = tomorrow_weekday in [
                _weekday_str_to_int(d) for d in days if d in {"sunday", "wednesday", "monday", "tuesday", "thursday", "friday", "saturday"}
            ]
            
            status_text = f"""üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ç–∞–Ω–∏—è</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {db_user.telegram_id}
üìç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {time_info['timezone']}
üïê <b>–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:</b> {time_info['user_local_time'].strftime('%d.%m.%Y %H:%M')}

üìÖ <b>–î–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏:</b> {reminder.cooking_days or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
‚è∞ <b>–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:</b> {reminder.cooking_time or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
‚è∞ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {reminder.reminder_time or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
üõí <b>–í—Ä–µ–º—è –ø–æ–∫—É–ø–æ–∫:</b> {reminder.shopping_reminder_time or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
üéØ <b>–¶–µ–ª—å:</b> {reminder.body_goal or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {reminder.target_calories or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}

üìä <b>–°—Ç–∞—Ç—É—Å —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è ({current_day_name}): {'‚úÖ –î–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏' if is_cooking_day else '‚ùå –ù–µ –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏'}
‚Ä¢ –ó–∞–≤—Ç—Ä–∞ ({tomorrow_day_name}): {'‚úÖ –î–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏ (—Å–µ–≥–æ–¥–Ω—è –ø–æ–∫—É–ø–∫–∏)' if is_shopping_day else '‚ùå –ù–µ –¥–µ–Ω—å –≥–æ—Ç–æ–≤–∫–∏'}

üîß <b>–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏:</b> {days}
üîß <b>–ù–æ–º–µ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏:</b> {[_weekday_str_to_int(d) for d in days if d in {'sunday', 'wednesday', 'monday', 'tuesday', 'thursday', 'friday', 'saturday'}]}"""
            
            await message.answer(status_text, parse_mode="HTML")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}")






