from __future__ import annotations

from datetime import datetime
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.db.session import session_scope
from app.db.models import User, Creditor, Debtor
from app.keyboards.common import back_main_menu
from app.services.finance_reminders import send_finance_reminders_for_user
from app.handlers.finance_management import CreditorStates, DebtorStates

router = Router()


@router.callback_query(F.data.startswith("creditor_edit:"))
async def creditor_edit_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞"""
    creditor_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        creditor = await session.get(Creditor, creditor_id)
        if not creditor:
            await cb.answer("–ö—Ä–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(creditor_id=creditor_id)
        await state.set_state(CreditorStates.waiting_for_name)
        
        await cb.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞</b>\n\n"
            f"üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {creditor.name}\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞:</b> {float(creditor.amount):,.2f} ‚ÇΩ\n"
            f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {creditor.due_date.strftime('%d.%m.%Y')}\n"
            f"üìù <b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {creditor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞:",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data.startswith("debtor_edit:"))
async def debtor_edit_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∞"""
    debtor_id = int(cb.data.split(":")[1])
    
    async with session_scope() as session:
        debtor = await session.get(Debtor, debtor_id)
        if not debtor:
            await cb.answer("–î–æ–ª–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ–ª–∂–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(debtor_id=debtor_id)
        await state.set_state(DebtorStates.waiting_for_name)
        
        await cb.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∞</b>\n\n"
            f"üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {debtor.name}\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞:</b> {float(debtor.amount):,.2f} ‚ÇΩ\n"
            f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:</b> {debtor.due_date.strftime('%d.%m.%Y')}\n"
            f"üìù <b>–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {debtor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞:",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await cb.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@router.message(CreditorStates.waiting_for_name)
async def creditor_edit_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    creditor_id = data.get("creditor_id")
    
    if not creditor_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(name=name)
    await state.set_state(CreditorStates.waiting_for_amount)
    
    await message.answer(
        "<b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–æ–ª–≥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )


@router.message(CreditorStates.waiting_for_amount)
async def creditor_edit_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
        
        await state.update_data(amount=amount)
        await state.set_state(CreditorStates.waiting_for_due_date)
        
        await message.answer(
            "<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(CreditorStates.waiting_for_due_date)
async def creditor_edit_due_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(due_date=due_date)
        await state.set_state(CreditorStates.waiting_for_description)
        
        await message.answer(
            "<b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(CreditorStates.waiting_for_description)
async def creditor_edit_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = await state.get_data()
    creditor_id = data.get("creditor_id")
    name = data.get("name")
    amount = data.get("amount")
    due_date = data.get("due_date")
    description = message.text if message.text != "." else ""
    
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            creditor = await session.get(Creditor, creditor_id)
            if not creditor or creditor.user_id != db_user.id:
                await message.answer("‚ùå –ö—Ä–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                await state.clear()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞
            creditor.name = name
            creditor.amount = amount
            creditor.due_date = due_date
            creditor.description = description
            creditor.updated_at = datetime.now()
            
            await session.commit()
            
            await message.answer(
                f"‚úÖ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {name}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
                f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:</b> {due_date.strftime('%d.%m.%Y')}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∏–∫–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@router.message(DebtorStates.waiting_for_name)
async def debtor_edit_name_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –¥–æ–ª–∂–Ω–∏–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    debtor_id = data.get("debtor_id")
    
    if not debtor_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(name=name)
    await state.set_state(DebtorStates.waiting_for_amount)
    
    await message.answer(
        "<b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–æ–ª–≥–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        parse_mode="HTML"
    )


@router.message(DebtorStates.waiting_for_amount)
async def debtor_edit_amount_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é —Å—É–º–º—É –¥–æ–ª–∂–Ω–∏–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return
        
        await state.update_data(amount=amount)
        await state.set_state(DebtorStates.waiting_for_due_date)
        
        await message.answer(
            "<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")


@router.message(DebtorStates.waiting_for_due_date)
async def debtor_edit_due_date_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ–ª–∂–Ω–∏–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        due_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(due_date=due_date)
        await state.set_state(DebtorStates.waiting_for_description)
        
        await message.answer(
            "<b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(DebtorStates.waiting_for_description)
async def debtor_edit_description_handler(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    data = await state.get_data()
    debtor_id = data.get("debtor_id")
    name = data.get("name")
    amount = data.get("amount")
    due_date = data.get("due_date")
    description = message.text if message.text != "." else ""
    
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–∂–Ω–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            debtor = await session.get(Debtor, debtor_id)
            if not debtor or debtor.user_id != db_user.id:
                await message.answer("‚ùå –î–æ–ª–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                await state.clear()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–∏–∫–∞
            debtor.name = name
            debtor.amount = amount
            debtor.due_date = due_date
            debtor.description = description
            debtor.updated_at = datetime.now()
            
            await session.commit()
            
            await message.answer(
                f"‚úÖ <b>–î–æ–ª–∂–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {name}\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} ‚ÇΩ\n"
                f"üìÖ <b>–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã:</b> {due_date.strftime('%d.%m.%Y')}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                reply_markup=back_main_menu(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∏–∫–∞:</b>\n{str(e)}",
            reply_markup=back_main_menu(),
            parse_mode="HTML"
        )
    
    await state.clear()


@router.message(Command("test_finance_reminders"))
async def test_finance_reminders(message: types.Message) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = message.from_user
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(select(User).where(User.telegram_id == user.id))).scalar_one()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await send_finance_reminders_for_user(session, db_user.id)
            
            await message.answer(
                "‚úÖ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –≤—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞—Ö.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>\n{str(e)}",
            parse_mode="HTML"
        )
