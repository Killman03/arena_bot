from __future__ import annotations

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, date
from sqlalchemy import select, func
from app.db.session import session_scope
from app.db.models import User, Goal, GoalStatus, Todo
from app.services.gladiator_punishments import generate_gladiator_punishment

router = Router()


@router.message(Command("arena_punishment"))
async def arena_punishment_command(message: types.Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞"""
    await check_arena_punishment(message)


@router.callback_query(F.data == "arena_punishment")
async def arena_punishment_callback(cb: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê—Ä–µ–Ω–∞ –∂–∏–∑–Ω–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await cb.answer()
    await check_arena_punishment(cb.message, cb.from_user)


async def check_arena_punishment(message_or_cb, user=None) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω—ã –∂–∏–∑–Ω–∏"""
    if user is None:
        user = message_or_cb.from_user
    
    if not user:
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–µ–Ω—É
    if hasattr(message_or_cb, 'edit_text'):
        # –≠—Ç–æ callback query
        status_message = message_or_cb
        await message_or_cb.edit_text(
            "‚öîÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—è—é –∞—Ä–µ–Ω—É –∂–∏–∑–Ω–∏...</b>\n\n"
            "üîç –ò—â—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞...",
            parse_mode="HTML"
        )
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_message = await message_or_cb.answer(
            "‚öîÔ∏è <b>–ü—Ä–æ–≤–µ—Ä—è—é –∞—Ä–µ–Ω—É –∂–∏–∑–Ω–∏...</b>\n\n"
            "üîç –ò—â—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞...",
            parse_mode="HTML"
        )
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == user.id)
            )).scalar_one()
            
            today = date.today()
            overdue_items = {
                'goals': [],
                'todos': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
            overdue_goals = (await session.execute(
                select(Goal).where(
                    Goal.user_id == db_user.id,
                    Goal.status == GoalStatus.active,
                    Goal.due_date.is_not(None),
                    Goal.due_date < today
                )
            )).scalars().all()
            
            for goal in overdue_goals:
                days_overdue = (today - goal.due_date).days
                overdue_items['goals'].append({
                    'title': goal.title,
                    'deadline': goal.due_date,
                    'days_overdue': days_overdue
                })
            

            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            overdue_todos = (await session.execute(
                select(Todo).where(
                    Todo.user_id == db_user.id,
                    Todo.is_completed == False,
                    Todo.due_date < today
                )
            )).scalars().all()
            
            for todo in overdue_todos:
                days_overdue = (today - todo.due_date).days
                overdue_items['todos'].append({
                    'title': todo.title,
                    'due_date': todo.due_date,
                    'days_overdue': days_overdue
                })
            
            total_overdue = (
                len(overdue_items['goals']) + 
                len(overdue_items['todos'])
            )
            
            if total_overdue == 0:
                await status_message.edit_text(
                    "üèÜ <b>–ì–õ–ê–î–ò–ê–¢–û–† –î–û–°–¢–û–ò–ù –ß–ï–°–¢–ò –ê–†–ï–ù–´!</b>\n\n"
                    "‚öîÔ∏è –í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã —Å–æ–±–ª—é–¥–µ–Ω—ã!\n"
                    "üõ°Ô∏è –¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –±–µ–∑—É–ø—Ä–µ—á–Ω–∞!\n"
                    "üëë –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    parse_mode="HTML"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if hasattr(status_message, 'edit_text'):
                await status_message.edit_text(
                    f"‚öîÔ∏è <b>–ê–†–ï–ù–ê –û–ë–ù–ê–†–£–ñ–ò–õ–ê –ü–†–û–°–†–û–ß–ö–ò!</b>\n\n"
                    f"üéØ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(overdue_items['goals'])}\n"
                    f"üìù –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(overdue_items['todos'])}\n\n"
                    f"üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞–∫–∞–∑–∞–Ω–∏–µ...",
                    parse_mode="HTML"
                )
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message_or_cb.answer(
                    f"‚öîÔ∏è <b>–ê–†–ï–ù–ê –û–ë–ù–ê–†–£–ñ–ò–õ–ê –ü–†–û–°–†–û–ß–ö–ò!</b>\n\n"
                    f"üéØ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π: {len(overdue_items['goals'])}\n"
                    f"üìù –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(overdue_items['todos'])}\n\n"
                    f"üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞–∫–∞–∑–∞–Ω–∏–µ...",
                    parse_mode="HTML"
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            punishment = await generate_gladiator_punishment(
                overdue_goals=overdue_items['goals'],
    
                overdue_todos=overdue_items['todos']
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", 
                        callback_data="accept_punishment"
                    ),
                    InlineKeyboardButton(
                        text="üõ°Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–µ–ª–∞", 
                        callback_data="fix_overdue_items"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                        callback_data="overdue_analysis"
                    )
                ]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
            if hasattr(status_message, 'edit_text'):
                await status_message.edit_text(
                    f"‚öîÔ∏è <b>–ü–†–ò–ì–û–í–û–† –ê–†–ï–ù–´ –í–´–ù–ï–°–ï–ù!</b>\n\n{punishment}",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message_or_cb.answer(
                    f"‚öîÔ∏è <b>–ü–†–ò–ì–û–í–û–† –ê–†–ï–ù–´ –í–´–ù–ï–°–ï–ù!</b>\n\n{punishment}",
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            
    except Exception as e:
        if hasattr(status_message, 'edit_text'):
            await status_message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message_or_cb.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )


@router.callback_query(F.data == "accept_punishment")
async def accept_punishment(cb: types.CallbackQuery) -> None:
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–º"""
    await cb.message.edit_text(
        "‚öîÔ∏è <b>–ì–õ–ê–î–ò–ê–¢–û–† –ü–†–ò–ù–Ø–õ –ù–ê–ö–ê–ó–ê–ù–ò–ï!</b>\n\n"
        "üõ°Ô∏è –¢–≤–æ—è —á–µ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
        "üí™ –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–π –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–π–Ω–æ!\n"
        "üèõÔ∏è –ê—Ä–µ–Ω–∞ —Å–ª–µ–¥–∏—Ç –∑–∞ —Ç–æ–±–æ–π!\n\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /arena_punishment –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "fix_overdue_items")
async def fix_overdue_items(cb: types.CallbackQuery) -> None:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–ª"""
    await cb.message.edit_text(
        "üõ°Ô∏è <b>–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –î–ï–õ</b>\n\n"
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéØ –¶–µ–ª–∏", callback_data="fix_goals"),

            ],
            [
                InlineKeyboardButton(text="üìù –ó–∞–¥–∞—á–∏", callback_data="fix_todos"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_punishment")
            ]
        ]),
        parse_mode="HTML"
    )
    await cb.answer()


@router.callback_query(F.data == "overdue_analysis")
async def overdue_analysis(cb: types.CallbackQuery) -> None:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–ª"""
    user = cb.from_user
    if not user:
        await cb.answer()
        return
    
    try:
        async with session_scope() as session:
            db_user = (await session.execute(
                select(User).where(User.telegram_id == user.id)
            )).scalar_one()
            
            today = date.today()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            overdue_goals_count = (await session.execute(
                select(func.count(Goal.id)).where(
                    Goal.user_id == db_user.id,
                    Goal.status == GoalStatus.active,
                    Goal.deadline < today
                )
            )).scalar()
            

            
            overdue_todos_count = (await session.execute(
                select(func.count(Todo.id)).where(
                    Todo.user_id == db_user.id,
                    Todo.is_completed == False,
                    Todo.due_date < today
                )
            )).scalar()
            
            total_overdue = overdue_goals_count + overdue_todos_count
            
            if total_overdue == 0:
                await cb.message.edit_text(
                    "üèÜ <b>–ê–ù–ê–õ–ò–ó –ê–†–ï–ù–´</b>\n\n"
                    "‚úÖ –í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã —Å–æ–±–ª—é–¥–µ–Ω—ã!\n"
                    "üõ°Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ!\n"
                    "üëë –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    parse_mode="HTML"
                )
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫
            total_items = (await session.execute(
                select(func.count(Goal.id)).where(
                    Goal.user_id == db_user.id,
                    Goal.status == GoalStatus.active
                )
            )).scalar()
            

            
            total_items += (await session.execute(
                select(func.count(Todo.id)).where(
                    Todo.user_id == db_user.id,
                    Todo.is_completed == False
                )
            )).scalar()
            
            overdue_percentage = (total_overdue / total_items * 100) if total_items > 0 else 0
            
            analysis_text = (
                f"üìä <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–†–ï–ù–´</b>\n\n"
                f"üéØ <b>–¶–µ–ª–∏:</b> {overdue_goals_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ\n"

                f"üìù <b>–ó–∞–¥–∞—á–∏:</b> {overdue_todos_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ\n\n"
                f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª: {total_items}\n"
                f"‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {total_overdue}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫: {overdue_percentage:.1f}%\n\n"
            )
            
            if overdue_percentage > 50:
                analysis_text += "üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨!</b>\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
            elif overdue_percentage > 25:
                analysis_text += "‚ö†Ô∏è <b>–í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨!</b>\n–ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å!"
            elif overdue_percentage > 10:
                analysis_text += "üü° <b>–°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨!</b>\n–ï—Å—Ç—å –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å!"
            else:
                analysis_text += "üü¢ <b>–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨!</b>\n–•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!"
            
            await cb.message.edit_text(
                analysis_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é", callback_data="back_to_punishment")]
                ]),
                parse_mode="HTML"
            )
            
    except Exception as e:
        await cb.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await cb.answer()


@router.callback_query(F.data == "back_to_punishment")
async def back_to_punishment(cb: types.CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é"""
    await cb.message.edit_text(
        "‚öîÔ∏è <b>–í–û–ó–í–†–ê–¢ –ö –ù–ê–ö–ê–ó–ê–ù–ò–Æ</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /arena_punishment –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await cb.answer()
