from __future__ import annotations

from datetime import datetime, timedelta, timezone
from typing import Dict, Set

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.services.daily_reminders import send_daily_principle, send_daily_motivation
from app.services.nutrition_reminders import (
    send_cooking_day_reminders,
    send_shopping_day_reminders,
)
from app.services.health_reminders import send_health_daily_prompt
from app.services.goal_reminders import send_goal_reminders
from app.services.todo_reminders import send_todo_reminders
from app.services.finance_reminders import send_finance_reminders, send_finance_reminders_for_user
from app.services.finance_todo_manager import create_todos_for_all_users
from app.services.nutrition_todo_manager import create_nutrition_todos_for_all_users
from app.utils.timezone_utils import is_time_to_send_reminder, get_user_time_info

from sqlalchemy import select
from app.db.models import User


class AppScheduler:
    """Wrapper around APScheduler to register periodic jobs with user timezone support."""

    def __init__(self, bot: Bot, session_factory: callable[[], AsyncSession]):
        self.scheduler = AsyncIOScheduler(timezone="UTC")
        self.bot = bot
        self.session_factory = session_factory
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {user_id: {reminder_type: last_sent_date}}
        self.sent_reminders: Dict[int, Dict[str, str]] = {}

    def _get_reminder_key(self, user_id: int, reminder_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        return f"{user_id}_{reminder_type}"

    def _is_reminder_sent_today(self, user_id: int, reminder_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().strftime("%Y-%m-%d")
        key = self._get_reminder_key(user_id, reminder_type)
        return self.sent_reminders.get(key) == today

    def _mark_reminder_sent(self, user_id: int, reminder_type: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        today = datetime.now().strftime("%Y-%m-%d")
        key = self._get_reminder_key(user_id, reminder_type)
        self.sent_reminders[key] = today

    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        print("üöÄ –ó–∞–ø—É—Å–∫ AppScheduler —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
        self.scheduler.add_job(self._daily_principle_job, IntervalTrigger(minutes=1))
        self.scheduler.add_job(self._daily_motivation_job, IntervalTrigger(minutes=1))
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≥–æ—Ç–æ–≤–∫–µ –∏ —Å–ø–∏—Å–∫–∞–º –ø–æ–∫—É–ø–æ–∫
        self.scheduler.add_job(self._nutrition_cooking_job, IntervalTrigger(minutes=1))
        self.scheduler.add_job(self._nutrition_shopping_job, IntervalTrigger(minutes=1))
        
        # –ó–¥–æ—Ä–æ–≤—å–µ: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–≤–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        self.scheduler.add_job(self._health_daily_prompt_job, IntervalTrigger(minutes=1))
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º
        self.scheduler.add_job(self._goal_reminders_job, IntervalTrigger(minutes=1))
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ to-do –∑–∞–¥–∞—á–∞–º
        self.scheduler.add_job(self._todo_reminders_job, IntervalTrigger(minutes=1))
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        self.scheduler.add_job(self._finance_reminders_job, IntervalTrigger(minutes=1))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
        self.scheduler.add_job(self._finance_todo_creation_job, IntervalTrigger(minutes=1))
        
        # To-Do: –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        self.scheduler.add_job(self._todo_evening_reminder_job, IntervalTrigger(minutes=1))
        
        # To-Do: —Å–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ
        self.scheduler.add_job(self._daily_tasks_reset_job, IntervalTrigger(minutes=1))
        
        self.scheduler.start()
        print("‚úÖ AppScheduler –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    async def _daily_principle_job(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∞—Ä–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("daily_principle", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "daily_principle"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (7:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 7):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            await send_daily_principle(self.bot, session, user_id=user.id)
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "daily_principle")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _daily_principle_job: {e}")

    async def _daily_motivation_job(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("daily_motivation", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "daily_motivation"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (8:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 8):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            await send_daily_motivation(self.bot, session, user_id=user.id)
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "daily_motivation")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _daily_motivation_job: {e}")

    async def _nutrition_cooking_job(self) -> None:
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–æ—Ç–æ–≤–∫–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("nutrition_cooking", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "nutrition_cooking"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (18:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 18):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            await send_cooking_day_reminders(self.bot, session, user_id=user.id)
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await create_nutrition_todos_for_all_users(session)
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "nutrition_cooking")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–æ—Ç–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _nutrition_cooking_job: {e}")

    async def _nutrition_shopping_job(self) -> None:
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("nutrition_shopping", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "nutrition_shopping"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (16:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 16):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            await send_shopping_day_reminders(self.bot, session, user_id=user.id)
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await create_nutrition_todos_for_all_users(session)
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "nutrition_shopping")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _nutrition_shopping_job: {e}")

    async def _health_daily_prompt_job(self) -> None:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("health_daily", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "health_daily"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (9:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 9):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            await send_health_daily_prompt(self.bot, session, user_id=user.id)
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "health_daily")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _health_daily_prompt_job: {e}")

    async def _goal_reminders_job(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ü–µ–ª—è–º —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º
                await send_goal_reminders(session, self.bot)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _goal_reminders_job: {e}")

    async def _todo_reminders_job(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ to-do –∑–∞–¥–∞—á–∞–º —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ to-do –∑–∞–¥–∞—á–∞–º
                await send_todo_reminders(session, self.bot)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _todo_reminders_job: {e}")

    async def _finance_reminders_job(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("finance_reminders", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "finance_reminders"):
                            continue
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await send_finance_reminders_for_user(session, user.id, self.bot)
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _finance_reminders_job: {e}")

    async def _finance_todo_creation_job(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("finance_todo_creation", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "finance_todo_creation"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ (6:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 6):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            from app.services.finance_todo_manager import create_todo_for_financial_obligations
                            await create_todo_for_financial_obligations(session, user.id)
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "finance_todo_creation")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á To-Do –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _finance_todo_creation_job: {e}")

    async def _todo_evening_reminder_job(self) -> None:
        """–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ To-Do —Å–ø–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        prefs = user.notification_preferences or {}
                        if not prefs.get("todo_evening", True):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "todo_evening"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (20:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 20):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
                            from app.keyboards.common import todo_daily_reminder_keyboard
                            
                            await self.bot.send_message(
                                user.telegram_id,
                                "üåô <b>–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –∑–∞–≤—Ç—Ä–∞! üìù\n\n"
                                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å –∏ –±—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º. ‚ú®",
                                reply_markup=todo_daily_reminder_keyboard(),
                                parse_mode="HTML"
                            )
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "todo_evening")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _todo_evening_reminder_job: {e}")

    async def _daily_tasks_reset_job(self) -> None:
        """–°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.session_factory() as session:  # type: ignore[misc]
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = (await session.execute(select(User))).scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–±—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è
                        if self._is_reminder_sent_today(user.id, "daily_tasks_reset"):
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ (6:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                        if is_time_to_send_reminder(user.timezone, 6):
                            time_info = get_user_time_info(user.timezone)
                            print(f"üïê –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} "
                                  f"–≤ {time_info['user_local_time'].strftime('%H:%M')} "
                                  f"({time_info['timezone']})")
                            
                            from app.services.daily_tasks_manager import reset_daily_tasks
                            await reset_daily_tasks(session, user.id)
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∏—Ç–∞–Ω–∏—è
                            await create_nutrition_todos_for_all_users(session)
                            
                            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                            self._mark_reminder_sent(user.id, "daily_tasks_reset")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                        continue
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _daily_tasks_reset_job: {e}")

    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            print("üõë AppScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")



