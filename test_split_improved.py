#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
"""

def _split_into_multiple_messages(text: str, max_len: int = 3000) -> list[str]:
    """–†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –æ—Ç DeepSeek.
    """
    if not text:
        return []
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª–∏–Ω–Ω–µ–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    force_split_threshold = 1500
    
    if len(text) <= force_split_threshold:
        print(f"DEBUG: –ü–ª–∞–Ω –∫–æ—Ä–æ—á–µ {force_split_threshold} —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º")
        return [text]
    
    # –î–ª—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏—â–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ —Ä–∞–∑—Ä—ã–≤–∞
    lines = text.split('\n')
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    section_indicators = [
        'üìã', 'üõí', 'üìù', 'üë®‚Äçüç≥', 'üî•', 'üíµ', 'üí∞', 'üçΩÔ∏è', 'ü•ó', 'ü•©',
        '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:', '–ü–æ–∫—É–ø–∫–∏:', '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:', '–†–µ—Ü–µ–ø—Ç—ã:', 
        '–ö–∞–ª–æ—Ä–∏–∏:', '–°—Ç–æ–∏–º–æ—Å—Ç—å:', '–ë—é–¥–∂–µ—Ç:', '–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
        '–î–µ–Ω—å 1:', '–î–µ–Ω—å 2:', '–î–µ–Ω—å 3:', '–î–µ–Ω—å 4:', '–î–µ–Ω—å 5:',
        '–ó–∞–≤—Ç—Ä–∞–∫:', '–û–±–µ–¥:', '–£–∂–∏–Ω:', '–ü–µ—Ä–µ–∫—É—Å:'
    ]
    
    print(f"DEBUG: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–∑ {len(lines)} —Å—Ç—Ä–æ–∫")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–µ–∫—Ü–∏—è–º
    parts = []
    current_part = []
    current_length = 0
    
    for i, line in enumerate(lines):
        line_length = len(line) + 1  # +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Å–µ–∫—Ü–∏–∏
        is_section_break = any(indicator in line for indicator in section_indicators)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π –∏–ª–∏ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–µ–∫—Ü–∏–∏
        if (current_length + line_length > max_len and current_part) or (is_section_break and current_part and current_length > max_len * 0.3):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
            part_text = '\n'.join(current_part).strip()
            if part_text:
                parts.append(part_text)
                print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(part_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            current_part = [line]
            current_length = line_length
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
            current_part.append(line)
            current_length += line_length
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        part_text = '\n'.join(current_part).strip()
        if part_text:
            parts.append(part_text)
            print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(part_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∏–ª–∏ –¥–∞–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    if len(parts) == 1 or len(parts) > 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —á–∞—Å—Ç–µ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        print(f"DEBUG: –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ {len(parts)} —á–∞—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")
        # –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ —Ç–æ–ª—å–∫–æ 1 —á–∞—Å—Ç—å, –Ω–æ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, 
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
        if len(parts) == 1 and len(text) > 1500:
            print(f"DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞—é –¥–ª–∏–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π")
            return _split_into_parts_standard(text, max_len)
        return _split_into_parts_standard(text, max_len)
    
    print(f"DEBUG: –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∏–ª –Ω–∞ {len(parts)} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–µ–π")
    return parts


def _split_into_parts_standard(text: str, max_len: int = 3000) -> list[str]:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ"""
    if len(text) <= max_len:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_len, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (>1500), 
        # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if len(text) > 1500:
            print(f"DEBUG: –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ 2 —á–∞—Å—Ç–∏")
            mid_point = len(text) // 2
            # –ò—â–µ–º —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –æ–∫–æ–ª–æ —Å–µ—Ä–µ–¥–∏–Ω—ã
            for i in range(mid_point - 100, mid_point + 100):
                if i < 0 or i >= len(text):
                    continue
                if text[i] == '\n':
                    mid_point = i + 1
                    break
                elif text[i] == ' ':
                    mid_point = i + 1
                    break
            
            part1 = text[:mid_point].strip()
            part2 = text[mid_point:].strip()
            
            if part1 and part2:
                print(f"DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: —á–∞—Å—Ç—å 1 –¥–ª–∏–Ω–æ–π {len(part1)}, —á–∞—Å—Ç—å 2 –¥–ª–∏–Ω–æ–π {len(part2)}")
                return [part1, part2]
        
        return [text]
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–µ–π –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏
    optimal_part_size = min(max_len, 2500) if len(text) > 4000 else max_len
    
    parts = []
    remaining_text = text
    
    while len(remaining_text) > optimal_part_size:
        # –ò—â–µ–º —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º
        split_point = optimal_part_size
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
        for i in range(optimal_part_size - 100, optimal_part_size):  # –ò—â–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–∏–º–≤–æ–ª–∞—Ö
            if i < 0:
                break
            if remaining_text[i] == '\n':
                split_point = i + 1
                break
            elif remaining_text[i] == ' ':
                split_point = i + 1
                break
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        part = remaining_text[:split_point].strip()
        parts.append(part)
        print(f"DEBUG: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {len(parts)} –¥–ª–∏–Ω–æ–π {len(part)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        remaining_text = remaining_text[split_point:].strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if remaining_text:
        parts.append(remaining_text)
        print(f"DEBUG: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –¥–ª–∏–Ω–æ–π {len(remaining_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return parts


def test_split_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–±–∏–µ–Ω–∏—è"""
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    print("=== –¢–µ—Å—Ç 1: –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç ===")
    short_text = "–≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 3 –¥–Ω—è."
    result = _split_into_multiple_messages(short_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —á–∞—Å—Ç–µ–π")
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1} ({len(part)} —Å–∏–º–≤–æ–ª–æ–≤): {part[:100]}...")
    print()
    
    # –¢–µ—Å—Ç 2: –¢–µ–∫—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã (–Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è)
    print("=== –¢–µ—Å—Ç 2: –¢–µ–∫—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã ===")
    medium_text = "–≠—Ç–æ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã. " * 40  # ~1200 —Å–∏–º–≤–æ–ª–æ–≤
    result = _split_into_multiple_messages(medium_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —á–∞—Å—Ç–µ–π")
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1} ({len(part)} —Å–∏–º–≤–æ–ª–æ–≤): {part[:100]}...")
    print()
    
    # –¢–µ—Å—Ç 3: –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–∏—Ç—å—Å—è (1500-3000 —Å–∏–º–≤–æ–ª–æ–≤)
    print("=== –¢–µ—Å—Ç 3: –¢–µ–∫—Å—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã (–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–∏—Ç—å—Å—è) ===")
    medium_long_text = "–≠—Ç–æ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–∏—Ç—å—Å—è –Ω–∞ —á–∞—Å—Ç–∏. " * 60  # ~2400 —Å–∏–º–≤–æ–ª–æ–≤
    result = _split_into_multiple_messages(medium_long_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —á–∞—Å—Ç–µ–π")
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1} ({len(part)} —Å–∏–º–≤–æ–ª–æ–≤): {part[:100]}...")
    print()
    
    # –¢–µ—Å—Ç 4: –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ–ª–∂–µ–Ω —Ä–∞–∑–±–∏—Ç—å—Å—è –Ω–∞ –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π)
    print("=== –¢–µ—Å—Ç 4: –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ===")
    long_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. " * 150  # ~4500 —Å–∏–º–≤–æ–ª–æ–≤
    result = _split_into_multiple_messages(long_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —á–∞—Å—Ç–µ–π")
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1} ({len(part)} —Å–∏–º–≤–æ–ª–æ–≤): {part[:100]}...")
    print()
    
    # –¢–µ—Å—Ç 5: –¢–µ–∫—Å—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    print("=== –¢–µ—Å—Ç 5: –¢–µ–∫—Å—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ ===")
    structured_text = """üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç 1
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç 2
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç 3

üë®‚Äçüç≥ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
‚Ä¢ –®–∞–≥ 1
‚Ä¢ –®–∞–≥ 2
‚Ä¢ –®–∞–≥ 3

üî• –ö–∞–ª–æ—Ä–∏–∏:
‚Ä¢ –î–µ–Ω—å 1: 2000 –∫–∫–∞–ª
‚Ä¢ –î–µ–Ω—å 2: 2100 –∫–∫–∞–ª
‚Ä¢ –î–µ–Ω—å 3: 1900 –∫–∫–∞–ª

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:
‚Ä¢ –û–±—â–∞—è: 1500 ‚ÇΩ
‚Ä¢ –ù–∞ –¥–µ–Ω—å: 500 ‚ÇΩ""" * 30  # ~3000 —Å–∏–º–≤–æ–ª–æ–≤
    
    result = _split_into_multiple_messages(structured_text)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —á–∞—Å—Ç–µ–π")
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1} ({len(part)} —Å–∏–º–≤–æ–ª–æ–≤): {part[:100]}...")
    print()


if __name__ == "__main__":
    test_split_function()
