#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
"""

from datetime import date, datetime
from app.db.models.challenge import Challenge


def test_challenge_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Challenge —Å –Ω–æ–≤—ã–º –ø–æ–ª–µ–º end_date"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Challenge...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –±–µ–∑ —Å—Ä–æ–∫–∞
    challenge1 = Challenge(
        title="–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –±–µ–∑ —Å—Ä–æ–∫–∞",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        time_str="08:00",
        days_mask="1111110"
    )
    print(f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ –±–µ–∑ —Å—Ä–æ–∫–∞: {challenge1.title}")
    print(f"   end_date: {challenge1.end_date}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–æ —Å—Ä–æ–∫–æ–º
    challenge2 = Challenge(
        title="–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–æ —Å—Ä–æ–∫–æ–º",
        description="–û–ø–∏—Å–∞–Ω–∏–µ",
        time_str="09:00",
        days_mask="1111110",
        end_date=date(2025, 2, 15)
    )
    print(f"‚úÖ –ß–µ–ª–ª–µ–Ω–¥–∂ —Å–æ —Å—Ä–æ–∫–æ–º: {challenge2.title}")
    print(f"   end_date: {challenge2.end_date}")
    
    print("‚úÖ –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")


def test_date_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç...")
    
    test_dates = [
        "15.02.2025",
        "01.01.2025",
        "31.12.2024"
    ]
    
    for date_str in test_dates:
        try:
            parsed_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            print(f"‚úÖ {date_str} -> {parsed_date}")
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {date_str}: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")


def test_date_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç...")
    
    today = date.today()
    test_cases = [
        (date(today.year + 1, 1, 1), True, "–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"),
        (today, False, "–°–µ–≥–æ–¥–Ω—è"),
        (date(today.year - 1, 1, 1), False, "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º")
    ]
    
    for test_date, should_be_valid, description in test_cases:
        is_valid = test_date > today
        status = "‚úÖ" if is_valid == should_be_valid else "‚ùå"
        print(f"{status} {description}: {test_date} (–≤–∞–ª–∏–¥–Ω–∞: {is_valid})")
    
    print("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π\n")
    
    try:
        test_challenge_model()
        test_date_parsing()
        test_date_validation()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: alembic upgrade head")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
