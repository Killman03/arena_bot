#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
"""

import sys
import os
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.utils.timezone_utils import (
    get_user_local_time,
    is_time_to_send_reminder,
    validate_timezone,
    get_timezone_display_name,
    parse_utc_offset
)


def test_timezone_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ UTC —Å–º–µ—â–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ UTC —Å–º–µ—â–µ–Ω–∏–π:")
    
    test_cases = [
        "UTC+3",
        "UTC-5", 
        "UTC+0",
        "UTC+12",
        "UTC-12",
        "UTC+3:30",
        "UTC-5:30",
        "invalid",
        "UTC++3",
        "UTC-"
    ]
    
    for case in test_cases:
        result = parse_utc_offset(case)
        print(f"  {case:>10} -> {result}")
    
    print()


def test_timezone_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤:")
    
    test_cases = [
        "Europe/Moscow",
        "America/New_York", 
        "UTC+3",
        "UTC-5",
        "invalid_timezone",
        "Asia/Tokyo",
        "UTC+0",
        "Europe/London"
    ]
    
    for case in test_cases:
        is_valid = validate_timezone(case)
        print(f"  {case:>20} -> {'‚úÖ' if is_valid else '‚ùå'}")
    
    print()


def test_user_local_time():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üïê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    
    test_timezones = [
        "UTC+3",
        "UTC-5",
        "Europe/Moscow",
        "America/New_York",
        "Asia/Tokyo",
        None  # UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]
    
    utc_now = datetime.now(timezone.utc)
    print(f"  –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {utc_now.strftime('%H:%M:%S')}")
    
    for tz in test_timezones:
        try:
            local_time = get_user_local_time(tz)
            tz_name = tz or "UTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            print(f"  {tz_name:>25} -> {local_time.strftime('%H:%M:%S')}")
        except Exception as e:
            print(f"  {tz:>25} -> –û—à–∏–±–∫–∞: {e}")
    
    print()


def test_reminder_timing():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    print("‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
    
    test_cases = [
        ("UTC+3", 7),   # 7:00 UTC+3
        ("UTC-5", 8),   # 8:00 UTC-5
        ("UTC+0", 9),   # 9:00 UTC
        ("Europe/Moscow", 7),  # 7:00 Moscow
        (None, 7)       # 7:00 UTC
    ]
    
    for timezone_str, target_hour in test_cases:
        should_send = is_time_to_send_reminder(timezone_str, target_hour)
        tz_name = timezone_str or "UTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        print(f"  {tz_name:>25} –≤ {target_hour:02d}:00 -> {'üü¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å' if should_send else 'üî¥ –ù–µ –≤—Ä–µ–º—è'}")
    
    print()


def test_timezone_display_names():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤"""
    print("üè∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:")
    
    test_timezones = [
        "UTC+3",
        "UTC-5", 
        "Europe/Moscow",
        "America/New_York",
        "Asia/Tokyo",
        "invalid_tz"
    ]
    
    for tz in test_timezones:
        display_name = get_timezone_display_name(tz)
        print(f"  {tz:>20} -> {display_name}")
    
    print()


def test_timezone_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    print("‚ÑπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ:")
    
    from app.utils.timezone_utils import get_user_time_info
    
    test_timezones = [
        "UTC+3",
        "UTC-5",
        "Europe/Moscow",
        None
    ]
    
    for tz in test_timezones:
        try:
            info = get_user_time_info(tz)
            tz_name = tz or "UTC (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            print(f"  {tz_name:>20}:")
            print(f"    –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {info['user_local_time'].strftime('%H:%M:%S')}")
            print(f"    UTC –≤—Ä–µ–º—è: {info['utc_time'].strftime('%H:%M:%S')}")
            print(f"    –°–º–µ—â–µ–Ω–∏–µ: {info['offset_hours']:+g} —á")
            print(f"    –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {info['timezone']}")
        except Exception as e:
            print(f"  {tz:>20} -> –û—à–∏–±–∫–∞: {e}")
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ Voit Bot")
    print("=" * 60)
    
    try:
        test_timezone_parsing()
        test_timezone_validation()
        test_user_local_time()
        test_reminder_timing()
        test_timezone_display_names()
        test_timezone_info()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
