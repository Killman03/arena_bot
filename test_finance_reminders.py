#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.db.session import session_scope
from app.db.models import User, Creditor, Debtor
from app.services.finance_reminders import (
    get_overdue_creditors,
    get_overdue_debtors,
    get_upcoming_creditors,
    get_upcoming_debtors,
    send_finance_reminders_for_user
)
from datetime import date, timedelta


class MockBot:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = None):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"\nüì§ –°–û–û–ë–©–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –í –ß–ê–¢ {chat_id}:")
        print("=" * 50)
        print(text)
        print("=" * 50)
        return True


async def test_finance_reminders():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    mock_bot = MockBot()
    
    async with session_scope() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        users = (await session.execute("SELECT id, telegram_id FROM \"user\" LIMIT 1")).fetchall()
        
        if not users:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        user_id = users[0][0]
        telegram_id = users[0][1]
        
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, Telegram ID: {telegram_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä—ã –∏ –¥–æ–ª–∂–Ω–∏–∫–∏
        overdue_creditors = await get_overdue_creditors(session, user_id)
        overdue_debtors = await get_overdue_debtors(session, user_id)
        upcoming_creditors = await get_upcoming_creditors(session, user_id)
        upcoming_debtors = await get_upcoming_debtors(session, user_id)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤: {len(overdue_creditors)}")
        print(f"   üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∏–∫–æ–≤: {len(overdue_debtors)}")
        print(f"   üü° –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤: {len(upcoming_creditors)}")
        print(f"   üü° –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–æ–ª–∂–Ω–∏–∫–æ–≤: {len(upcoming_debtors)}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        if not (overdue_creditors or overdue_debtors or upcoming_creditors or upcoming_debtors):
            print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞
            overdue_creditor = Creditor(
                user_id=user_id,
                name="–¢–µ—Å—Ç–æ–≤—ã–π –±–∞–Ω–∫",
                amount=5000.00,
                due_date=date.today() - timedelta(days=5),
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"
            )
            session.add(overdue_creditor)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞
            overdue_debtor = Debtor(
                user_id=user_id,
                name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                amount=3000.00,
                due_date=date.today() - timedelta(days=3),
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –¥–æ–ª–≥"
            )
            session.add(overdue_debtor)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–≥–æ—Å—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞
            upcoming_creditor = Creditor(
                user_id=user_id,
                name="–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
                amount=15000.00,
                due_date=date.today() + timedelta(days=2),
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–π—Å—è –∫—Ä–µ–¥–∏—Ç"
            )
            session.add(upcoming_creditor)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–≥–æ—Å—è –¥–æ–ª–∂–Ω–∏–∫–∞
            upcoming_debtor = Debtor(
                user_id=user_id,
                name="–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                amount=8000.00,
                due_date=date.today() + timedelta(days=1),
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–π—Å—è –¥–æ–ª–≥"
            )
            session.add(upcoming_debtor)
            
            await session.commit()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        try:
            await send_finance_reminders_for_user(session, user_id, mock_bot)
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


if __name__ == "__main__":
    asyncio.run(test_finance_reminders())
