#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 check_database_health.py
"""

import asyncio
import sys
from datetime import datetime, timezone
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
sys.path.append('.')
from app.db.models import User, Todo, Goal, Finance, Health, Nutrition, Productivity, Routine, Interaction
from app.config import settings


async def check_database_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_async_engine(settings.DATABASE_URL)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    try:
        async with async_session() as session:
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
            result = await session.execute(text("SELECT version();"))
            version = result.scalar()
            print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...")
            tables = [
                'users', 'todos', 'goals', 'finances', 'health', 
                'nutrition', 'productivity', 'routines', 'interactions'
            ]
            
            for table in tables:
                try:
                    result = await session.execute(text(f"SELECT COUNT(*) FROM {table};"))
                    count = result.scalar()
                    print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: –æ—à–∏–±–∫–∞ - {e}")
            
            # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\n3. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(text("SELECT COUNT(*) FROM users;"))
            total_users = result.scalar()
            print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            result = await session.execute(text("""
                SELECT COUNT(*) FROM users 
                WHERE created_at >= NOW() - INTERVAL '30 days';
            """))
            recent_users = result.scalar()
            print(f"   –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 30 –¥–Ω–µ–π: {recent_users}")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ timezone
            result = await session.execute(text("""
                SELECT COUNT(*) FROM users 
                WHERE timezone IS NOT NULL;
            """))
            users_with_tz = result.scalar()
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ timezone: {users_with_tz}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            result = await session.execute(text("SELECT COUNT(*) FROM todos;"))
            total_todos = result.scalar()
            print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_todos}")
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            result = await session.execute(text("""
                SELECT COUNT(*) FROM todos 
                WHERE is_completed = false;
            """))
            active_todos = result.scalar()
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_todos}")
            
            # –ó–∞–¥–∞—á–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            result = await session.execute(text("""
                SELECT COUNT(*) FROM todos 
                WHERE is_reminder_active = true;
            """))
            todos_with_reminders = result.scalar()
            print(f"   –ó–∞–¥–∞—á —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏: {todos_with_reminders}")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            result = await session.execute(text("SELECT COUNT(*) FROM finances;"))
            total_finances = result.scalar()
            print(f"   –í—Å–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_finances}")
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π
            print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π...")
            
            result = await session.execute(text("SELECT COUNT(*) FROM goals;"))
            total_goals = result.scalar()
            print(f"   –í—Å–µ–≥–æ —Ü–µ–ª–µ–π: {total_goals}")
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            print("\n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π...")
            
            result = await session.execute(text("""
                SELECT COUNT(*) FROM interactions 
                WHERE created_at >= NOW() - INTERVAL '24 hours';
            """))
            recent_interactions = result.scalar()
            print(f"   –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {recent_interactions}")
            
            # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ë–î
            print("\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            result = await session.execute(text("""
                SELECT pg_size_pretty(pg_database_size(current_database()));
            """))
            db_size = result.scalar()
            print(f"   –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_size}")
            
            # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
            print("\n9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...")
            
            result = await session.execute(text("""
                SELECT schemaname, tablename, indexname 
                FROM pg_indexes 
                WHERE schemaname = 'public' 
                ORDER BY tablename, indexname;
            """))
            indexes = result.fetchall()
            
            for index in indexes:
                print(f"   üìä {index[1]}.{index[2]}")
            
            # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤)
            print("\n10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            result = await session.execute(text("""
                SELECT MAX(updated_at) FROM users;
            """))
            last_update = result.scalar()
            if last_update:
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {last_update}")
            
            print("\n" + "=" * 50)
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False
    
    finally:
        await engine.dispose()
    
    return True


async def check_data_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    engine = create_async_engine(settings.DATABASE_URL)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    try:
        async with async_session() as session:
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ telegram_id
            result = await session.execute(text("""
                SELECT COUNT(*) FROM users WHERE telegram_id IS NULL;
            """))
            users_without_tg = result.scalar()
            if users_without_tg > 0:
                print(f"   ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ telegram_id: {users_without_tg}")
            else:
                print("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç telegram_id")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ telegram_id
            result = await session.execute(text("""
                SELECT telegram_id, COUNT(*) 
                FROM users 
                GROUP BY telegram_id 
                HAVING COUNT(*) > 1;
            """))
            duplicates = result.fetchall()
            if duplicates:
                print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ telegram_id: {len(duplicates)}")
                for dup in duplicates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"      telegram_id {dup[0]}: {dup[1]} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(text("""
                SELECT COUNT(*) FROM todos t 
                LEFT JOIN users u ON t.user_id = u.id 
                WHERE u.id IS NULL;
            """))
            orphan_todos = result.scalar()
            if orphan_todos > 0:
                print(f"   ‚ö†Ô∏è  –ó–∞–¥–∞—á –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {orphan_todos}")
            else:
                print("   ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False
    
    finally:
        await engine.dispose()
    
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Voit Bot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL.split('@')[1] if '@' in settings.DATABASE_URL else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    db_ok = await check_database_health()
    integrity_ok = await check_data_integrity()
    
    print("\n" + "=" * 50)
    if db_ok and integrity_ok:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º")


if __name__ == "__main__":
    asyncio.run(main())
