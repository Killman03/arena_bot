#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ ZIP —Ñ–∞–π–ª–æ–≤.
"""

import asyncio
import tempfile
import zipfile
import sqlite3
import os
from datetime import datetime, date

from app.services.zip_importer import ZipImporterService
from app.db.session import session_scope
from app.db.models import User


async def create_test_zip():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    with tempfile.TemporaryDirectory() as temp_dir:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é SQLite –±–∞–∑—É
        db_path = os.path.join(temp_dir, "test_health.db")
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–¥–æ—Ä–æ–≤—å—è
        cursor.execute("""
            CREATE TABLE health_data (
                id INTEGER PRIMARY KEY,
                date TEXT,
                steps INTEGER,
                calories INTEGER,
                sleep_minutes INTEGER,
                heart_rate INTEGER,
                weight_kg REAL
            )
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            ("2024-01-01", 8500, 2100, 480, 72, 75.5),
            ("2024-01-02", 9200, 2300, 510, 68, 75.3),
            ("2024-01-03", 7800, 1950, 450, 70, 75.4),
            ("2024-01-04", 10500, 2600, 540, 65, 75.1),
            ("2024-01-05", 6800, 1700, 420, 73, 75.6),
        ]
        
        cursor.executemany(
            "INSERT INTO health_data (date, steps, calories, sleep_minutes, heart_rate, weight_kg) VALUES (?, ?, ?, ?, ?, ?)",
            test_data
        )
        
        conn.commit()
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º ZIP —Ñ–∞–π–ª
        zip_path = os.path.join(temp_dir, "test_health.zip")
        
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            zipf.write(db_path, "health_data.db")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª: {zip_path}")
        print(f"üìä –°–æ–¥–µ—Ä–∂–∏—Ç {len(test_data)} –∑–∞–ø–∏—Å–µ–π –æ –∑–¥–æ—Ä–æ–≤—å–µ")
        
        return zip_path


async def test_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ ZIP —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP
    zip_path = await create_test_zip()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 999999  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
    importer = ZipImporterService()
    
    try:
        async with session_scope() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(zip_path):
                print("‚ùå ZIP —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            print(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∏–∑: {zip_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            result = await importer.import_health_data_from_zip(
                session, test_user_id, zip_path
            )
            
            if result['success']:
                print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω!")
                print(f"üìä –ó–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['total_records']}")
                print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {', '.join(result['tables_imported'])}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–º–ø–æ—Ä—Ç–∞
                for table_name, table_data in result['imported_data'].items():
                    print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
                    print(f"   –ö–æ–ª–æ–Ω–∫–∏: {', '.join(table_data['columns'])}")
                    print(f"   –ó–∞–ø–∏—Å–µ–π: {table_data['count']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                    for i, row in enumerate(table_data['rows'][:3]):
                        print(f"   –ó–∞–ø–∏—Å—å {i+1}: {row}")
                    
                    if len(table_data['rows']) > 3:
                        print(f"   ... –∏ –µ—â–µ {len(table_data['rows']) - 3} –∑–∞–ø–∏—Å–µ–π")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {result['error']}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(zip_path):
            os.remove(zip_path)
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")


async def test_zip_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é ZIP —Ñ–∞–π–ª–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ZIP —Ñ–∞–π–ª–æ–≤...")
    
    importer = ZipImporterService()
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    print(f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {importer.get_supported_formats()}")
    print(f"üóÑÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ë–î: {importer.get_db_extensions()}")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ ZIP
    with tempfile.NamedTemporaryFile(suffix='.zip', delete=False) as temp_file:
        temp_file.write(b"This is not a ZIP file!")
        temp_path = temp_file.name
    
    try:
        # –î–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
        result = await importer.import_health_data_from_zip(
            None, 1, temp_path
        )
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {result}")
        
    except Exception as e:
        print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    
    finally:
        if os.path.exists(temp_path):
            os.remove(temp_path)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞ ZIP —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è
    await test_zip_validation()
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç
    await test_import()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
